fig.width = 12, fig.asp = 0.618,
fig.align = "center", out.width = "100%")
# Set this to host_prod or host_dev
host_name = "host_prod"
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
# Load variable dictionary for relating tables, variable codes,
# and readable values
dict_vars <- fun_pull_mongo_data(tables = "dict_vars",
host_name = host_name)
### ----- National data import and clean -----
# This script takes the national_* objects and transforms them
# into the final datasets for mapping
source(here("national_import.R"), local = TRUE)
# Get the right combination of dataset and variable
national_data <- eval(sym(str_remove(params$national_category_selector, "^is_")))
# Markdown title
rmd_title <- dict_vars$national_dropdown_label[which(dict_vars$var_readable == params$national_variable_selector)][1]
# Chunk 2: national-map-summary
HTML(paste0(altText(national_data,
params$national_variable_selector),
" Detailed information is available below in the map and table below.",
"<br><i>Source: 2015-2019 American Community Survey 5-Year Estimates.</i>"))
# Chunk 3: national-map
render_geo_static_map(national_data,
params$national_variable_selector,
"YlOrBr")
# Chunk 4: national-table
# Get variable group based on selected variable
national_vars_in_topic <- dict_vars %>%
filter((!!sym(params$national_category_selector)) == TRUE,
var_topic ==
(dict_vars %>%
filter((!!sym(params$national_category_selector)) == TRUE,
var_readable == params$national_variable_selector) %>%
pull(var_topic))) %>%
select(var_pretty, var_readable)
# Caption
cap_choices <- c("Demographics" = "is_demographics",
"Community Participation" = "is_community_participation",
"Community Living" = "is_community_living",
"Work/Economic" = "is_work_economic")
table_caption <- paste(names(cap_choices[cap_choices == params$national_category_selector]), "Table")
# Reorganize dataframe, switch to pretty names
national_data_table_friendly <- national_data %>%
arrange(GEOID) %>%
mutate("State" = paste0(NAME, " (", ABBR, ")")) %>%
select(any_of(c("State",
national_vars_in_topic %>%
pull(var_readable)))) %>%
mutate(across(-State & -ends_with("_pct"),
~scales::comma(.x))) %>%
mutate(across(ends_with("_pct"),
~scales::percent(.x,
accuracy = 0.1,
scale = 1))) %>%
rename(!!any_of(national_vars_in_topic %>%
deframe()))
# Summary table
# # Left side
# summary_1 <- kbl(x = national_data_table_friendly,
#                  format = "html",
#                  row.names = FALSE,
#                  caption = table_caption) %>%
#   kable_paper("striped",
#               full_width = TRUE,
#               position = "left") %>%
#   kable_styling(bootstrap_options = c("striped",
#                                       "condensed"),
#                 full_width = TRUE,
#                 position = "left") %>%
#   column_spec(1, width = "1.5in")
#
# # Right side
# summary_2 <- kbl(x = national_data_table_friendly[27:52,],
#                  format = "html",
#                  row.names = FALSE,
#                  caption = table_caption) %>%
#   kable_paper("striped",
#               full_width = TRUE,
#               position = "left") %>%
#   kable_styling(bootstrap_options = c("striped",
#                                       "condensed"),
#                 full_width = TRUE,
#                 position = "left") %>%
#   column_spec(1, width = "1.5in")
# Full table
national_topic_table <-
kbl(x = national_data_table_friendly,
format = "html",
row.names = FALSE,
caption = table_caption) %>%
kable_paper("striped",
full_width = TRUE,
position = "left") %>%
kable_styling(bootstrap_options = c("striped",
"condensed"),
full_width = TRUE,
font_size = 11,
position = "left") %>%
column_spec(1, width = "1.5in")
# UI Output
HTML(national_topic_table)
openxlsx::write.xlsx(national_data_table_friendly,
file = "C:\\Users\\sconn\\Downloads\\pwd_institution_pct.xlsx")
community_living %>% select(pop_total, pwd_pct, pwd_total, pwd_grpquarters_institution, pwd_grpquarters_institution_pct, pwd_grpquarters_noninstitution, pwd_home, pwd_home_pct)
# Packages
library(tidyverse); library(sf); library(htmltools)
library(colourpicker); library(gghighlight)
library(knitr); library(kableExtra)
library(tigris); library(urbnmapr); library(patchwork)
library(scales); library(hrbrthemes); library(ggthemes)
library(extrafont); library(mongolite); library(here)
options(scipen = 999999)
opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE,
fig.width = 12, fig.asp = 0.618,
fig.align = "center", out.width = "100%")
# Set this to host_prod or host_dev
host_name = "host_prod"
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
# Load variable dictionary for relating tables, variable codes,
# and readable values
dict_vars <- fun_pull_mongo_data(tables = "dict_vars",
host_name = host_name)
### ----- National data import and clean -----
# This script takes the national_* objects and transforms them
# into the final datasets for mapping
source(here("national_import.R"), local = TRUE)
# Get the right combination of dataset and variable
national_data <- eval(sym(str_remove(params$national_category_selector, "^is_")))
# Markdown title
rmd_title <- dict_vars$national_dropdown_label[which(dict_vars$var_readable == params$national_variable_selector)][1]
dict_vars <- fun_pull_mongo_data(tables = "dict_vars",
host_name = host_name)
community_living %>% select(pop_total, pwd_pct, pwd_total, pwd_grpquarters_institution, pwd_grpquarters_institution_pct,
pop_grpquarters_institution_pwd_pct, pwd_grpquarters_noninstitution, pwd_home, pwd_home_pct)
# This script takes the national_* objects and transforms them
# into the final datasets for mapping
source(here("national_import.R"), local = TRUE)
# Packages
library(tidyverse); library(sf); library(htmltools)
library(colourpicker); library(gghighlight)
library(knitr); library(kableExtra)
library(tigris); library(urbnmapr); library(patchwork)
library(scales); library(hrbrthemes); library(ggthemes)
library(extrafont); library(mongolite); library(here)
options(scipen = 999999)
opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE,
fig.width = 12, fig.asp = 0.618,
fig.align = "center", out.width = "100%")
# Set this to host_prod or host_dev
host_name = "host_prod"
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
# Load variable dictionary for relating tables, variable codes,
# and readable values
dict_vars <- fun_pull_mongo_data(tables = "dict_vars",
host_name = host_name)
### ----- National data import and clean -----
# This script takes the national_* objects and transforms them
# into the final datasets for mapping
source(here("national_import.R"), local = TRUE)
# Get the right combination of dataset and variable
national_data <- eval(sym(str_remove(params$national_category_selector, "^is_")))
# Markdown title
rmd_title <- dict_vars$national_dropdown_label[which(dict_vars$var_readable == params$national_variable_selector)][1]
dict_vars <- fun_pull_mongo_data(tables = "dict_vars",
host_name = host_name)
community_living %>% select(pop_total, pwd_pct, pwd_total, pwd_grpquarters_institution, pwd_grpquarters_institution_pct,
pop_grpquarters_institution_pwd_pct, pwd_grpquarters_noninstitution, pwd_home, pwd_home_pct)
# This script takes the national_* objects and transforms them
# into the final datasets for mapping
source(here("national_import.R"), local = TRUE)
# This script takes the national_* objects and transforms them
# into the final datasets for mapping
source(here("national_import.R"), local = TRUE)
# This script takes the national_* objects and transforms them
# into the final datasets for mapping
source(here("national_import.R"), local = TRUE)
### ----- Libraries and database connections -----
# Packages
library(tidyverse); library(sf); library(htmltools)
library(colourpicker); library(gghighlight)
library(knitr); library(kableExtra)
library(tigris); library(urbnmapr); library(patchwork)
library(scales); library(hrbrthemes); library(ggthemes)
library(extrafont); library(mongolite); library(here)
options(scipen = 999999)
opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE,
fig.width = 12, fig.asp = 0.618,
fig.align = "center", out.width = "100%")
# Set this to host_prod or host_dev
host_name = "host_prod"
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
# Load variable dictionary for relating tables, variable codes,
# and readable values
dict_vars <- fun_pull_mongo_data(tables = "dict_vars",
host_name = host_name)
### ----- National data import and clean -----
# This script takes the national_* objects and transforms them
# into the final datasets for mapping
source(here("national_import.R"), local = TRUE)
# Get the right combination of dataset and variable
national_data <- eval(sym(str_remove(params$national_category_selector, "^is_")))
# Markdown title
rmd_title <- dict_vars$national_dropdown_label[which(dict_vars$var_readable == params$national_variable_selector)][1]
dict_vars <- fun_pull_mongo_data(tables = "dict_vars",
host_name = host_name)
community_living %>% select(pop_total, pwd_pct, pwd_total,
pwd_grpquarters_institution,
pwd_grpquarters_institution_pct,
pop_grpquarters_institution_pwd_pct,
pwd_grpquarters_noninstitution,
pwd_home, pwd_home_pct)
community_living %>% select(ABBR, NAME, pop_total, pwd_pct, pwd_total,
pwd_grpquarters_institution,
pwd_grpquarters_institution_pct,
pop_grpquarters_institution_pwd_pct,
pwd_grpquarters_noninstitution,
pwd_home, pwd_home_pct)
community_living %>% select(ABBR, pop_total, pwd_pct, pwd_total,
pwd_grpquarters_institution,
pwd_grpquarters_institution_pct,
pop_grpquarters_institution_pwd_pct,
pwd_grpquarters_noninstitution,
pwd_home, pwd_home_pct) %>%
head(5)
community_living %>% select(ABBR, pop_total, pwd_pct, pwd_total,
pop_grpquarters_institution,
pwd_grpquarters_institution,
pop_grpquarters_institution_pwd_pct,
pwd_grpquarters_institution_pct,
pwd_grpquarters_noninstitution,
pwd_grpquarters_noninstitution_pct,
pwd_home, pwd_home_pct) %>%
head(2)
27586 / 539887
# This script takes the national_* objects and transforms them
# into the final datasets for mapping
source(here("national_import.R"), local = TRUE)
community_living %>% select(ABBR, pop_total, pwd_pct, pwd_total,
pop_grpquarters_institution,
pwd_grpquarters_institution,
pop_grpquarters_institution_pwd_pct,
pwd_grpquarters_institution_pct,
pop_grpquarters_noninstitution,
pwd_grpquarters_noninstitution,
pwd_grpquarters_noninstitution_pct,
pwd_home, pwd_home_pct) %>%
head(2)
community_living %>% select(ABBR, pop_total, pwd_pct, pwd_total,
pop_grpquarters_institution,
pwd_grpquarters_institution,
pop_grpquarters_institution_pwd_pct,
pwd_grpquarters_institution_pct,
pop_grpquarters_noninstitution,
pwd_grpquarters_noninstitution,
pop_grpquarters_noninstitution_pwd_pct,
pwd_grpquarters_noninstitution_pct,
pwd_home, pwd_home_pct) %>%
head(2)
5158 / 35090
5158 / 539887
community_living %>% select(ABBR, pop_total, pwd_pct, pwd_total,
pop_grpquarters_institution,
pwd_grpquarters_institution,
pop_grpquarters_institution_pwd_pct,
pwd_grpquarters_institution_pct,
pop_grpquarters_noninstitution,
pwd_grpquarters_noninstitution,
pop_grpquarters_noninstitution_pwd_pct,
pwd_grpquarters_noninstitution_pct,
pwd_home, pwd_home_pct) %>%
head(2)
27586 + 5158 + 507143
2830 + 2339 + 85490
View(demographics)
View(demographics)
5158 + 507143
source('E:/UIC/Voorhees/ADA-PARC/ADA PARC Website Design/helper_scripts/dict_vars_upload.R', echo=TRUE)
source('E:/UIC/Voorhees/ADA-PARC/ADA PARC Website Design/helper_scripts/dict_vars_upload.R', echo=TRUE)
source('E:/UIC/Voorhees/ADA-PARC/ADA PARC Website Design/helper_scripts/dict_vars_upload.R', echo=TRUE)
install.packages(c("backports", "brio", "broom", "cli", "cpp11", "crayon", "credentials", "crosstalk", "deldir", "devtools", "digest", "DT", "dtplyr", "fs", "generics", "gert", "glue", "igraph", "memoise", "mongolite", "odbc", "pkgbuild", "pkgload", "RcppArmadillo", "readr", "remotes", "RPostgres", "RPostgreSQL", "rsconnect", "RSQLite", "servr", "sessioninfo", "sf", "sp", "spatstat.core", "stars", "stplanr", "stringi", "terra", "testthat", "tibble", "tidygeocoder", "tinytex", "tzdb", "usethis", "uuid", "vroom", "withr", "xfun", "xml2"))
source('E:/UIC/Voorhees/ADA PARC Website Design/helper_scripts/dict_vars_upload.R', echo=TRUE)
# Packages
library(reactlog)
library(tidyverse)
library(gridExtra)
library(tigris); library(sf)
# library(geofacet)
library(urbnmapr)
library(leaflet); library(leaflet.extras)
library(tmap); library(tmaptools)
library(htmltools)
library(shiny)
library(shinycssloaders)
# devtools::install_github("daattali/shinycssloaders", ref = "rmarkdown") # rmarkdown branch must be installed and cssloaders_in_header.html must exist
library(shinyWidgets); library(flexdashboard)
library(colourpicker); library(gghighlight)
library(knitr); library(kableExtra)
library(openxlsx); library(scales)
library(hrbrthemes); library(ggthemes)
library(extrafont); library(plotly)
library(mongolite); library(here)
options(scipen = 999999,
tigris_use_cache = TRUE,
shiny.reactlog = TRUE)
knitr::opts_chunk$set(fig.cap = TRUE)
### ----- Database connections -----
# Set this to host_prod or host_dev
host_name = "host_dev"
### ----- Functions import -----
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
# Load variable dictionary for relating tables, variable codes,
# and readable values
dict_vars <- fun_pull_mongo_data(tables = "dict_vars",
host_name = host_name)
### ----- National Data import and clean -----
# This script takes the national_* objects and transforms them
# into the final datasets for mapping
source(here("national_import.R"), local = TRUE)
# reactlog::reactlog_enable()
View(dict_vars)
render_national_map(
"is_demographics",
"pwd_pct",
"YlOrBr"
)
category <- "is_demographics",
selected <- "pwd_pct"
if(!is.character(category)) {
stop("category must be a character string")
}
if(!is.character(selected)) {
stop("selected must be a character string")
}
data <- eval(sym(str_remove(category, "^is_")))
no_classes <- 4
# p1
legend_title <- paste0(dict_vars$var_pretty[which(dict_vars$var_readable == selected)][1])
quartiles <- quantile(data %>% pull(!!sym(selected)),
probs = seq(0, 1, length.out = no_classes + 1),
na.rm = TRUE)
labels <- set_quartile_labels(quartiles, 4, selected)
# isCompVar
display_type <- dict_vars %>%
filter(var_readable == selected, !!sym(category)) %>%
pull(display_type)
is_comp <- ifelse(display_type == "comp", T, F)
category <- "is_demographics"
selected <- "pwd_pct"
if(!is.character(category)) {
stop("category must be a character string")
}
if(!is.character(selected)) {
stop("selected must be a character string")
}
data <- eval(sym(str_remove(category, "^is_")))
no_classes <- 4
source('E:/UIC/Voorhees/ADA PARC Website Design/functions.R', echo=TRUE)
category <- "is_demographics"
selected <- "pwd_pct"
if(!is.character(category)) {
stop("category must be a character string")
}
if(!is.character(selected)) {
stop("selected must be a character string")
}
data <- eval(sym(str_remove(category, "^is_")))
no_classes <- 4
# p1
legend_title <- paste0(dict_vars$var_pretty[which(dict_vars$var_readable == selected)][1])
quartiles <- quantile(data %>% pull(!!sym(selected)),
probs = seq(0, 1, length.out = no_classes + 1),
na.rm = TRUE)
labels <- set_quartile_labels(quartiles, 4, selected)
# isCompVar
display_type <- dict_vars %>%
filter(var_readable == selected, !!sym(category)) %>%
pull(display_type)
is_comp <- ifelse(display_type == "comp",
TRUE, FALSE)
source('E:/UIC/Voorhees/ADA PARC Website Design/helper_scripts/dict_vars_upload.R', echo=TRUE)
source('E:/UIC/Voorhees/ADA PARC Website Design/helper_scripts/dict_vars_upload.R', echo=TRUE)
# Write to database
mongo_conn <- fun_mongo_connect(host_name = "host_prod",
collection_name = "dict_vars",
database_name = "ADA-PARC")
mongo_conn$drop()
mongo_conn$insert(dict_vars)
source('E:/UIC/Voorhees/ADA PARC Website Design/helper_scripts/dict_vars_upload.R', echo=TRUE)
source('E:/UIC/Voorhees/ADA PARC Website Design/helper_scripts/dict_vars_upload.R', echo=TRUE)
# Write to database
mongo_conn <- fun_mongo_connect(host_name = "host_prod",
collection_name = "dict_vars",
database_name = "ADA-PARC")
mongo_conn$drop()
mongo_conn$insert(dict_vars)
View(dict_vars)
library(patchwork)
# Chunk 1: setup
### ----- Libraries -----
# Packages
library(reactlog)
library(tidyverse)
library(gridExtra); library(patchwork)
library(tigris); library(sf)
# library(geofacet)
library(urbnmapr)
library(leaflet); library(leaflet.extras)
library(tmap); library(tmaptools)
library(htmltools)
library(shiny); library(shinycssloaders)
# devtools::install_github("daattali/shinycssloaders", ref = "rmarkdown") # rmarkdown branch must be installed and cssloaders_in_header.html must exist
library(shinyWidgets); library(flexdashboard)
library(colourpicker); library(gghighlight)
library(knitr); library(kableExtra)
library(openxlsx); library(scales)
library(hrbrthemes); library(ggthemes)
library(extrafont); library(plotly)
library(mongolite); library(here)
options(scipen = 999999,
tigris_use_cache = TRUE,
shiny.reactlog = TRUE)
knitr::opts_chunk$set(fig.cap = TRUE)
### ----- Database connections -----
# Set this to host_prod or host_dev
host_name = "host_dev"
### ----- Functions import -----
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
# Load variable dictionary for relating tables, variable codes,
# and readable values
dict_vars <- fun_pull_mongo_data(tables = "dict_vars",
host_name = host_name)
### ----- National Data import and clean -----
# This script takes the national_* objects and transforms them
# into the final datasets for mapping
source(here("national_import.R"), local = TRUE)
# reactlog::reactlog_enable()
# Chunk 1: setup
### ----- Libraries -----
# Packages
library(reactlog)
library(tidyverse)
library(gridExtra); library(patchwork)
library(tigris); library(sf)
# library(geofacet)
library(urbnmapr)
library(leaflet); library(leaflet.extras)
library(tmap); library(tmaptools)
library(htmltools)
library(shiny); library(shinycssloaders)
# devtools::install_github("daattali/shinycssloaders", ref = "rmarkdown") # rmarkdown branch must be installed and cssloaders_in_header.html must exist
library(shinyWidgets); library(flexdashboard)
library(colourpicker); library(gghighlight)
library(knitr); library(kableExtra)
library(openxlsx); library(scales)
library(hrbrthemes); library(ggthemes)
library(extrafont); library(plotly)
library(mongolite); library(here)
options(scipen = 999999,
tigris_use_cache = TRUE,
shiny.reactlog = TRUE)
knitr::opts_chunk$set(fig.cap = TRUE)
### ----- Database connections -----
# Set this to host_prod or host_dev
host_name = "host_dev"
### ----- Functions import -----
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
# Load variable dictionary for relating tables, variable codes,
# and readable values
dict_vars <- fun_pull_mongo_data(tables = "dict_vars",
host_name = host_name)
### ----- National Data import and clean -----
# This script takes the national_* objects and transforms them
# into the final datasets for mapping
source(here("national_import.R"), local = TRUE)
# reactlog::reactlog_enable()
View(dict_vars)
tester <- tibble::deframe(
dict_vars %>%
filter(!!sym("is_demographics") == TRUE,
var_readable %in% (
national_data() %>%
select(-c(GEOID, NAME, ABBR)) %>%
names()
),
!is.na(national_dropdown_label)) %>%
select(national_dropdown_label, var_readable)
)
tester <- tibble::deframe(
dict_vars %>%
filter(!!sym("is_demographics") == TRUE,
var_readable %in% (
demographics %>%
select(-c(GEOID, NAME, ABBR)) %>%
names()
),
!is.na(national_dropdown_label)) %>%
select(national_dropdown_label, var_readable)
)
tester
names(tester)
tester[1]
tester[1]
tibble::deframe("Population", "pop_total")
tibble::deframe(c("Population", "pop_total"))
