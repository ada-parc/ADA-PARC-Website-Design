# # but we may want to pass the variable itself at some point
# selected_varname <- deparse(substitute(!!sym(selected))) %>% gsub("^[^\\$]*\\$", "", .)
# ### Parsing the regex
# # ^ anchor for beginning of string
# # [^\\$]* matches everything excluding "$" char
# # \\$ terminates match at "$" char
# # example: deparse(substitute(national_demographic_readable$GEOID)) %>% gsub("^[^\\$]*\\$", "", .)
# # outputs: "GEOID"
# Perform the important transformations to variables based on the type of number
if(grepl("pct", selected)) {
fill_text <- geom_text(aes(label = paste0(round(!!sym(selected), 1), '%')),
color = "white", size = 4)
breaks <- quantile(data %>% pull(!!sym(selected)))[2:5]
names(breaks) <- c(scales::percent(breaks / 100))
} else {
fill_text <- geom_text(aes(label = paste0(scales::comma(round(!!sym(selected), -5)))), # rounds to nearest 100k
color = "white", size = 4)
breaks <- quantile(data %>% pull(!!sym(selected)))[2:5]
names(breaks) <- c(scales::comma(breaks))
}
title <- dict_vars$national_dropdown_label[which(dict_vars$var_readable == selected)][1]
legend_title <- dict_vars$var_pretty[which(dict_vars$var_readable == selected)][1]
data %>%
ggplot(aes(x = 1, y = 1, # A tile map without x or y axis changes will fill out the tile for the state
fill = !!sym(selected))) + # Selected variable
geom_tile() + # Imports x and y values
fill_text +
labs(x = "", y = "",
title = title,
fill = legend_title) +
facet_geo(facets = ~ ABBR, grid = "us_state_with_DC_PR_grid2") +
theme(plot.background = element_rect(colour = "white"), # Removes all of the grid elements that we don't need
panel.grid = element_blank(),
panel.grid.major = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.line = element_blank(),
panel.spacing = unit(0L, "pt"),
legend.position = "bottom",
# legend.text = element_text(angle = 45, vjust = .5),
strip.text.x = element_text(size = 9L)) +
scale_fill_binned(high = "#132B43", low = "#56B1F7", breaks = breaks) # reverses the default gradient direction so that dark blue is associated with larger values
}
render_tile_map(demographics, "pwd_pct")
render_tile_map <- function(data, selected) {
# ### Unnecessary if selected is being passed as a string
# # but we may want to pass the variable itself at some point
# selected_varname <- deparse(substitute(!!sym(selected))) %>% gsub("^[^\\$]*\\$", "", .)
# ### Parsing the regex
# # ^ anchor for beginning of string
# # [^\\$]* matches everything excluding "$" char
# # \\$ terminates match at "$" char
# # example: deparse(substitute(national_demographic_readable$GEOID)) %>% gsub("^[^\\$]*\\$", "", .)
# # outputs: "GEOID"
# Perform the important transformations to variables based on the type of number
if(grepl("pct", selected)) {
fill_text <- geom_text(aes(label = paste0(round(!!sym(selected), 1), '%')),
color = "white", size = 4)
breaks <- quantile(data %>% pull(!!sym(selected)))[2:5]
names(breaks) <- c(scales::percent(breaks / 100))
} else {
fill_text <- geom_text(aes(label = paste0(scales::comma(round(!!sym(selected), -5)))), # rounds to nearest 100k
color = "white", size = 4)
breaks <- quantile(data %>% pull(!!sym(selected)))[2:5]
names(breaks) <- c(scales::comma(breaks))
}
title <- dict_vars$national_dropdown_label[which(dict_vars$var_readable == selected)][1]
legend_title <- dict_vars$var_pretty[which(dict_vars$var_readable == selected)][1]
data %>%
ggplot(aes(x = 1, y = 1, # A tile map without x or y axis changes will fill out the tile for the state
fill = !!sym(selected))) + # Selected variable
geom_tile() + # Imports x and y values
fill_text +
labs(x = "", y = "",
title = title,
fill = legend_title) +
facet_geo(facets = ~ ABBR, grid = "us_state_with_DC_PR_grid2") +
theme(plot.background = element_rect(colour = "white"), # Removes all of the grid elements that we don't need
panel.grid = element_blank(),
panel.grid.major = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.line = element_blank(),
panel.spacing = unit(0L, "pt"),
legend.position = "bottom",
legend.text = element_text(angle = 90, vjust = .5),
strip.text.x = element_text(size = 9L)) +
scale_fill_binned(high = "#132B43", low = "#56B1F7", breaks = breaks) # reverses the default gradient direction so that dark blue is associated with larger values
}
render_tile_map(demographics, "pwd_pct")
?scale_fill_binned
scale_fill_binned("YlOrBr")
library(tidyverse)
scale_fill_binned("YlOrBr")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidycensus)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidycensus)
library(here)
# pull functions and variable tables
source(here("Scripts", "funs.R"))
source(here("Scripts", "vars.R"))
scale_fill
?scale_fill_continuous
colorRampPalette("YlOrBr")
scales::colour_ramp("YlOrBr")
?scales::colour_ramp
?scale_fill_manual
?knitr::kable
# Packages
library(tidyverse); library(readxl); library(openxlsx); library(janitor)
library(sf); library(geofacet); library(htmltools)
library(colourpicker); library(gghighlight)
library(knitr); library(kableExtra)
library(leaflet);library(leaflet.extras)
library(scales); library(hrbrthemes); library(ggthemes)
library(extrafont);library(mongolite);library(here)
options(scipen = 999999)
# Set this to host_prod or host_dev
host_name = "host_dev"
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
# Load variable dictionary for relating tables, variable codes, and readable values
dict_vars <- fun_pull_mongo_data(tables = "dict_vars", host_name = host_name)
dict_location_crosswalk <- read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/master/dictionaries/dict_location_crosswalk.txt")
# Full data for cities in database
metro_snapshot_place_full <- fun_pull_mongo_data(c("S1810", "S1811"),
host_name,
"place")
# Place for selected metro
metro_snapshot_place <- metro_snapshot_place_full %>%
# Chicago, NYC, and Boston for static example
filter(GEOID %in% c("1714000")) #, "3651000", "2507000")) %>%
# Spatial, restrict tract call to selected city
temp_metro <- dict_location_crosswalk %>%
# Chicago, NYC, and Boston for static example
filter(place_GEOID %in% c("1714000")) %>%  #, "3651000", "2507000")) %>%
# filter(place_GEOID %in% c(params$GEOID)) %>%
pull(tract_GEOID)
# Connect and pull
temp_mongo_conn <- fun_mongo_connect(host_name,
collection_name = "geo_tract",
database_name = "ADA-PARC")
temp_geo <- temp_mongo_conn$iterate(
query = sprintf('{ "properties.GEOID" : { "$in" : [  "%s" ] } }' ,
str_c(temp_metro, collapse = '", "')))
metro_snapshot_tract_sf <- geojsonsf::geojson_sf(temp_geo$json(size = 100000))
# Tabular data for selected city
# Connect and pull
temp_mongo_conn <- fun_mongo_connect(host_name,
collection_name = "acs_tract_S1810",
database_name = "ADA-PARC")
metro_snapshot_tract <- temp_mongo_conn$find(
query = sprintf('{ "GEOID" : { "$in" : [  "%s" ] } }' ,
str_c(metro_snapshot_tract_sf$GEOID, collapse = '", "')))
# Overview text
metro_snap_overview_text <- paste0(
"<h4>", metro_snapshot_place %>% mutate(NAME = str_replace_all(NAME, pattern = " (city|village|municipality|town), ", replacement = ", ")) %>% pull(NAME), "</h4>", # "<br>",
"Based on ACS 2018 5-Year Estimates, <b>", metro_snapshot_place %>% pull(S1810_C02_001_estimate) %>% scales::comma(.), "</b> of the city's <b>", metro_snapshot_place %>% pull(S1810_C01_001_estimate) %>% scales::comma(.), "</b> residents (<b>", metro_snapshot_place %>% pull(S1810_C03_001_estimate), "%</b>) are people with disabilities.<br><h5>People with Disabilities - Summary Tables</h5>")
# Summary tables side by side
metro_snap_tables <- knitr::kables(list(
# Demographics
kbl(x = metro_snapshot_place %>%
mutate("Other" = S1810_C02_006_estimate + S1810_C02_008_estimate +
S1810_C02_009_estimate + S1810_C02_010_estimate) %>%
select("White" = S1810_C02_011_estimate,
"Black" = S1810_C02_005_estimate,
"Hispanic" = S1810_C02_012_estimate,
"Asian" = S1810_C02_007_estimate,
Other,
"Total" = S1810_C02_001_estimate) %>%
mutate(across(-Total,
~ paste0(comma(., accuracy = 1),
"<br>(",  percent(. / Total,
accuracy = 0.1), ")"))) %>%
mutate("Total" = paste0(comma(Total,
accuracy = 1),
"</b>")) %>%
rename("<b>Total" = Total) %>%
pivot_longer(everything(),
names_to = "Race/Ethnicity",
values_to = "PWD (%)"),
caption = "Race/Ethnicity",
escape = FALSE,
align = c("l", "r") #,
# table.attr = "style='width:80%;'"
) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"),
position = "left"),
# Community Participation
kbl(x = metro_snapshot_place %>%
transmute("Car" =
paste0(comma(S1811_C02_032_estimate *
(S1811_C02_033_estimate +
S1811_C02_034_estimate),
accuracy = 1),
"<br>(", comma((S1811_C02_033_estimate +
S1811_C02_034_estimate),
accuracy = 0.1), "%)"),
"Transit" =
paste0(comma(S1811_C02_032_estimate *
(S1811_C02_035_estimate),
accuracy = 1),
"<br>(", comma(S1811_C02_035_estimate,
accuracy = 0.1), "%)"),
"Walk or<br>Bike" =
paste0(comma(S1811_C02_032_estimate *
(S1811_C02_036_estimate +
S1811_C02_037_estimate),
accuracy = 1),
"<br>(", comma((S1811_C02_036_estimate +
S1811_C02_037_estimate),
accuracy = 0.1), "%)"),
"Work from<br>Home" =
paste0(comma(S1811_C02_032_estimate *
(S1811_C02_038_estimate),
accuracy = 1),
"<br>(", comma((S1811_C02_038_estimate),
accuracy = 0.1), "%)"),
"<b>Total" =
paste0(comma(S1811_C02_032_estimate,
accuracy = 1),
"</b>")) %>%
pivot_longer(everything(),
names_to = "Commute",
values_to = "PWD (%)"),
caption = "Commute, Workers 16+",
escape = FALSE,
align = c("l", "r") #,
# table.attr = "style='width:100%;'"
) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"),
position = "left"),
# Work/Economic
kbl(x = metro_snapshot_place %>%
transmute("Employed" =
paste0(comma(S1811_C02_004_estimate, accuracy = 1),
"<br>(", S1811_C02_002_estimate, "%)"),
"Not in<br>Labor Force" =
paste0(comma((S1811_C02_001_estimate - S1811_C02_004_estimate), accuracy = 1),
"<br>(", S1811_C02_003_estimate, "%)"),
"<b>Total" =
paste0(comma(S1811_C02_001_estimate, accuracy = 1),
"</b>")) %>%
pivot_longer(everything(),
names_to = "Employment",
values_to = "PWD (%)"),
caption = "Employment, 16+",
escape = FALSE,
align = c("l", "r") #,
# table.attr = "style='width:100%;'"
) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"),
position = "left")
)) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"),
position = "left")
# UI Output
HTML(paste(metro_snap_overview_text, metro_snap_tables, sep = "<br>"))
# Palette
pal_metro_snapshot <- colorQuantile(palette = "YlOrBr",
domain = pull(metro_snapshot_tract,
S1810_C02_001_estimate),
n = 4)
left_join(metro_snapshot_tract_sf,
metro_snapshot_tract %>% select(GEOID, S1810_C02_001_estimate),
by = "GEOID") %>%
leaflet() %>%
clearShapes() %>%
addProviderTiles(providers$Esri, group = "Esri") %>%
addPolygons(stroke = TRUE, color = "#444444", weight = 1, smoothFactor = 0,
fillColor = ~pal_metro_snapshot(S1810_C02_001_estimate),
fillOpacity = 0.5,
layerId = ~GEOID) %>%
addLegend(position = "topright", pal = pal_metro_snapshot,
values = ~S1810_C02_001_estimate,
labFormat =  function(type, cuts, p) {
n = length(cuts)
paste0(as.numeric(cuts)[-n], " &ndash; ", as.numeric(cuts)[-1])
},
title = "PWD")
metro_snapshot_place <- metro_snapshot_place_full %>%
# Chicago, NYC, and Boston for static example
filter(GEOID %in% c("1714000"))
# Spatial, restrict tract call to selected city
temp_metro <- dict_location_crosswalk %>%
# Chicago, NYC, and Boston for static example
filter(place_GEOID %in% c("1714000")) %>%  #, "3651000", "2507000")) %>%
# filter(place_GEOID %in% c(params$GEOID)) %>%
pull(tract_GEOID)
# Connect and pull
temp_mongo_conn <- fun_mongo_connect(host_name,
collection_name = "geo_tract",
database_name = "ADA-PARC")
temp_geo <- temp_mongo_conn$iterate(
query = sprintf('{ "properties.GEOID" : { "$in" : [  "%s" ] } }' ,
str_c(temp_metro, collapse = '", "')))
metro_snapshot_tract_sf <- geojsonsf::geojson_sf(temp_geo$json(size = 100000))
# Tabular data for selected city
# Connect and pull
temp_mongo_conn <- fun_mongo_connect(host_name,
collection_name = "acs_tract_S1810",
database_name = "ADA-PARC")
metro_snapshot_tract <- temp_mongo_conn$find(
query = sprintf('{ "GEOID" : { "$in" : [  "%s" ] } }' ,
str_c(metro_snapshot_tract_sf$GEOID, collapse = '", "')))
library(patchwork)
library(patchwork)
context_demo_plot <- metro_snapshot_place_full %>%
mutate("NAME" = str_replace_all(
NAME,
pattern = " (city|village|municipality|town), ",
replacement = ", ")) %>%
select(GEOID,
NAME,
"pwd" = S1810_C02_001_estimate,
"total_population" = S1810_C01_001_estimate,
"pwd_pct" = S1810_C03_001_estimate) %>%
ggplot(aes(text = paste0("City: ", NAME,
"<br>PWD: ", scales::comma(pwd,
accuracy = 1),
" (", pwd_pct, "%)",
"<br>Total Pop.: ",
scales::comma(total_population,
accuracy = 1)))) +
geom_point(stat = "identity",
alpha = 0.8, position = "jitter",
aes(x = total_population, y = pwd_pct)) +
# Static check - Chicago, NYC, and Boston
gghighlight(GEOID %in% c("1714000")) + #, "3651000", "2507000")) +
# gghighlight(GEOID == params$GEOID) +
labs(x = "Total Population",
y = "PWD (%)",
title = "People with Disabilities (%) vs. Total Population") +
scale_x_log10(labels = scales::comma) +
scale_y_continuous(labels = function(x) paste0(x, "%")) +
ggplot_fill_selected() +
ggplot_theme_selected() +
theme(legend.position = "top")
# ===============
# Community Participation
# ===============
# Plot
context_cp_plot <- metro_snapshot_place_full %>%
mutate("NAME" = str_replace_all(
NAME,
pattern = " (city|village|municipality|town), ",
replacement = ", ")) %>%
select(GEOID,
NAME,
"pwd_25_over" = S1811_C02_039_estimate,
"pwd_bachelors" = S1811_C02_043_estimate) %>%
ggplot(aes(text = paste0("City: ", NAME,
"<br>PWD Bachelor's or Higher: ", pwd_bachelors, "%",
"<br>PWD 25+: ", scales::comma(pwd_25_over,
accuracy = 1)))) +
geom_point(stat = "identity",
alpha = 0.8, position = "jitter",
aes(x = pwd_25_over, y = pwd_bachelors)) +
# Static check - Chicago, NYC, and Boston
gghighlight(GEOID %in% c("1714000")) + #, "3651000", "2507000")) +
# gghighlight(GEOID == params$GEOID) +
labs(x = "PWD, 25 or Older",
y = "Bachelor's Degree or Higher (%)",
title = "Bachelor's Degree or Higher (%) vs. PWD Population 25 or Older") +
scale_x_log10(labels = scales::comma) +
scale_y_continuous(labels = function(x) paste0(x, "%")) +
ggplot_fill_selected() +
ggplot_theme_selected() +
theme(legend.position = "top")
# ===============
# Work/Economic
# ===============
# Plot
context_we_plot <-metro_snapshot_place_full %>%
mutate("NAME" = str_replace_all(
NAME,
pattern = " (city|village|municipality|town), ",
replacement = ", ")) %>%
select(GEOID,
NAME,
"pwd_employed" = S1811_C02_004_estimate,
"pwd" = S1811_C02_001_estimate,
"pwd_employed_pct" = S1811_C02_002_estimate) %>%
ggplot(aes(text = paste0("City: ", NAME,
"<br>PWD Employed: ",
scales::comma(pwd_employed,
accuracy = 1),
" (", pwd_employed_pct, "%)",
"<br>PWD ", scales::comma(pwd,
accuracy = 1)))) +
geom_point(stat = "identity",
alpha = 0.8, position = "jitter",
aes(x = pwd, y = pwd_employed_pct)) +
# Static check - Chicago, NYC, and Boston
gghighlight(GEOID %in% c("1714000")) + #, "3651000", "2507000")) +
# gghighlight(GEOID == params$GEOID) +
labs(x = "People with Disabilities",
y = "PWD Employment Rate (%)",
title = "PWD Employment Rate (%) vs. PWD Population") +
scale_x_log10(labels = scales::comma) +
scale_y_continuous(labels = function(x) paste0(x, "%")) +
ggplot_fill_selected() +
ggplot_theme_selected() +
theme(legend.position = "top")
# Set of 3 charts
context_demo_plot + context_cp_plot + context_we_plot
# Plot
context_demo_plot <- metro_snapshot_place_full %>%
mutate("NAME" = str_replace_all(
NAME,
pattern = " (city|village|municipality|town), ",
replacement = ", ")) %>%
select(GEOID,
NAME,
"pwd" = S1810_C02_001_estimate,
"total_population" = S1810_C01_001_estimate,
"pwd_pct" = S1810_C03_001_estimate) %>%
ggplot(aes(text = paste0("City: ", NAME,
"<br>PWD: ", scales::comma(pwd,
accuracy = 1),
" (", pwd_pct, "%)",
"<br>Total Pop.: ",
scales::comma(total_population,
accuracy = 1)))) +
geom_point(stat = "identity",
alpha = 0.8, position = "jitter",
aes(x = total_population, y = pwd_pct)) +
# Static check - Chicago, NYC, and Boston
gghighlight(GEOID %in% c("1714000")) + #, "3651000", "2507000")) +
# gghighlight(GEOID == params$GEOID) +
labs(x = "Total Population",
y = "PWD (%)",
title = "People with Disabilities (%) vs. Total Population") +
scale_x_log10(labels = scales::comma) +
scale_y_continuous(labels = function(x) paste0(x, "%")) +
scale_fill_colorblind() +
theme_ipsum() +
theme(legend.position = "top")
# ===============
# Community Participation
# ===============
# Plot
context_cp_plot <- metro_snapshot_place_full %>%
mutate("NAME" = str_replace_all(
NAME,
pattern = " (city|village|municipality|town), ",
replacement = ", ")) %>%
select(GEOID,
NAME,
"pwd_25_over" = S1811_C02_039_estimate,
"pwd_bachelors" = S1811_C02_043_estimate) %>%
ggplot(aes(text = paste0("City: ", NAME,
"<br>PWD Bachelor's or Higher: ", pwd_bachelors, "%",
"<br>PWD 25+: ", scales::comma(pwd_25_over,
accuracy = 1)))) +
geom_point(stat = "identity",
alpha = 0.8, position = "jitter",
aes(x = pwd_25_over, y = pwd_bachelors)) +
# Static check - Chicago, NYC, and Boston
gghighlight(GEOID %in% c("1714000")) + #, "3651000", "2507000")) +
# gghighlight(GEOID == params$GEOID) +
labs(x = "PWD, 25 or Older",
y = "Bachelor's Degree or Higher (%)",
title = "Bachelor's Degree or Higher (%) vs. PWD Population 25 or Older") +
scale_x_log10(labels = scales::comma) +
scale_y_continuous(labels = function(x) paste0(x, "%")) +
scale_fill_colorblind() +
theme_ipsum() +
theme(legend.position = "top")
# ===============
# Work/Economic
# ===============
# Plot
context_we_plot <-metro_snapshot_place_full %>%
mutate("NAME" = str_replace_all(
NAME,
pattern = " (city|village|municipality|town), ",
replacement = ", ")) %>%
select(GEOID,
NAME,
"pwd_employed" = S1811_C02_004_estimate,
"pwd" = S1811_C02_001_estimate,
"pwd_employed_pct" = S1811_C02_002_estimate) %>%
ggplot(aes(text = paste0("City: ", NAME,
"<br>PWD Employed: ",
scales::comma(pwd_employed,
accuracy = 1),
" (", pwd_employed_pct, "%)",
"<br>PWD ", scales::comma(pwd,
accuracy = 1)))) +
geom_point(stat = "identity",
alpha = 0.8, position = "jitter",
aes(x = pwd, y = pwd_employed_pct)) +
# Static check - Chicago, NYC, and Boston
gghighlight(GEOID %in% c("1714000")) + #, "3651000", "2507000")) +
# gghighlight(GEOID == params$GEOID) +
labs(x = "People with Disabilities",
y = "PWD Employment Rate (%)",
title = "PWD Employment Rate (%) vs. PWD Population") +
scale_x_log10(labels = scales::comma) +
scale_y_continuous(labels = function(x) paste0(x, "%")) +
scale_fill_colorblind() +
theme_ipsum() +
theme(legend.position = "top")
# Set of 3 charts
context_demo_plot + context_cp_plot + context_we_plot
context_demo_plot / context_cp_plot / context_we_plot
(context_demo_plot / context_cp_plot / context_we_plot) +
plot_annotation(tag_levels = "I")
