by = "variable")
View(test)
View(dict_vars)
test <- temp_values %>%
left_join(.,
temp_pct %>%
select(GEOID, NAME, variable, "pct" = estimate),
by = c("GEOID", "NAME", "variable")) %>%
left_join(.,
dict_vars %>%
select("variable" = var_database,
"label" = var_pretty),
by = "variable") %>%
# mutate(label = str_remove_all(label, "Estimate; With a disability; Subject; ")) %>%
# mutate(label = case_when(variable == "S1810_C02_001" ~
#                            "Overall; People with Disabilities",
#                          TRUE ~ label)) %>%
separate(label, into = c("category", "label"),
sep = ", ", extra = "merge")
View(test)
metro_snapshot_place_full
metro_snapshot_place_full %>%
select(GEOID,
NAME,
"pwd" = S1810_C02_001_estimate,
"total_population" = S1810_C01_001_estimate,
"pwd_pct" = S1810_C03_001_estimate) %>%
ggplot(aes(text = paste0("City: ", NAME,
"<br>PWD: ", scales::comma(pwd),
" (", pwd_pct, "%)",
"<br>Total Pop.",
scales::comma(total_population)))) +
geom_point(stat = "identity",
aes(x = total_population, y = pwd_pct))
# ====================
# Setup
# ====================
# Packages
library(tidyverse); library(readxl); library(openxlsx); library(summarytools); library(janitor)
library(sf); library(geofacet); library(leaflet); library(leaflet.extras);
library(htmltools); library(shiny); library(shinyWidgets); library(flexdashboard)
library(colourpicker); library(DT); library(gghighlight)
library(knitr); library(kableExtra)
library(scales); library(hrbrthemes); library(ggthemes)
library(extrafont); library(plotly)
library(mongolite)
library(here)
# Set this to host_prod or host_dev
host_name = "host_dev"
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
# Load variable dictionary for relating tables, variable codes, and readable values
dict_vars <- fun_pull_mongo_data(tables = "dict_vars", host_name = host_name)
### ------------------------
### National data import and clean
###
# This script takes the national_* objects and transforms them
# into the final datasets for mapping
source(here("national_import.R"), local = TRUE)
# ====================
# Setup
# ====================
# Packages
library(tidyverse); library(readxl); library(openxlsx); library(summarytools); library(janitor)
library(sf); library(geofacet); library(leaflet); library(leaflet.extras);
library(htmltools); library(shiny); library(shinyWidgets); library(flexdashboard)
library(colourpicker); library(DT); library(gghighlight)
library(knitr); library(kableExtra)
library(scales); library(hrbrthemes); library(ggthemes)
library(extrafont); library(plotly)
library(mongolite)
library(here)
# Set this to host_prod or host_dev
host_name = "host_dev"
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
# Load variable dictionary for relating tables, variable codes, and readable values
dict_vars <- fun_pull_mongo_data(tables = "dict_vars", host_name = host_name)
### ------------------------
### National data import and clean
###
# This script takes the national_* objects and transforms them
# into the final datasets for mapping
source(here("national_import.R"), local = TRUE)
eval(sym("demographics"))
# Static check
tibble::deframe(
dict_vars %>%
filter(var_desc == "demographics",
var_readable %in% (
demographics %>%
select(-c(GEOID, NAME, ABBR)) %>%
names()
),
!is.na(var_pretty)) %>%
select(var_pretty, var_readable))
# Static check
tibble::deframe(
dict_vars %>%
filter(var_desc == "demographics",
var_readable %in% (
demographics %>%
select(-c(GEOID, NAME, ABBR)) %>%
names()
),
!is.na(var_pretty)) %>%
select(national_dropdown_label, var_readable))
# Static check
tibble::deframe(
dict_vars %>%
filter(var_desc == "demographics",
var_readable %in% (
demographics %>%
select(-c(GEOID, NAME, ABBR)) %>%
names()
),
!is.na(var_pretty)) %>%
select(national_dropdown_label, var_readable)) %>%
drop_na()
# Static check
tibble::deframe(
dict_vars %>%
filter(var_desc == "demographics",
var_readable %in% (
demographics %>%
select(-c(GEOID, NAME, ABBR)) %>%
names()
),
!is.na(national_dropdown_label)) %>%
select(national_dropdown_label, var_readable))
# Static check
tibble::deframe(
dict_vars %>%
filter(var_desc == "work_economic",
var_readable %in% (
work_economic %>%
select(-c(GEOID, NAME, ABBR)) %>%
names()
),
!is.na(national_dropdown_label)) %>%
select(national_dropdown_label, var_readable))
# Load variable dictionary for relating tables, variable codes, and readable values
dict_vars <- read_csv(here::here("dictionaries", "dict_vars.csv"))
# Static check
tibble::deframe(
dict_vars %>%
filter(var_desc == "work_economic",
var_readable %in% (
work_economic %>%
select(-c(GEOID, NAME, ABBR)) %>%
names()
),
!is.na(national_dropdown_label)) %>%
select(national_dropdown_label, var_readable))
mongo_conn <- fun_mongo_connect(host_name = "host_dev",
collection_name = "dict_vars",
database_name = "ADA-PARC")
mongo_conn$drop()
mongo_conn$insert(dict_vars)
mongo_conn <- fun_mongo_connect(host_name = "host_prod",
collection_name = "dict_vars",
database_name = "ADA-PARC")
mongo_conn$drop()
mongo_conn$insert(dict_vars)
# ====================
# Setup
# ====================
# Packages
library(tidyverse); library(readxl); library(openxlsx); library(summarytools); library(janitor)
library(sf); library(geofacet); library(leaflet); library(leaflet.extras);
library(htmltools); library(shiny); library(shinyWidgets); library(flexdashboard)
library(colourpicker); library(DT); library(gghighlight)
library(knitr); library(kableExtra)
library(scales); library(hrbrthemes); library(ggthemes)
library(extrafont); library(plotly)
library(mongolite)
library(here)
# Set this to host_prod or host_dev
host_name = "host_dev"
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
# Load variable dictionary for relating tables, variable codes, and readable values
dict_vars <- fun_pull_mongo_data(tables = "dict_vars", host_name = host_name)
### ------------------------
### National data import and clean
###
# This script takes the national_* objects and transforms them
# into the final datasets for mapping
source(here("national_import.R"), local = TRUE)
# ====================
# Setup
# ====================
# Packages
library(tidyverse); library(readxl); library(openxlsx); library(summarytools); library(janitor)
library(sf); library(geofacet); library(leaflet); library(leaflet.extras);
library(htmltools); library(shiny); library(shinyWidgets); library(flexdashboard)
library(colourpicker); library(DT); library(gghighlight)
library(knitr); library(kableExtra)
library(scales); library(hrbrthemes); library(ggthemes)
library(extrafont); library(plotly)
library(mongolite)
library(here)
# Set this to host_prod or host_dev
host_name = "host_dev"
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
# Load variable dictionary for relating tables, variable codes, and readable values
dict_vars <- fun_pull_mongo_data(tables = "dict_vars", host_name = host_name)
# Packages
library(tidyverse); library(readxl); library(openxlsx); library(summarytools); library(janitor)
library(sf); library(geofacet); library(leaflet); library(leaflet.extras);
library(htmltools); library(shiny); library(shinyWidgets); library(flexdashboard)
library(colourpicker); library(DT); library(gghighlight)
library(knitr); library(kableExtra)
library(scales); library(hrbrthemes); library(ggthemes)
library(extrafont); library(plotly)
library(mongolite)
library(here)
# Set this to host_prod or host_dev
host_name = "host_dev"
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
# Load variable dictionary for relating tables, variable codes, and readable values
dict_vars <- fun_pull_mongo_data(tables = "dict_vars", host_name = host_name)
### ------------------------
### National data import and clean
###
# This script takes the national_* objects and transforms them
# into the final datasets for mapping
source(here("national_import.R"), local = TRUE)
# Libraries
library(tidyverse);library(mongolite);library(here)
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
# Export dev server -------------------------------------------------------
# Connect to server
mongo_conn <- fun_mongo_connect(host_name = "host_dev",
database_name = "ADA-PARC")
# Libraries
library(config);library(mongolite);library(here)
# Folder to store data dump before pushing to Prod
# MongoDB database tools
# link to download MongoDB Database Tools
# https://www.mongodb.com/try/download/database-tools
# Should be a part of your config file
mongodb_tools <- config::get("mongodb_tools")
library(config);library(mongolite);library(here)
# Parameters --------------------------------------------------------------
# Folder to store data dump before pushing to Prod
# MongoDB database tools
# link to download MongoDB Database Tools
# https://www.mongodb.com/try/download/database-tools
# Should be a part of your config file
mongodb_tools <- config::get("mongodb_tools")
mongodb_tools <- config::get("mongodb_tools")
library(config);library(mongolite);library(here)
# Parameters --------------------------------------------------------------
# Folder to store data dump before pushing to Prod
# MongoDB database tools
# link to download MongoDB Database Tools
# https://www.mongodb.com/try/download/database-tools
# Should be a part of your config file
mongodb_tools <- config::get("mongodb_tools")
library(config);library(mongolite);library(here)
# Parameters --------------------------------------------------------------
# Folder to store data dump before pushing to Prod
# MongoDB database tools
# link to download MongoDB Database Tools
# https://www.mongodb.com/try/download/database-tools
# Should be a part of your config file
mongodb_tools <- config::get("mongodb_tools")
library(config);library(mongolite);library(here)
# Parameters --------------------------------------------------------------
# Folder to store data dump before pushing to Prod
# MongoDB database tools
# link to download MongoDB Database Tools
# https://www.mongodb.com/try/download/database-tools
# Should be a part of your config file
mongodb_tools <- config::get("mongodb_tools")
library(config);library(mongolite);library(here)
# Parameters --------------------------------------------------------------
# Folder to store data dump before pushing to Prod
# MongoDB database tools
# link to download MongoDB Database Tools
# https://www.mongodb.com/try/download/database-tools
# Should be a part of your config file
mongodb_tools <- config::get("mongodb_tools")
library(config);library(mongolite);library(here)
# Parameters --------------------------------------------------------------
# Folder to store data dump before pushing to Prod
# MongoDB database tools
# link to download MongoDB Database Tools
# https://www.mongodb.com/try/download/database-tools
# Should be a part of your config file
mongodb_tools <- config::get("mongodb_tools")
library(config);library(mongolite);library(here)
# Parameters --------------------------------------------------------------
# Folder to store data dump before pushing to Prod
# MongoDB database tools
# link to download MongoDB Database Tools
# https://www.mongodb.com/try/download/database-tools
# Should be a part of your config file
mongodb_tools <- config::get("mongodb_tools")
library(config);library(mongolite);library(here)
# Parameters --------------------------------------------------------------
# Folder to store data dump before pushing to Prod
# MongoDB database tools
# link to download MongoDB Database Tools
# https://www.mongodb.com/try/download/database-tools
# Should be a part of your config file
mongodb_tools <- config::get("mongodb_tools")
# Dev server connection
url_dev <- sprintf("mongodb+srv://%s:%s@%s/%s",
config::get("user"),
config::get("password"),
config::get("host-dev"),
"ADA-PARC")
# Prod server connection
url_prod <- sprintf("mongodb+srv://%s:%s@%s/%s",
config::get("user"),
config::get("password"),
config::get("host-prod"),
"ADA-PARC")
# Libraries
library(config);library(mongolite);library(here)
# Parameters --------------------------------------------------------------
# Folder to store data dump before pushing to Prod
# MongoDB database tools
# link to download MongoDB Database Tools
# https://www.mongodb.com/try/download/database-tools
# Should be a part of your config file
mongodb_tools <- config::get("mongodb_tools")
# Dev server connection
url_dev <- sprintf("mongodb+srv://%s:%s@%s/%s",
config::get("user"),
config::get("password"),
config::get("host-dev"),
"ADA-PARC")
# Prod server connection
url_prod <- sprintf("mongodb+srv://%s:%s@%s/%s",
config::get("user"),
config::get("password"),
config::get("host-prod"),
"ADA-PARC")
config::get("user")
sprintf("mongodb+srv://%s:%s@%s/%s",
config::get("user"),
config::get("password"),
config::get("host-dev"),
"ADA-PARC")
config::get("host-dev")
# Dev server connection
url_dev <- sprintf("mongodb+srv://%s:%s@%s/%s",
config::get("user"),
config::get("password"),
config::get("host_dev"),
"ADA-PARC")
# Prod server connection
url_prod <- sprintf("mongodb+srv://%s:%s@%s/%s",
config::get("user"),
config::get("password"),
config::get("host_prod"),
"ADA-PARC")
# Libraries
library(config);library(mongolite);library(here)
# Parameters --------------------------------------------------------------
# Folder to store Dev data dump before using restore to Prod
param_dir <- "C:/Users/sconn/Downloads"
# MongoDB database tools
# link to download MongoDB Database Tools
# https://www.mongodb.com/try/download/database-tools
# Should be a part of your config file
mongodb_tools <- config::get("mongodb_tools")
# Dev server connection
url_dev <- sprintf("mongodb+srv://%s:%s@%s/%s",
config::get("user"),
config::get("password"),
config::get("host_dev"),
"ADA-PARC")
# Prod server connection
url_prod <- sprintf("mongodb+srv://%s:%s@%s/%s",
config::get("user"),
config::get("password"),
config::get("host_prod"),
"ADA-PARC")
# Build string for shell
exe_mongodump <- sprintf('"%s\\mongodump.exe" --uri "%s" --out "%s"',
mongodb_tools,
url_dev,
param_dir)
exe_mongodump
# Setup -------------------------------------------------------------------
# Libraries
library(config);library(mongolite);library(here)
# Parameters --------------------------------------------------------------
# Folder to store Dev data dump before using restore to Prod
param_dir <- "C:/Users/sconn/Downloads"
# MongoDB database tools
# link to download MongoDB Database Tools
# https://www.mongodb.com/try/download/database-tools
# Should be a part of your config file
mongodb_tools <- config::get("mongodb_tools")
# Dev server connection
url_dev <- sprintf("mongodb+srv://%s:%s@%s/%s",
config::get("user"),
config::get("password"),
config::get("host_dev"),
"ADA-PARC")
# Prod server connection
url_prod <- sprintf("mongodb+srv://%s:%s@%s/%s",
config::get("user"),
config::get("password"),
config::get("host_prod"),
"ADA-PARC")
# Get binary dump from Dev server -----------------------------------------
# Build string for shell
exe_mongodump <- sprintf('"%s\\mongodump.exe" --uri "%s" --out "%s"',
mongodb_tools,
url_dev,
param_dir)
exe_mongodump
# Setup -------------------------------------------------------------------
# Libraries
library(config);library(mongolite);library(here)
# Parameters --------------------------------------------------------------
# Folder to store Dev data dump before using restore to Prod
param_dir <- "C:/Users/sconn/Downloads/test"
# MongoDB database tools
# link to download MongoDB Database Tools
# https://www.mongodb.com/try/download/database-tools
# Should be a part of your config file
mongodb_tools <- config::get("mongodb_tools")
# Dev server connection
url_dev <- sprintf("mongodb+srv://%s:%s@%s/%s",
config::get("user"),
config::get("password"),
config::get("host_dev"),
"ADA-PARC")
# Prod server connection
url_prod <- sprintf("mongodb+srv://%s:%s@%s/%s",
config::get("user"),
config::get("password"),
config::get("host_prod"),
"ADA-PARC")
# Get binary dump from Dev server -----------------------------------------
# Build string for shell
exe_mongodump <- sprintf('"%s\\mongodump.exe" --uri "%s" --out "%s"',
mongodb_tools,
url_dev,
param_dir)
exe_mongodump
# Execute mongodump command
shell(exe_mongodump)
# Build string for shell
exe_mongodump <- sprintf("'%s\\mongodump.exe' --uri '%s' --out '%s'",
mongodb_tools,
url_dev,
param_dir)
shell(exe_mongodump)
# Build string for shell
exe_mongodump <- sprintf('"%s\\mongodump.exe" --uri "%s" --out "%s"',
mongodb_tools,
url_dev,
param_dir)
exe_mongodump
# Execute mongodump command
shell(exe_mongodump)
# Setup -------------------------------------------------------------------
# Libraries
library(config);library(mongolite);library(here)
# Parameters --------------------------------------------------------------
# Folder to store Dev data dump before using restore to Prod
param_dir <- "C:/Users/sconn/Downloads/test"
# MongoDB database tools
# link to download MongoDB Database Tools
# https://www.mongodb.com/try/download/database-tools
# Should be a part of your config file
mongodb_tools <- config::get("mongodb_tools")
# Dev server connection
url_dev <- sprintf("mongodb+srv://%s:%s@%s/%s",
config::get("user"),
config::get("password"),
config::get("host_dev"),
"ADA-PARC")
# Prod server connection
url_prod <- sprintf("mongodb+srv://%s:%s@%s/%s",
config::get("user"),
config::get("password"),
config::get("host_prod"),
"ADA-PARC")
# Get binary dump from Dev server -----------------------------------------
# Build string for shell
exe_mongodump <- sprintf('"%s\\mongodump.exe" --uri "%s" --out "%s"',
mongodb_tools,
url_dev,
param_dir)
exe_mongodump
# Execute mongodump command
shell(exe_mongodump)
# Build string for shell
exe_mongodump <- sprintf('%s\\mongodump.exe --uri "%s" --out "%s"',
mongodb_tools,
url_dev,
param_dir)
# Execute mongodump command
shell(exe_mongodump)
exec_mongorestore <- sprintf('%s\\mongorestore.exe --uri "%s" --dir "%s/ADA-PARC" --drop',
mongodb_tools,
url_prod,
param_dir)
# Execute mongorestore command
shell(exec_mongorestore)
