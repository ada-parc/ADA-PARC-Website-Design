panel.grid.major = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.line = element_blank(),
panel.spacing = unit(0L, "pt"),
legend.position = "none",
strip.text.x = element_text(size = 9L))
# Tile mapping using geofacet
demo_gen_data %>%
ggplot(aes(x = 1, y = 1, # A tile map without x or y axis changes will fill out the tile for the state
fill = percent_of_total_population_with_a_disability)) + # Selected variable
scale_fill_gradient(low = "#fee8c8", high = "#e34a33") +
geom_tile() + # Imports x and y values
geom_text(aes(label = paste0(as.character(percent_of_total_population_with_a_disability), "%")),
color = "white") + # Adds percentage to the center of the tile
facet_geo(facets = ~ state_abbv, grid = "us_state_with_DC_PR_grid2") +
theme(plot.background = element_rect(colour = "white"), # Removes all of the grid elements that we don't need
panel.grid = element_blank(),
panel.grid.major = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.line = element_blank(),
panel.spacing = unit(0L, "pt"),
legend.position = "none",
strip.text.x = element_text(size = 9L))
# Tile mapping using geofacet
demo_gen_data %>%
ggplot(aes(x = 1, y = 1, # A tile map without x or y axis changes will fill out the tile for the state
fill = percent_of_total_population_with_a_disability)) + # Selected variable
scale_fill_gradient(low = "#fdbb84", high = "#e34a33") +
geom_tile() + # Imports x and y values
geom_text(aes(label = paste0(as.character(percent_of_total_population_with_a_disability), "%")),
color = "white") + # Adds percentage to the center of the tile
facet_geo(facets = ~ state_abbv, grid = "us_state_with_DC_PR_grid2") +
theme(plot.background = element_rect(colour = "white"), # Removes all of the grid elements that we don't need
panel.grid = element_blank(),
panel.grid.major = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.line = element_blank(),
panel.spacing = unit(0L, "pt"),
legend.position = "none",
strip.text.x = element_text(size = 9L))
# Tile mapping using geofacet
demo_gen_data %>%
ggplot(aes(x = 1, y = 1, # A tile map without x or y axis changes will fill out the tile for the state
fill = percent_of_total_population_with_a_disability)) + # Selected variable
scale_fill_viridis_c() +
geom_tile() + # Imports x and y values
geom_text(aes(label = paste0(as.character(percent_of_total_population_with_a_disability), "%")),
color = "white") + # Adds percentage to the center of the tile
facet_geo(facets = ~ state_abbv, grid = "us_state_with_DC_PR_grid2") +
theme(plot.background = element_rect(colour = "white"), # Removes all of the grid elements that we don't need
panel.grid = element_blank(),
panel.grid.major = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.line = element_blank(),
panel.spacing = unit(0L, "pt"),
legend.position = "none",
strip.text.x = element_text(size = 9L))
# Tile mapping using geofacet
demo_gen_data %>%
ggplot(aes(x = 1, y = 1, # A tile map without x or y axis changes will fill out the tile for the state
fill = percent_of_total_population_with_a_disability)) + # Selected variable
geom_tile() + # Imports x and y values
geom_text(aes(label = paste0(as.character(percent_of_total_population_with_a_disability), "%")),
color = "white") + # Adds percentage to the center of the tile
facet_geo(facets = ~ state_abbv, grid = "us_state_with_DC_PR_grid2") +
theme(plot.background = element_rect(colour = "white"), # Removes all of the grid elements that we don't need
panel.grid = element_blank(),
panel.grid.major = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.line = element_blank(),
panel.spacing = unit(0L, "pt"),
legend.position = "none",
strip.text.x = element_text(size = 9L))
# Tile mapping using geofacet
demo_gen_data %>%
ggplot(aes(x = 1, y = 1, # A tile map without x or y axis changes will fill out the tile for the state
fill = -percent_of_total_population_with_a_disability)) + # Selected variable
geom_tile() + # Imports x and y values
geom_text(aes(label = paste0(as.character(percent_of_total_population_with_a_disability), "%")),
color = "white") + # Adds percentage to the center of the tile
facet_geo(facets = ~ state_abbv, grid = "us_state_with_DC_PR_grid2") +
theme(plot.background = element_rect(colour = "white"), # Removes all of the grid elements that we don't need
panel.grid = element_blank(),
panel.grid.major = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.line = element_blank(),
panel.spacing = unit(0L, "pt"),
legend.position = "none",
strip.text.x = element_text(size = 9L))
# Tile mapping using geofacet
demo_gen_data %>%
ggplot(aes(x = 1, y = 1, # A tile map without x or y axis changes will fill out the tile for the state
fill = -percent_of_total_population_with_a_disability)) + # Selected variable
geom_tile() + # Imports x and y values
labs(x = "", y = "") +
geom_text(aes(label = paste0(as.character(percent_of_total_population_with_a_disability), "%")),
color = "white") + # Adds percentage to the center of the tile
facet_geo(facets = ~ state_abbv, grid = "us_state_with_DC_PR_grid2") +
theme(plot.background = element_rect(colour = "white"), # Removes all of the grid elements that we don't need
panel.grid = element_blank(),
panel.grid.major = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.line = element_blank(),
panel.spacing = unit(0L, "pt"),
legend.position = "none",
strip.text.x = element_text(size = 9L))
install.packages(c("backports", "brio", "fastmap", "htmltools", "knitr", "rappdirs", "Rcpp", "reprex", "rgdal", "sass", "stars", "tinytex", "tmaptools", "withr"))
# Libraries
library(tidyverse);library(readxl)
library(tigris);library(sf);library(janitor)
library(tidycensus);library(viridis);library(tmap)
library(RPostgres);library(RPostgreSQL);library(DBI)
library(geojsonsf);library(mongolite)
library(shiny); library(shinyWidgets)
# Set working document, options
setwd(here::here())
options(scipen = 999, dplyr.summarise.inform = FALSE, tigris_use_cache = TRUE)
knitr::opts_chunk$set(echo = FALSE)
# Load API keys and database connection information
source("secret.R", local = TRUE)
census_api_key(api_key_census)
census_api_key(api_key_census, install = TRUE)
most_populated <- get_estimates(geography = "place",
year = 2019,
product = "population",
geometry = FALSE,
output = "wide") %>%
arrange(desc(POP))
c(2005:2019)
c(2005:2019) %>% arrange(desc(.))
desc(c(2005:2019))
c(2005:2019)) %>% desc(.)
c(2005:2019) %>% desc(.)
c(2005:2019) %>% sort(., decreasing = TRUE)
states_acs_vars_ref <- load_variables(year = 2019,
dataset = "acs5/subject",
cache = TRUE)
View(most_populated)
View(states_acs_vars_ref)
states_acs_vars_ref <- load_variables(year = 2019,
dataset = "acs5/subject",
cache = TRUE) %>%
mutate(table_name = gsub( "_.*$", "", name),
label = gsub("!!", "; ", label),
shiny_input_label = paste0(table_name, ": ", str_to_title(concept)))
View(states_acs_vars_ref)
states_acs_vars_ref <- load_variables(year = 2019,
dataset = "acs5/subject",
cache = TRUE) %>%
filter(!is.na(concept)) %>%
mutate(table_name = gsub( "_.*$", "", name),
label = gsub("!!", "; ", label),
shiny_input_label = paste0(table_name, ": ", str_to_title(concept)))
View(states_acs_vars_ref)
test <- states_acs_vars_ref %>%
tabyl(shiny_input_label)
View(test)
states_acs_vars_ref %>% unique(shiny_input_label, table_name)
states_acs_vars_ref %>% distinct(shiny_input_label, table_name)
states_acs_tables %>% filter(str_detect(name, pattern = "(^S181(0|1)_*)|(^S26(01A|02)_*)"))
# Libraries
library(tidyverse);library(readxl)
library(tigris);library(sf);library(janitor)
library(tidycensus);library(viridis);library(tmap)
library(RPostgres);library(RPostgreSQL);library(DBI)
library(geojsonsf);library(mongolite)
library(shiny); library(shinyWidgets)
# Set working document, options
setwd(here::here())
options(stringsAsFactors = FALSE, scipen = 999, dplyr.summarise.inform = FALSE, tigris_use_cache = TRUE)
knitr::opts_chunk$set(echo = FALSE)
# Load API keys and database connection information
source("secret.R", local = TRUE)
states_acs_vars_ref <- load_variables(year = 2019,
dataset = "acs5/subject",
cache = TRUE) %>%
filter(!is.na(concept)) %>%
mutate(table_name = gsub( "_.*$", "", name),
label = gsub("!!", "; ", label),
shiny_input_label = paste0(table_name, ": ", str_to_title(concept)))
states_acs_tables %>% filter(str_detect(name, pattern = "(^S181(0|1)_*)|(^S26(01A|02)_*)"))
unique(states_acs_vars_ref$table_name)
states_acs_vars_selected <- states_acs_vars_ref %>%
filter(table_name %in% c("S1810", "S1811", "S2601A", "S2602"))
View(states_acs_vars_selected)
states_acs_vars_selected <- states_acs_vars_ref %>%
filter(table_name %in% c("S1810", "S1811", "S2601A", "S2602")) %>%
filter(!str_detect(label, pattern = "DISABILITY TYPE BY DETAILED AGE"))
View(states_acs_vars_selected)
DT::datatable(states_acs_vars_selected) %>% head(5)
DT::renderDataTable({ DT::datatable(states_acs_vars_selected) %>% head(5) })
unique(states_acs_vars_ref()$shiny_input_label) %in%
c("S1810", "S1811", "S2601A", "S2602")
str_detect(unique(states_acs_vars_ref$shiny_input_label),
pattern = "(S1810|S1811|S2601A|S2602):")
unique(states_acs_vars_ref$shiny_input_label) %>%
filter(str_detect(., pattern = "(S1810|S1811|S2601A|S2602):"))
states_acs_vars_ref %>%
select(shiny_input_label) %>%
unique() %>%
filter(str_detect(shiny_input_label,
pattern = "(S1810|S1811|S2601A|S2602):"))
split(unique(states_acs_vars_ref$shiny_input_label),
unique(states_acs_vars_ref$table_name))
split(unique(states_acs_vars_ref$table_name),
unique(states_acs_vars_ref$shiny_input_label))
states_acs_vars_ref %>%
select(shiny_input_label) %>%
unique() %>%
filter(str_detect(shiny_input_label,
pattern = "(S1810|S1811|S2601A|S2602):"))
states_acs_vars_ref %>%
select(table_name) %>%
unique() %>%
filter(str_detect(table_name,
pattern = "(S1810|S1811|S2601A|S2602)"))
states_acs_vars_ref %>%
select(shiny_input_label) %>%
unique() %>%
filter(str_detect(shiny_input_label,
pattern = "(S1810|S1811|S2601A|S2602):"))
states_acs_vars_ref %>%
select(shiny_input_label) %>%
unique() %>%
filter(str_detect(shiny_input_label,
pattern = "(S1810|S1811|S2601A|S2602):")) %>%
pull()
# All states and counties
fips_codes <- force(fips_codes) %>%
mutate("state_code_num" = as.numeric(state_code)) %>%
filter(state_code_num %in% c(1:56)) %>%
distinct(state, state_code, county_code)
View(fips_codes)
fips_codes <- force(fips_codes) %>%
mutate("state_code_num" = as.numeric(state_code)) %>%
filter(state_code_num %in% c(1:56))
View(fips_codes)
# All states and counties
fips_codes <- force(fips_codes) %>%
mutate("state_code_num" = as.numeric(state_code)) %>%
filter(state_code_num %in% c(1:56)) %>%
distinct(state, state_code, county_code)
test <- get_acs(geography = "state",
year = 2019,
variables = states_acs_vars_selected %>% pull(name),
survey = "acs5/subject",
geometry = FALSE,
wide = TRUE)
View(states_acs_vars_selected)
test <- get_acs(geography = "state",
year = 2018,
variables = states_acs_vars_selected %>% pull(name),
survey = "acs5/subject",
geometry = FALSE,
wide = TRUE)
test <- get_acs(geography = "state",
year = 2018,
variables = states_acs_vars_selected %>% pull(name),
survey = "acs5",
geometry = FALSE,
wide = TRUE)
View(test)
View(test)
fips_codes <- force(fips_codes) %>%
mutate("state_code_num" = as.numeric(state_code)) %>%
distinct(state, state_code, county_code)
str_extract("acs5/subject", pattern = "^.*/")
str_extract("acs5/subject", pattern = "^.*(?=/)")
str_extract("acs5", pattern = "^.*(?=/)")
coalesce(str_extract("acs5", pattern = "^.*(?=/)"), "acs5")
acs_raw <- get_acs(geography = "state",
year = 2018,
variables = states_acs_vars_selected %>% pull(name),
survey = "acs5",
geometry = FALSE,
wide = TRUE)
temp <- acs_raw %>%
mutate(variable = gsub("PR", "", variable)) %>%
left_join(fips_codes %>% select(state, state_code),
by = c("GEOID" = "state_code")) %>%
relocate(state, .after = NAME) %>%
distinct()
temp_geometry <- FALSE
temp_wide <- TRUE
temp_wide
temp_year <- input$states_acs_year
temp_survey <- coalesce(str_extract(input$states_acs_dataset,
pattern = "^.*(?=/)"),
input$states_acs_dataset)
acs_vars_selected <- reactive({ states_acs_vars_selected() })
temp_geometry <- FALSE
temp_wide <- TRUE
acs_raw <- get_acs(geography = "state",
year = 2018,
variables = states_acs_vars_selected %>% pull(name),
survey = "acs5",
geometry = temp_geometry,
wide = temp_wide)
# Function for ACS download
fun_download_acs_data <- function(geo) {
# ===============
# Define intermediate variables
# ===============
# Year
temp_year <- reactive({
case_when(geo == "state" ~
input$states_acs_year,
TRUE ~ 2019)
})
message(paste0("Year = ", temp_year()))
# Survey
temp_survey <- reactive({
case_when(geo == "state" ~
coalesce(str_extract(input$states_acs_dataset,
pattern = "^.*(?=/)"),
input$states_acs_dataset),
TRUE ~ "acs5")
})
message(paste0("Survey = ", temp_survey()))
# ACS variables
acs_vars_selected <- reactive({
case_when(geo == "state" ~
states_acs_vars_selected(),
TRUE ~ states_acs_vars_selected())
})
# Geometry
temp_geometry <- case_when(geo == "state" ~
FALSE,
TRUE ~ FALSE)
message(paste0("Geometry = ", temp_geometry))
# Wide
temp_wide <- case_when(geo == "state" ~
TRUE,
TRUE ~ TRUE)
message(paste0("Wide = ", temp_wide))
# ===============
# Download ACS data
# ===============
# Grab from API
acs_raw <- reactive({
get_acs(geography = geo,
year = temp_year(),
variables = acs_vars_selected() %>% pull(name),
survey = temp_survey(),
geometry = temp_geometry,
wide = temp_wide)
# Static check (state)
# acs_raw <- get_acs(geography = "state",
#         year = 2018,
#         variables = states_acs_vars_selected %>% pull(name),
#         survey = "acs5",
#         geometry = temp_geometry,
#         wide = temp_wide)
})
# # Clean and restructure
# acs_clean <- reactive({
#
#   if (geo == "state") {
#
#   # Standardize variable names for MongoDB
#     temp <- acs_raw() %>%
#       mutate(variable = gsub("PR", "", variable)) %>%
#       left_join(fips_codes %>% select(state, state_code),
#                 by = c("GEOID" = "state_code")) %>%
#       relocate(state, .after = NAME) %>%
#       distinct()
#
# # } else if (geo == "place") {
#
# } else { #tracts
#
# }
#
#   return(temp)
#
# })
return(acs_raw())
}
# Function for ACS download
fun_download_acs_data <- function(geo) {
# ===============
# Define intermediate variables
# ===============
# Year
temp_year <- reactive({
case_when(geo == "state" ~
input$states_acs_year,
TRUE ~ 2019)
})
message(paste0("Year = ", temp_year()))
# Survey
temp_survey <- reactive({
case_when(geo == "state" ~
coalesce(str_extract(input$states_acs_dataset,
pattern = "^.*(?=/)"),
input$states_acs_dataset),
TRUE ~ "acs5")
})
message(paste0("Survey = ", temp_survey()))
# ACS variables
acs_vars_selected <- reactive({
case_when(geo == "state" ~
states_acs_vars_selected(),
TRUE ~ states_acs_vars_selected)
})
# Geometry
temp_geometry <- case_when(geo == "state" ~
FALSE,
TRUE ~ FALSE)
message(paste0("Geometry = ", temp_geometry))
# Wide
temp_wide <- case_when(geo == "state" ~
TRUE,
TRUE ~ TRUE)
message(paste0("Wide = ", temp_wide))
# ===============
# Download ACS data
# ===============
# Grab from API
acs_raw <- reactive({
get_acs(geography = geo,
year = temp_year(),
variables = acs_vars_selected() %>% pull(name),
survey = temp_survey(),
geometry = temp_geometry,
wide = temp_wide)
# Static check (state)
# acs_raw <- get_acs(geography = "state",
#         year = 2018,
#         variables = states_acs_vars_selected %>% pull(name),
#         survey = "acs5",
#         geometry = temp_geometry,
#         wide = temp_wide)
})
# # Clean and restructure
# acs_clean <- reactive({
#
#   if (geo == "state") {
#
#   # Standardize variable names for MongoDB
#     temp <- acs_raw() %>%
#       mutate(variable = gsub("PR", "", variable)) %>%
#       left_join(fips_codes %>% select(state, state_code),
#                 by = c("GEOID" = "state_code")) %>%
#       relocate(state, .after = NAME) %>%
#       distinct()
#
# # } else if (geo == "place") {
#
# } else { #tracts
#
# }
#
#   return(temp)
#
# })
return(acs_raw())
}
temp <- fun_download_acs_data(geo = "state")
temp <- reactive({ fun_download_acs_data(geo = "state") })
temp
fun_download_acs_data(geo = "state")
library(tidyverse);library(readxl)
library(tigris);library(sf);library(janitor)
library(tidycensus);library(viridis);library(tmap)
library(RPostgres);library(RPostgreSQL);library(DBI)
library(geojsonsf);library(mongolite)
# Set tigris option to TRUE for Census geometries
# to load with ACS data call in first section of script
options(tigris_use_cache = TRUE)
# Load API keys and database connection information
source("secret.R", local = TRUE)
census_api_key(api_key_census)
# Set working directory to current path
setwd(here::here())
most_populated <- get_estimates(geography = "place",
year = 2019,
product = "population",
geometry = FALSE,
output = "wide") %>%
arrange(desc(POP))
View(most_populated)
# Libraries
library(tidyverse);library(readxl)
library(tigris);library(sf);library(janitor)
library(tidycensus);library(viridis);library(tmap)
library(RPostgres);library(RPostgreSQL);library(DBI)
library(geojsonsf);library(mongolite)
library(shiny);library(shinyjs);library(shinyWidgets)
# Set working document, options
setwd(here::here())
options(stringsAsFactors = FALSE, scipen = 999, dplyr.summarise.inform = FALSE, tigris_use_cache = TRUE)
knitr::opts_chunk$set(echo = FALSE)
# Load API keys and database connection information
source("secret.R", local = TRUE)
states_acs_vars_ref <- load_variables(year = 2019,
dataset = "acs5/subject",
cache = TRUE) %>%
filter(!is.na(concept)) %>%
mutate(table_name = gsub( "_.*$", "", name),
label = gsub("!!", "; ", label),
shiny_input_label = paste0(table_name, ": ", str_to_title(concept)))
View(states_acs_vars_ref)
View(states_acs_vars_ref)
write.table(states_acs_vars_ref, "clipboard", sep="\t", row.names=FALSE)
