geom_sf(aes(fill = quartile_fill),
color = "black", size = 0.25) +
scale_fill_brewer(palette = palette_selected) +
# Text
geom_sf_text(data = get_urbn_labels(map = "territories_states",
sf = TRUE) %>%
filter(!state_fips %in% c("60", "66", "69", "78")),
aes(label = state_abbv),
size = 4, fontface = "bold", check_overlap = TRUE) +
# Labels
labs(x = "", y = "",
# title = title,
fill = legend_title) +
theme_void() +
# Theme, removes all of the grid elements that we don't need
theme(plot.background = element_rect(colour = "white"),
panel.grid = element_blank(),
panel.grid.major = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.line = element_blank(),
panel.spacing = unit(0L, "pt"),
legend.position = "bottom",
legend.title = element_text(face = "bold", vjust = 0.75),
legend.text = element_text(vjust = .5),
legend.key = element_rect(color = "black"),
strip.text.x = element_text(size = 9L)) +
guides(fill = guide_legend(label.position = "bottom"))
# Plot geographic map
ggplot(states_sf) +
geom_sf(aes(fill = quartile_fill),
color = "black", size = 0.25) +
scale_fill_brewer(palette = palette_selected) +
# Text
geom_sf_text(data = get_urbn_labels(map = "territories_states",
sf = TRUE) %>%
filter(!state_fips %in% c("60", "66", "69", "78")),
aes(label = state_abbv),
size = 3.5, fontface = "bold", check_overlap = TRUE) +
# Labels
labs(x = "", y = "",
# title = title,
fill = legend_title) +
theme_void() +
# Theme, removes all of the grid elements that we don't need
theme(plot.background = element_rect(colour = "white"),
panel.grid = element_blank(),
panel.grid.major = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.line = element_blank(),
panel.spacing = unit(0L, "pt"),
legend.position = "bottom",
legend.title = element_text(face = "bold", vjust = 0.75),
legend.text = element_text(vjust = .5),
legend.key = element_rect(color = "black"),
strip.text.x = element_text(size = 9L)) +
guides(fill = guide_legend(label.position = "bottom"))
national_data_table_friendly[1:26,]
national_data_table_friendly[27:52,]
# Get variable group based on selected variable
national_vars_in_topic <- dict_vars %>%
filter((!!sym(params$national_category_selector)) == TRUE,
var_topic ==
(dict_vars %>%
filter((!!sym(params$national_category_selector)) == TRUE,
var_readable == params$national_variable_selector) %>%
pull(var_topic))) %>%
select(var_pretty, var_readable)
# Caption
cap_choices <- c("Demographics" = "is_demographics",
"Community Participation" = "is_community_participation",
"Community Living" = "is_community_living",
"Work/Economic" = "is_work_economic")
table_caption <- paste(names(cap_choices[cap_choices == params$national_category_selector]), "Table")
# Reorganize dataframe, switch to pretty names
national_data_table_friendly <- national_data %>%
arrange(GEOID) %>%
mutate("State" = paste0(NAME, " (", ABBR, ")")) %>%
select(any_of(c("State",
national_vars_in_topic %>%
pull(var_readable)))) %>%
mutate(across(-State & -ends_with("_pct"),
~scales::comma(.x))) %>%
mutate(across(ends_with("_pct"),
~scales::percent(.x,
accuracy = 0.1,
scale = 1))) %>%
rename(!!any_of(national_vars_in_topic %>%
deframe()))
national_data_table_friendly[1:26,]
national_data_table_friendly[27:52,]
factsheet_national_params <- read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/master/dictionaries/dict_vars.csv")
View(dict_vars)
factsheet_national_params <- read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/master/dictionaries/dict_vars.csv") %>%
filter(!is.na(national_dropdown_label))
View(factsheet_national_params)
read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/master/dictionaries/dict_vars.csv") %>%
filter(!is.na(national_dropdown_label)) %>%
select(starts_with("^is_"),
"national_variable_selector" = var_readable)
read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/master/dictionaries/dict_vars.csv") %>%
filter(!is.na(national_dropdown_label)) %>%
select(starts_with("is_"),
"national_variable_selector" = var_readable)
read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/master/dictionaries/dict_vars.csv") %>%
filter(!is.na(national_dropdown_label)) %>%
select(starts_with("is_"),
"national_variable_selector" = var_readable) %>%
pivot_longer(cols = -national_variable_selector,
names_to = "national_category_selector")
read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/master/dictionaries/dict_vars.csv") %>%
filter(!is.na(national_dropdown_label)) %>%
select(starts_with("is_"),
"national_variable_selector" = var_readable,
national_dropdown_label) %>%
pivot_longer(cols = -national_variable_selector,
names_to = "national_category_selector") %>%
filter(value == TRUE)
select(national_category_selector,
national_variable_selector,
national_dropdown_label)
read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/master/dictionaries/dict_vars.csv") %>%
filter(!is.na(national_dropdown_label)) %>%
select(starts_with("is_"),
"national_variable_selector" = var_readable,
national_dropdown_label) %>%
pivot_longer(cols = -national_variable_selector,
names_to = "national_category_selector") %>%
filter(value == TRUE) %>%
select(national_category_selector,
national_variable_selector,
national_dropdown_label)
read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/master/dictionaries/dict_vars.csv") %>%
filter(!is.na(national_dropdown_label)) %>%
select(starts_with("is_"),
"national_variable_selector" = var_readable,
national_dropdown_label) %>%
pivot_longer(cols = -c(national_variable_selector,
national_dropdown_label),
names_to = "national_category_selector") %>%
filter(value == TRUE) %>%
select(national_category_selector,
national_variable_selector,
national_dropdown_label)
read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/master/dictionaries/dict_vars.csv") %>%
filter(!is.na(national_dropdown_label)) %>%
select(starts_with("is_"),
"national_variable_selector" = var_readable,
national_dropdown_label) %>%
pivot_longer(cols = -c(national_variable_selector,
national_dropdown_label),
names_to = "national_category_selector") %>%
filter(value == TRUE) %>%
select(national_category_selector,
national_variable_selector,
national_dropdown_label) %>%
group_by(national_dropdown_label) %>%
slice(1) %>%
ungroup()
# Pull baseline places in database from GitHub repo
# Organize parameters for looping operation
factsheet_national_params <- read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/master/dictionaries/dict_vars.csv") %>%
filter(!is.na(national_dropdown_label)) %>%
select(starts_with("is_"),
"national_variable_selector" = var_readable,
national_dropdown_label) %>%
pivot_longer(cols = -c(national_variable_selector,
national_dropdown_label),
names_to = "national_category_selector") %>%
filter(value == TRUE) %>%
select(national_category_selector,
national_variable_selector,
national_dropdown_label) %>%
group_by(national_dropdown_label) %>%
slice(1) %>%
ungroup()
View(factsheet_national_params)
read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/master/dictionaries/dict_vars.csv") %>%
filter(!is.na(national_dropdown_label)) %>%
select(starts_with("is_"),
"national_variable_selector" = var_readable,
national_dropdown_label) %>%
pivot_longer(cols = -c(national_variable_selector,
national_dropdown_label),
names_to = "national_category_selector") %>%
filter(value == TRUE) %>%
select(national_category_selector,
national_variable_selector,
national_dropdown_label) %>%
group_by(national_dropdown_label) %>%
slice(1) %>%
ungroup()
read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/master/dictionaries/dict_vars.csv") %>%
filter(!is.na(national_dropdown_label)) %>%
select(starts_with("is_"),
"national_variable_selector" = var_readable,
national_dropdown_label) %>%
pivot_longer(cols = -c(national_variable_selector,
national_dropdown_label),
names_to = "national_category_selector") %>%
filter(value == TRUE) %>%
select(national_category_selector,
national_variable_selector,
national_dropdown_label) %>%
group_by(national_dropdown_label) %>%
slice(1) %>%
ungroup() %>%
mutate("output_file" = stringr::str_c(here(), "/factsheet_national/output_files/",
metro, "_", state, ".html"),
"params" = pmap(list(national_category_selector,
national_variable_selector),
~list(national_category_selector = ..1,
national_variable_selector = ..2)))
read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/master/dictionaries/dict_vars.csv") %>%
filter(!is.na(national_dropdown_label)) %>%
select(starts_with("is_"),
"national_variable_selector" = var_readable,
national_dropdown_label) %>%
pivot_longer(cols = -c(national_variable_selector,
national_dropdown_label),
names_to = "national_category_selector") %>%
filter(value == TRUE) %>%
select(national_category_selector,
national_variable_selector,
national_dropdown_label) %>%
group_by(national_dropdown_label) %>%
slice(1) %>%
ungroup() %>%
mutate("output_file" = stringr::str_c(here(), "/factsheet_national/output_files/",
national_dropdown_label, ".html"),
"params" = pmap(list(national_category_selector,
national_variable_selector),
~list(national_category_selector = ..1,
national_variable_selector = ..2)))
# Organize parameters for looping operation
factsheet_national_params <- read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/master/dictionaries/dict_vars.csv") %>%
filter(!is.na(national_dropdown_label)) %>%
select(starts_with("is_"),
"national_variable_selector" = var_readable,
national_dropdown_label) %>%
pivot_longer(cols = -c(national_variable_selector,
national_dropdown_label),
names_to = "national_category_selector") %>%
filter(value == TRUE) %>%
select(national_category_selector,
national_variable_selector,
national_dropdown_label) %>%
group_by(national_dropdown_label) %>%
slice(1) %>%
ungroup()
test <- factsheet_national_params %>%
mutate("output_file" = stringr::str_c(here(), "/factsheet_national/output_files/",
national_dropdown_label, ".html"),
"params" = pmap(list(national_category_selector,
national_variable_selector),
~list(national_category_selector = ..1,
national_variable_selector = ..2)))
View(test)
View(test[[5]][[1]])
test$params
# Pull baseline places in database from GitHub repo
# Organize parameters for looping operation
factsheet_national_params <- read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/master/dictionaries/dict_vars.csv") %>%
filter(!is.na(national_dropdown_label)) %>%
select(starts_with("is_"),
"national_variable_selector" = var_readable,
national_dropdown_label) %>%
pivot_longer(cols = -c(national_variable_selector,
national_dropdown_label),
names_to = "national_category_selector") %>%
filter(value == TRUE) %>%
select(national_category_selector,
national_variable_selector,
national_dropdown_label) %>%
group_by(national_dropdown_label) %>%
slice(1) %>%
ungroup() %>%
mutate("output_file" = stringr::str_c(here(), "/factsheet_national/output_files/",
national_dropdown_label, ".html"),
"params" = pmap(list(national_category_selector,
national_variable_selector),
~list(national_category_selector = ..1,
national_variable_selector = ..2))) %>%
filter(national_variable_selector %in% c("pop_total",
"pwd_commute_car_alone_pct",
"pwd_commute_public_pct"))
# Walk through dataframe, create documents
factsheet_national_params %>%
select(output_file, params) %>%
pwalk(rmarkdown::render,
input = stringr::str_c(here(), "/factsheet_national/factsheet_national.Rmd"))
# Libraries
library(tidyverse);library(here)
library(mongolite)
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
# Load dictionary
dict_vars <- read_csv(here("dictionaries", "dict_vars.csv"))
dict_vars <- dict_vars %>%
mutate("national_summary_text" = ifelse(is.na(national_summary_text),
"",
national_summary_text))
# Check for summary text characters
test <- dict_vars %>%
filter(national_summary_text != "") %>%
mutate("row_number" = row_number()) %>%
select(row_number,var_readable,
national_summary_text)
test
dict_vars %>%
filter(national_summary_text != "") %>%
mutate("row_number" = row_number()) %>%
select( # row_number,var_readable,
national_summary_text)
View(test)
# Libraries
library(tidyverse);library(here)
library(mongolite)
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
# Load dictionary
dict_vars <- read_csv(here("dictionaries", "dict_vars.csv"))
dict_vars <- dict_vars %>%
mutate("national_summary_text" = ifelse(is.na(national_summary_text),
"",
national_summary_text))
# Check for summary text characters
spec_char_check <- dict_vars %>%
filter(national_summary_text != "") %>%
mutate("row_number" = row_number()) %>%
select( # row_number,var_readable,
national_summary_text)
spec_char_check
mongo_conn <- fun_mongo_connect(host_name = "host_dev",
collection_name = "dict_vars",
database_name = "ADA-PARC")
mongo_conn$drop()
mongo_conn$insert(dict_vars)
mongo_conn <- fun_mongo_connect(host_name = "host_prod",
collection_name = "dict_vars",
database_name = "ADA-PARC")
mongo_conn$drop()
mongo_conn$insert(dict_vars)
### ----- Libraries -----
# Packages
library(tidyverse)
library(tigris); library(sf)
library(geofacet); library(urbnmapr)
library(leaflet); library(leaflet.extras)
library(tmap); library(tmaptools)
library(htmltools)
library(shiny)
library(shinycssloaders)
# devtools::install_github("daattali/shinycssloaders", ref = "rmarkdown") # rmarkdown branch must be installed and cssloaders_in_header.html must exist
library(shinyWidgets); library(flexdashboard)
library(colourpicker); library(gghighlight)
library(knitr); library(kableExtra)
library(openxlsx); library(scales)
library(hrbrthemes); library(ggthemes)
library(extrafont); library(plotly)
library(mongolite); library(here)
options(scipen = 999999,
tigris_use_cache = TRUE)
### ----- Database connections -----
# Set this to host_prod or host_dev
host_name = "host_dev"
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
# Load variable dictionary for relating tables, variable codes,
# and readable values
dict_vars <- fun_pull_mongo_data(tables = "dict_vars",
host_name = host_name)
### ----- National Data import and clean -----
# This script takes the national_* objects and transforms them
# into the final datasets for mapping
source(here("national_import.R"), local = TRUE)
# Packages
library(tidyverse)
library(tigris); library(sf)
library(geofacet); library(urbnmapr)
library(leaflet); library(leaflet.extras)
library(tmap); library(tmaptools)
library(htmltools)
library(shiny)
library(shinycssloaders)
# devtools::install_github("daattali/shinycssloaders", ref = "rmarkdown") # rmarkdown branch must be installed and cssloaders_in_header.html must exist
library(shinyWidgets); library(flexdashboard)
library(colourpicker); library(gghighlight)
library(knitr); library(kableExtra)
library(openxlsx); library(scales)
library(hrbrthemes); library(ggthemes)
library(extrafont); library(plotly)
library(mongolite); library(here)
options(scipen = 999999,
tigris_use_cache = TRUE)
knitr::opts_chunk$set(fig.cap = TRUE)
### ----- Database connections -----
# Set this to host_prod or host_dev
host_name = "host_dev"
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
# Load variable dictionary for relating tables, variable codes,
# and readable values
dict_vars <- fun_pull_mongo_data(tables = "dict_vars",
host_name = host_name)
### ----- National Data import and clean -----
# This script takes the national_* objects and transforms them
# into the final datasets for mapping
source(here("national_import.R"), local = TRUE)
View(dict_vars)
# Set this to host_prod or host_dev
host_name = "host_prod"
# Load variable dictionary for relating tables, variable codes,
# and readable values
dict_vars <- fun_pull_mongo_data(tables = "dict_vars",
host_name = host_name)
View(dict_vars)
source('E:/UIC/Voorhees/ADA-PARC/ADA PARC Website Design/helper_scripts/dict_vars_upload.R', echo=TRUE)
### ----- Libraries -----
# Packages
library(tidyverse)
library(tigris); library(sf)
library(geofacet); library(urbnmapr)
library(leaflet); library(leaflet.extras)
library(tmap); library(tmaptools)
library(htmltools)
library(shiny)
library(shinycssloaders)
# devtools::install_github("daattali/shinycssloaders", ref = "rmarkdown") # rmarkdown branch must be installed and cssloaders_in_header.html must exist
library(shinyWidgets); library(flexdashboard)
library(colourpicker); library(gghighlight)
library(knitr); library(kableExtra)
library(openxlsx); library(scales)
library(hrbrthemes); library(ggthemes)
library(extrafont); library(plotly)
library(mongolite); library(here)
options(scipen = 999999,
tigris_use_cache = TRUE)
knitr::opts_chunk$set(fig.cap = TRUE)
### ----- Database connections -----
# Set this to host_prod or host_dev
host_name = "host_prod"
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
# Load variable dictionary for relating tables, variable codes,
# and readable values
dict_vars <- fun_pull_mongo_data(tables = "dict_vars",
host_name = host_name)
### ----- National Data import and clean -----
# This script takes the national_* objects and transforms them
# into the final datasets for mapping
source(here("national_import.R"), local = TRUE)
View(dict_vars)
# Chunk 1: setup
### ----- Libraries -----
# Packages
library(tidyverse)
library(tigris); library(sf)
library(geofacet); library(urbnmapr)
library(leaflet); library(leaflet.extras)
library(tmap); library(tmaptools)
library(htmltools)
library(shiny)
library(shinycssloaders)
# devtools::install_github("daattali/shinycssloaders", ref = "rmarkdown") # rmarkdown branch must be installed and cssloaders_in_header.html must exist
library(shinyWidgets); library(flexdashboard)
library(colourpicker); library(gghighlight)
library(knitr); library(kableExtra)
library(openxlsx); library(scales)
library(hrbrthemes); library(ggthemes)
library(extrafont); library(plotly)
library(mongolite); library(here)
options(scipen = 999999,
tigris_use_cache = TRUE)
knitr::opts_chunk$set(fig.cap = TRUE)
### ----- Database connections -----
# Set this to host_prod or host_dev
host_name = "host_dev"
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
# Load variable dictionary for relating tables, variable codes,
# and readable values
dict_vars <- fun_pull_mongo_data(tables = "dict_vars",
host_name = host_name)
### ----- National Data import and clean -----
# This script takes the national_* objects and transforms them
# into the final datasets for mapping
source(here("national_import.R"), local = TRUE)
View(dict_vars)
variable <- "pwd_grpquarters_institution_pct"
community_living %>%
mutate("State" = paste0(NAME, " (", ABBR, ")")) %>%
select(State, sym(variable)) %>%
filter(!!sym(variable) == min(!!sym(variable))) %>%
slice(1)
community_living %>%
mutate("State" = paste0(NAME, " (", ABBR, ")")) %>%
select(State, sym(variable))
!!sym(variable)
community_living %>%
mutate("State" = paste0(NAME, " (", ABBR, ")")) %>%
select(State, sym(variable)) %>%
filter(!is.na(!!sym(variable))) %>%
filter(!!sym(variable) == min(!!sym(variable))) %>%
slice(1)
community_living %>%
mutate("State" = paste0(NAME, " (", ABBR, ")")) %>%
select(State, sym(variable)) %>%
filter(!is.na(!!sym(variable))) %>%
filter(!!sym(variable) == max(!!sym(variable))) %>%
slice(1)
