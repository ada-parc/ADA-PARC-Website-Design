axis.ticks = element_blank(),
axis.line = element_blank(),
panel.spacing = unit(0L, "pt"),
legend.position = "bottom",
legend.title = element_text(face = "bold", vjust = 0.75),
legend.text = element_text(vjust = .5),
legend.key = element_rect(color = "black"),
strip.text.x = element_text(size = 9L)) +
guides(fill = guide_legend(label.position = "bottom"))
# Plot geographic map
ggplot(states_sf) +
geom_sf(aes(fill = quartile_fill),
color = "black", lwd = 0.5) +
scale_fill_brewer(palette = palette_selected) +
# Text
geom_sf_text(data = get_urbn_labels(map = "states",
sf = TRUE),
aes(label = state_abbv),
size = 4) +
# geom_sf_text(data = states_sf, aes(label = ABBR),
#              size = 4) +
# Labels
labs(x = "", y = "",
# title = title,
fill = legend_title) +
theme_void() +
# Theme, removes all of the grid elements that we don't need
theme(plot.background = element_rect(colour = "white"),
panel.grid = element_blank(),
panel.grid.major = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.line = element_blank(),
panel.spacing = unit(0L, "pt"),
legend.position = "bottom",
legend.title = element_text(face = "bold", vjust = 0.75),
legend.text = element_text(vjust = .5),
legend.key = element_rect(color = "black"),
strip.text.x = element_text(size = 9L)) +
guides(fill = guide_legend(label.position = "bottom"))
# Plot geographic map
ggplot(states_sf) +
geom_sf(aes(fill = quartile_fill),
color = "black", size = 0.25) +
scale_fill_brewer(palette = palette_selected) +
# Text
geom_sf_text(data = get_urbn_labels(map = "states",
sf = TRUE),
aes(label = state_abbv),
size = 4) +
# geom_sf_text(data = states_sf, aes(label = ABBR),
#              size = 4) +
# Labels
labs(x = "", y = "",
# title = title,
fill = legend_title) +
theme_void() +
# Theme, removes all of the grid elements that we don't need
theme(plot.background = element_rect(colour = "white"),
panel.grid = element_blank(),
panel.grid.major = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.line = element_blank(),
panel.spacing = unit(0L, "pt"),
legend.position = "bottom",
legend.title = element_text(face = "bold", vjust = 0.75),
legend.text = element_text(vjust = .5),
legend.key = element_rect(color = "black"),
strip.text.x = element_text(size = 9L)) +
guides(fill = guide_legend(label.position = "bottom"))
get_urbn_map("territories_states", sf = TRUE)
states_sf <- get_urbn_map("territories_states", sf = TRUE)
View(states_sf)
states_sf <- get_urbn_map("territories_states", sf = TRUE) %>%
filter(!state_fips %in% c("60", "66", "69", "78")) %>%
select("ABBR" = state_abbv) %>%
inner_join(data %>%
select(ABBR, !!sym(selected)),
by = "ABBR") %>%
rowwise() %>%
mutate("hover_text" := ifelse(grepl("_pct$",
selected),
paste0(ABBR, ":\n",
round(!!sym(selected), 1), "%"),
paste0(ABBR, ":\n",
abbreviate_number(!!sym(selected)))),
"quartile_fill" = cut(!!sym(selected),
breaks = quartiles,
labels = labels,
include.lowest = TRUE))
# Plot geographic map
ggplot(states_sf) +
geom_sf(aes(fill = quartile_fill),
color = "black", size = 0.25) +
scale_fill_brewer(palette = palette_selected) +
# Text
geom_sf_text(data = get_urbn_labels(map = "territories_states",
sf = TRUE) %>%
filter(!state_fips %in% c("60", "66", "69", "78")),
aes(label = state_abbv),
size = 4) +
# Labels
labs(x = "", y = "",
# title = title,
fill = legend_title) +
theme_void() +
# Theme, removes all of the grid elements that we don't need
theme(plot.background = element_rect(colour = "white"),
panel.grid = element_blank(),
panel.grid.major = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.line = element_blank(),
panel.spacing = unit(0L, "pt"),
legend.position = "bottom",
legend.title = element_text(face = "bold", vjust = 0.75),
legend.text = element_text(vjust = .5),
legend.key = element_rect(color = "black"),
strip.text.x = element_text(size = 9L)) +
guides(fill = guide_legend(label.position = "bottom"))
hcl <- farver::decode_colour(RColorBrewer::brewer.pal(no_classes,
palette_selected),
"rgb", "hcl")
label_col <- ifelse(hcl[, "l"] > 50, "black", "white")
# Plot geographic map
ggplot(states_sf) +
geom_sf(aes(fill = quartile_fill),
color = "black", size = 0.25) +
scale_fill_brewer(palette = palette_selected) +
# Text
geom_sf_text(data = get_urbn_labels(map = "territories_states",
sf = TRUE) %>%
filter(!state_fips %in% c("60", "66", "69", "78")),
aes(label = state_abbv),
size = 4) +
scale_color_manual(values = label_col) +
# Labels
labs(x = "", y = "",
# title = title,
fill = legend_title) +
theme_void() +
# Theme, removes all of the grid elements that we don't need
theme(plot.background = element_rect(colour = "white"),
panel.grid = element_blank(),
panel.grid.major = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.line = element_blank(),
panel.spacing = unit(0L, "pt"),
legend.position = "bottom",
legend.title = element_text(face = "bold", vjust = 0.75),
legend.text = element_text(vjust = .5),
legend.key = element_rect(color = "black"),
strip.text.x = element_text(size = 9L)) +
guides(fill = guide_legend(label.position = "bottom"))
# Plot geographic map
ggplot(states_sf) +
geom_sf(aes(fill = quartile_fill),
color = "black", size = 0.25) +
scale_fill_brewer(palette = palette_selected) +
# Text
geom_sf_text(data = get_urbn_labels(map = "territories_states",
sf = TRUE) %>%
filter(!state_fips %in% c("60", "66", "69", "78")),
aes(label = state_abbv,
color = label_col),
size = 4) +
# scale_color_manual(values = label_col) +
# Labels
labs(x = "", y = "",
# title = title,
fill = legend_title) +
theme_void() +
# Theme, removes all of the grid elements that we don't need
theme(plot.background = element_rect(colour = "white"),
panel.grid = element_blank(),
panel.grid.major = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.line = element_blank(),
panel.spacing = unit(0L, "pt"),
legend.position = "bottom",
legend.title = element_text(face = "bold", vjust = 0.75),
legend.text = element_text(vjust = .5),
legend.key = element_rect(color = "black"),
strip.text.x = element_text(size = 9L)) +
guides(fill = guide_legend(label.position = "bottom"))
# Plot geographic map
ggplot(states_sf) +
geom_sf(aes(fill = quartile_fill),
color = "black", size = 0.25) +
scale_fill_brewer(palette = palette_selected) +
# Text
geom_sf_text(data = get_urbn_labels(map = "territories_states",
sf = TRUE) %>%
filter(!state_fips %in% c("60", "66", "69", "78")),
aes(label = state_abbv),
size = 4) +
# Labels
labs(x = "", y = "",
# title = title,
fill = legend_title) +
theme_void() +
# Theme, removes all of the grid elements that we don't need
theme(plot.background = element_rect(colour = "white"),
panel.grid = element_blank(),
panel.grid.major = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.line = element_blank(),
panel.spacing = unit(0L, "pt"),
legend.position = "bottom",
legend.title = element_text(face = "bold", vjust = 0.75),
legend.text = element_text(vjust = .5),
legend.key = element_rect(color = "black"),
strip.text.x = element_text(size = 9L)) +
guides(fill = guide_legend(label.position = "bottom"))
# Plot geographic map
ggplot(states_sf) +
geom_sf(aes(fill = quartile_fill),
color = "black", size = 0.25) +
scale_fill_brewer(palette = palette_selected) +
# Text
geom_sf_text(data = get_urbn_labels(map = "territories_states",
sf = TRUE) %>%
filter(!state_fips %in% c("60", "66", "69", "78")),
aes(label = state_abbv),
size = 4, fontface = "bold", check_overlap = TRUE) +
# Labels
labs(x = "", y = "",
# title = title,
fill = legend_title) +
theme_void() +
# Theme, removes all of the grid elements that we don't need
theme(plot.background = element_rect(colour = "white"),
panel.grid = element_blank(),
panel.grid.major = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.line = element_blank(),
panel.spacing = unit(0L, "pt"),
legend.position = "bottom",
legend.title = element_text(face = "bold", vjust = 0.75),
legend.text = element_text(vjust = .5),
legend.key = element_rect(color = "black"),
strip.text.x = element_text(size = 9L)) +
guides(fill = guide_legend(label.position = "bottom"))
# Plot geographic map
ggplot(states_sf) +
geom_sf(aes(fill = quartile_fill),
color = "black", size = 0.25) +
scale_fill_brewer(palette = palette_selected) +
# Text
geom_sf_text(data = get_urbn_labels(map = "territories_states",
sf = TRUE) %>%
filter(!state_fips %in% c("60", "66", "69", "78")),
aes(label = state_abbv),
size = 3.5, fontface = "bold", check_overlap = TRUE) +
# Labels
labs(x = "", y = "",
# title = title,
fill = legend_title) +
theme_void() +
# Theme, removes all of the grid elements that we don't need
theme(plot.background = element_rect(colour = "white"),
panel.grid = element_blank(),
panel.grid.major = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.line = element_blank(),
panel.spacing = unit(0L, "pt"),
legend.position = "bottom",
legend.title = element_text(face = "bold", vjust = 0.75),
legend.text = element_text(vjust = .5),
legend.key = element_rect(color = "black"),
strip.text.x = element_text(size = 9L)) +
guides(fill = guide_legend(label.position = "bottom"))
national_data_table_friendly[1:26,]
national_data_table_friendly[27:52,]
# Get variable group based on selected variable
national_vars_in_topic <- dict_vars %>%
filter((!!sym(params$national_category_selector)) == TRUE,
var_topic ==
(dict_vars %>%
filter((!!sym(params$national_category_selector)) == TRUE,
var_readable == params$national_variable_selector) %>%
pull(var_topic))) %>%
select(var_pretty, var_readable)
# Caption
cap_choices <- c("Demographics" = "is_demographics",
"Community Participation" = "is_community_participation",
"Community Living" = "is_community_living",
"Work/Economic" = "is_work_economic")
table_caption <- paste(names(cap_choices[cap_choices == params$national_category_selector]), "Table")
# Reorganize dataframe, switch to pretty names
national_data_table_friendly <- national_data %>%
arrange(GEOID) %>%
mutate("State" = paste0(NAME, " (", ABBR, ")")) %>%
select(any_of(c("State",
national_vars_in_topic %>%
pull(var_readable)))) %>%
mutate(across(-State & -ends_with("_pct"),
~scales::comma(.x))) %>%
mutate(across(ends_with("_pct"),
~scales::percent(.x,
accuracy = 0.1,
scale = 1))) %>%
rename(!!any_of(national_vars_in_topic %>%
deframe()))
national_data_table_friendly[1:26,]
national_data_table_friendly[27:52,]
factsheet_national_params <- read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/master/dictionaries/dict_vars.csv")
View(dict_vars)
factsheet_national_params <- read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/master/dictionaries/dict_vars.csv") %>%
filter(!is.na(national_dropdown_label))
View(factsheet_national_params)
read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/master/dictionaries/dict_vars.csv") %>%
filter(!is.na(national_dropdown_label)) %>%
select(starts_with("^is_"),
"national_variable_selector" = var_readable)
read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/master/dictionaries/dict_vars.csv") %>%
filter(!is.na(national_dropdown_label)) %>%
select(starts_with("is_"),
"national_variable_selector" = var_readable)
read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/master/dictionaries/dict_vars.csv") %>%
filter(!is.na(national_dropdown_label)) %>%
select(starts_with("is_"),
"national_variable_selector" = var_readable) %>%
pivot_longer(cols = -national_variable_selector,
names_to = "national_category_selector")
read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/master/dictionaries/dict_vars.csv") %>%
filter(!is.na(national_dropdown_label)) %>%
select(starts_with("is_"),
"national_variable_selector" = var_readable,
national_dropdown_label) %>%
pivot_longer(cols = -national_variable_selector,
names_to = "national_category_selector") %>%
filter(value == TRUE)
select(national_category_selector,
national_variable_selector,
national_dropdown_label)
read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/master/dictionaries/dict_vars.csv") %>%
filter(!is.na(national_dropdown_label)) %>%
select(starts_with("is_"),
"national_variable_selector" = var_readable,
national_dropdown_label) %>%
pivot_longer(cols = -national_variable_selector,
names_to = "national_category_selector") %>%
filter(value == TRUE) %>%
select(national_category_selector,
national_variable_selector,
national_dropdown_label)
read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/master/dictionaries/dict_vars.csv") %>%
filter(!is.na(national_dropdown_label)) %>%
select(starts_with("is_"),
"national_variable_selector" = var_readable,
national_dropdown_label) %>%
pivot_longer(cols = -c(national_variable_selector,
national_dropdown_label),
names_to = "national_category_selector") %>%
filter(value == TRUE) %>%
select(national_category_selector,
national_variable_selector,
national_dropdown_label)
read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/master/dictionaries/dict_vars.csv") %>%
filter(!is.na(national_dropdown_label)) %>%
select(starts_with("is_"),
"national_variable_selector" = var_readable,
national_dropdown_label) %>%
pivot_longer(cols = -c(national_variable_selector,
national_dropdown_label),
names_to = "national_category_selector") %>%
filter(value == TRUE) %>%
select(national_category_selector,
national_variable_selector,
national_dropdown_label) %>%
group_by(national_dropdown_label) %>%
slice(1) %>%
ungroup()
# Pull baseline places in database from GitHub repo
# Organize parameters for looping operation
factsheet_national_params <- read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/master/dictionaries/dict_vars.csv") %>%
filter(!is.na(national_dropdown_label)) %>%
select(starts_with("is_"),
"national_variable_selector" = var_readable,
national_dropdown_label) %>%
pivot_longer(cols = -c(national_variable_selector,
national_dropdown_label),
names_to = "national_category_selector") %>%
filter(value == TRUE) %>%
select(national_category_selector,
national_variable_selector,
national_dropdown_label) %>%
group_by(national_dropdown_label) %>%
slice(1) %>%
ungroup()
View(factsheet_national_params)
read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/master/dictionaries/dict_vars.csv") %>%
filter(!is.na(national_dropdown_label)) %>%
select(starts_with("is_"),
"national_variable_selector" = var_readable,
national_dropdown_label) %>%
pivot_longer(cols = -c(national_variable_selector,
national_dropdown_label),
names_to = "national_category_selector") %>%
filter(value == TRUE) %>%
select(national_category_selector,
national_variable_selector,
national_dropdown_label) %>%
group_by(national_dropdown_label) %>%
slice(1) %>%
ungroup()
read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/master/dictionaries/dict_vars.csv") %>%
filter(!is.na(national_dropdown_label)) %>%
select(starts_with("is_"),
"national_variable_selector" = var_readable,
national_dropdown_label) %>%
pivot_longer(cols = -c(national_variable_selector,
national_dropdown_label),
names_to = "national_category_selector") %>%
filter(value == TRUE) %>%
select(national_category_selector,
national_variable_selector,
national_dropdown_label) %>%
group_by(national_dropdown_label) %>%
slice(1) %>%
ungroup() %>%
mutate("output_file" = stringr::str_c(here(), "/factsheet_national/output_files/",
metro, "_", state, ".html"),
"params" = pmap(list(national_category_selector,
national_variable_selector),
~list(national_category_selector = ..1,
national_variable_selector = ..2)))
read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/master/dictionaries/dict_vars.csv") %>%
filter(!is.na(national_dropdown_label)) %>%
select(starts_with("is_"),
"national_variable_selector" = var_readable,
national_dropdown_label) %>%
pivot_longer(cols = -c(national_variable_selector,
national_dropdown_label),
names_to = "national_category_selector") %>%
filter(value == TRUE) %>%
select(national_category_selector,
national_variable_selector,
national_dropdown_label) %>%
group_by(national_dropdown_label) %>%
slice(1) %>%
ungroup() %>%
mutate("output_file" = stringr::str_c(here(), "/factsheet_national/output_files/",
national_dropdown_label, ".html"),
"params" = pmap(list(national_category_selector,
national_variable_selector),
~list(national_category_selector = ..1,
national_variable_selector = ..2)))
# Organize parameters for looping operation
factsheet_national_params <- read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/master/dictionaries/dict_vars.csv") %>%
filter(!is.na(national_dropdown_label)) %>%
select(starts_with("is_"),
"national_variable_selector" = var_readable,
national_dropdown_label) %>%
pivot_longer(cols = -c(national_variable_selector,
national_dropdown_label),
names_to = "national_category_selector") %>%
filter(value == TRUE) %>%
select(national_category_selector,
national_variable_selector,
national_dropdown_label) %>%
group_by(national_dropdown_label) %>%
slice(1) %>%
ungroup()
test <- factsheet_national_params %>%
mutate("output_file" = stringr::str_c(here(), "/factsheet_national/output_files/",
national_dropdown_label, ".html"),
"params" = pmap(list(national_category_selector,
national_variable_selector),
~list(national_category_selector = ..1,
national_variable_selector = ..2)))
View(test)
View(test[[5]][[1]])
test$params
# Pull baseline places in database from GitHub repo
# Organize parameters for looping operation
factsheet_national_params <- read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/master/dictionaries/dict_vars.csv") %>%
filter(!is.na(national_dropdown_label)) %>%
select(starts_with("is_"),
"national_variable_selector" = var_readable,
national_dropdown_label) %>%
pivot_longer(cols = -c(national_variable_selector,
national_dropdown_label),
names_to = "national_category_selector") %>%
filter(value == TRUE) %>%
select(national_category_selector,
national_variable_selector,
national_dropdown_label) %>%
group_by(national_dropdown_label) %>%
slice(1) %>%
ungroup() %>%
mutate("output_file" = stringr::str_c(here(), "/factsheet_national/output_files/",
national_dropdown_label, ".html"),
"params" = pmap(list(national_category_selector,
national_variable_selector),
~list(national_category_selector = ..1,
national_variable_selector = ..2))) %>%
filter(national_variable_selector %in% c("pop_total",
"pwd_commute_car_alone_pct",
"pwd_commute_public_pct"))
# Walk through dataframe, create documents
factsheet_national_params %>%
select(output_file, params) %>%
pwalk(rmarkdown::render,
input = stringr::str_c(here(), "/factsheet_national/factsheet_national.Rmd"))
