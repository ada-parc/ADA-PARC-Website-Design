left_join(places_tracts %>%
select(place_GEOID, STATEFP, COUNTYFP,
tract_GEOID),
by = "place_GEOID") %>%
# Counties joined to correct tracts
left_join(places_counties %>%
select(place_GEOID, STATEFP, COUNTYFP,
county_GEOID, county_NAME,
"place_county_overlap_pct" = overlap_pct),
by = c("place_GEOID", "STATEFP", "COUNTYFP"))
# Unique join of above
places_counties_tracts <- places_sf %>%
st_drop_geometry() %>%
select(place_GEOID) %>%
# Clean place name
left_join(dict_places %>%
rename("place_GEOID" = GEOID),
by = "place_GEOID") %>%
# Tracts
left_join(places_tracts %>%
select(place_GEOID, STATEFP, COUNTYFP,
tract_GEOID, tract_NAME,
"place_tract_overlap_pct" = overlap_pct),
by = "place_GEOID") %>%
# Counties joined to correct tracts
left_join(places_counties %>%
select(place_GEOID, STATEFP, COUNTYFP,
county_GEOID, county_NAME,
"place_county_overlap_pct" = overlap_pct),
by = c("place_GEOID", "STATEFP", "COUNTYFP"))
View(places_counties_tracts)
# Unique join of above
places_counties_tracts <- places_sf %>%
st_drop_geometry() %>%
select(place_GEOID) %>%
# Clean place name
left_join(dict_places %>%
rename("place_GEOID" = GEOID),
by = "place_GEOID") %>%
# Tracts
left_join(places_tracts %>%
select(place_GEOID, STATEFP, COUNTYFP,
tract_GEOID, tract_NAME,
"tract_place_overlap_pct" = overlap_pct),
by = "place_GEOID") %>%
# Counties joined to correct tracts
left_join(places_counties %>%
select(place_GEOID, STATEFP, COUNTYFP,
county_GEOID, county_NAME,
"county_place_overlap_pct" = overlap_pct),
by = c("place_GEOID", "STATEFP", "COUNTYFP"))
places_counties_tracts <- places_counties_tracts %>%
select(place_GEOID, metro_state,
starts_with("county_"), starts_with("tract_"))
dict_places_counties_tracts <- places_counties_tracts
dict_location_crosswalk <- dict_places_counties_tracts
# Places
write_csv(dict_places, "dict_places.txt")
# Tracts
st_write(tracts_sf, "tracts.geojson", delete_dsn = TRUE)
# Places, counties, tracts crosswalk
write_csv(dict_location_crosswalk, "dict_location_crosswalk.txt")
# Setup -------------------------------------------------------------------
# Libraries
library(tidyverse);library(readxl)
library(tigris);library(sf)
library(geojsonsf);library(mongolite)
# Set working dictionary, options
setwd(here::here())
options(stringsAsFactors = FALSE, scipen = 999,
dplyr.summarise.inform = FALSE, tigris_use_cache = TRUE)
# FIPS codes --------------------------------------------------------------
# All states and counties
fips_codes_tidy <- force(fips_codes)
View(fips_codes_tidy)
get_estimates(geography = "place",
product = "population",
geometry = TRUE,
output = "wide")
library(tidyverse);library(readxl)
library(tidycensus);library(tigris);library(sf)
library(geojsonsf);library(mongolite)
# Set working dictionary, options
setwd(here::here())
options(stringsAsFactors = FALSE, scipen = 999,
dplyr.summarise.inform = FALSE, tigris_use_cache = TRUE)
# Libraries
library(tidyverse);library(readxl)
library(tidycensus);library(tigris);library(sf)
library(geojsonsf);library(mongolite)
# Set working dictionary, options
setwd(here::here())
options(stringsAsFactors = FALSE, scipen = 999,
dplyr.summarise.inform = FALSE, tigris_use_cache = TRUE)
# Load API keys
api_key_census <- config::get("api_key_census")
get_estimates(geography = "place",
product = "population",
geometry = TRUE,
output = "wide")
places_sf <- pmap_df(.l = fips_codes_tidy %>%
filter(as.numeric(state_code) %in% c(1:56, 72)) %>%
select(state_code) %>%
distinct(),
.f = ~(get_estimates(geography = "place",
product = "population",
state = ..1,
geometry = TRUE,
output = "wide"))) %>%
rename("place_GEOID" = GEOID,
"place_NAME" = NAME)
test <- get_estimates(geography = "place",
product = "population",
geometry = TRUE,
output = "wide")
cities_acs_places_ref <- get_estimates(geography = "place",
product = "population",
geometry = FALSE,
output = "wide")
View(cities_acs_places_ref)
places_pop_est <- get_estimates(geography = "place",
product = "population",
geometry = FALSE,
output = "wide")
View(places_pop_est)
places_sf <- pmap_df(.l = fips_codes_tidy %>%
filter(as.numeric(state_code) %in% c(1:56, 72)) %>%
select(state_code) %>%
distinct(),
.f = ~(tigris::places(state = ..1,
cb = TRUE,
class = "sf") %>%
rename("place_GEOID" = GEOID,
"place_NAME" = NAME))) %>%
select(STATEFP, PLACEFP, place_GEOID, place_NAME) %>%
mutate("place_area" = st_area(.),
"place_area_num" = as.numeric(place_area)) %>%
relocate(geometry, .after = last_col())
# Get population estimates for lookup
places_pop_est <- get_estimates(geography = "place",
product = "population",
geometry = FALSE,
output = "wide")
# Clean for lookup
dict_places <- places_sf %>%
st_drop_geometry() %>%
# Metro/State names
left_join(fips_codes_tidy %>%
select(state_code, state) %>%
distinct(),
by = c("STATEFP" = "state_code")) %>%
# Basic scrubbing
mutate("metro_state" = paste0(place_NAME, ", ", state) %>%
str_replace_all(.,
pattern = " (city|village|municipality|town|city and borough|borough|(city|((unified|consolidated|metro|metropolitan) government)) \\(balance\\)|\\(balance\\)), ",
replacement = ", ")) %>%
# Individual cases
select("GEOID" = place_GEOID, metro_state) %>%
mutate("metro_state" = case_when(GEOID == "3651000" ~
"New York City, NY",
GEOID == "4752006" ~
"Nashville, TN",
GEOID == "1571550" ~
"Honolulu, HI",
GEOID == "2146027" ~
"Lexington, KY",
GEOID == "2148006" ~
"Louisville, KY",
TRUE ~
metro_state)) %>%
# Population to order list
left_join(places_pop_est %>%
select(GEOID, POP))
View(dict_places)
# Places
write_csv(dict_places, "dict_places.txt")
tracts_sf <- geojsonsf::geojson_sf("tracts.geojson")
st_write(tracts_sf, "tracts.topojson", delete_dsn = TRUE)
st_write(tracts_sf, "geo_tract/geo_tract.shp", delete_dsn = TRUE)
st_write(tracts_sf, "geo_tract/geo_tract.shp", delete_dsn = TRUE)
cities_acs_places_ref <- read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/blob/national-tile-map/dict_places.txt")
# Load Census places from GitHub repo
cities_acs_places_ref <- read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/national-tile-map/dict_places.txt?token=AGLBDE7TKKDH2T76FNSXUDTAG3U2O")
tibble::deframe(cities_acs_places_ref %>%
arrange(desc(POP)) %>%
select(metro_state, GEOID))
places_sf <- pmap_df(.l = fips_codes_tidy %>%
filter(as.numeric(state_code) %in% c(1:56, 72)) %>%
select(state_code) %>%
distinct(),
.f = ~(tigris::places(state = ..1,
cb = TRUE,
class = "sf") %>%
rename("place_GEOID" = GEOID,
"place_NAME" = NAME))) %>%
select(STATEFP, PLACEFP, place_GEOID, place_NAME) %>%
mutate("place_area" = st_area(.),
"place_area_num" = as.numeric(place_area)) %>%
relocate(geometry, .after = last_col())
# Get population estimates for lookup
places_pop_est <- get_estimates(geography = "place",
product = "population",
geometry = FALSE,
output = "wide")
# Libraries
library(tidyverse);library(readxl)
library(tidycensus);library(tigris);library(sf)
library(geojsonsf);library(mongolite)
# Set working dictionary, options
setwd(here::here())
options(stringsAsFactors = FALSE, scipen = 999,
dplyr.summarise.inform = FALSE, tigris_use_cache = TRUE)
# Load API keys
api_key_census <- config::get("api_key_census")
# FIPS codes --------------------------------------------------------------
# All states and counties
fips_codes_tidy <- force(fips_codes)
# Places/Cities lookup ----------------------------------------------------
# Get spatial footprint of cities/places
# Remove US Outlying Islands/US Virgin Islands (c(1:56, 72))
places_sf <- pmap_df(.l = fips_codes_tidy %>%
filter(as.numeric(state_code) %in% c(1:56, 72)) %>%
select(state_code) %>%
distinct(),
.f = ~(tigris::places(state = ..1,
cb = TRUE,
class = "sf") %>%
rename("place_GEOID" = GEOID,
"place_NAME" = NAME))) %>%
select(STATEFP, PLACEFP, place_GEOID, place_NAME) %>%
mutate("place_area" = st_area(.),
"place_area_num" = as.numeric(place_area)) %>%
relocate(geometry, .after = last_col())
# Get population estimates for lookup
places_pop_est <- get_estimates(geography = "place",
product = "population",
geometry = FALSE,
output = "wide")
# Clean for lookup
dict_places <- places_sf %>%
st_drop_geometry() %>%
# Metro/State names
left_join(fips_codes_tidy %>%
select(state_code, state) %>%
distinct(),
by = c("STATEFP" = "state_code")) %>%
# Basic scrubbing
mutate("metro_state" = paste0(place_NAME, ", ", state) %>%
str_replace_all(.,
pattern = " (city|village|municipality|town|city and borough|borough|(city|((unified|consolidated|metro|metropolitan) government)) \\(balance\\)|\\(balance\\)), ",
replacement = ", ")) %>%
# Individual cases
select("GEOID" = place_GEOID, "NAME" = place_NAME, metro_state) %>%
mutate("metro_state" = case_when(GEOID == "3651000" ~
"New York City, NY",
GEOID == "4752006" ~
"Nashville, TN",
GEOID == "1571550" ~
"Honolulu, HI",
GEOID == "2146027" ~
"Lexington, KY",
GEOID == "2148006" ~
"Louisville, KY",
TRUE ~
metro_state)) %>%
# Population to order list
left_join(places_pop_est %>%
select(GEOID, POP, DENSITY),
by = "GEOID")
# Places
write_csv(dict_places, "dict_places.txt")
View(places_pop_est)
View(places_sf)
# Get spatial footprint of cities/places
# Remove US Outlying Islands/US Virgin Islands (c(1:56, 72))
places_sf <- pmap_df(.l = fips_codes_tidy %>%
filter(as.numeric(state_code) %in% c(1:56, 72)) %>%
select(state_code) %>%
distinct(),
.f = ~(tigris::places(state = ..1,
cb = TRUE,
class = "sf") %>%
rename("place_GEOID" = GEOID,
"place_NAME" = NAME))) %>%
select(STATEFP, PLACEFP, place_GEOID, place_NAME) %>%
mutate("place_area" = st_area(.),
"place_area_num" = as.numeric(place_area)) %>%
relocate(geometry, .after = last_col())
places_sf %>%
st_drop_geometry() %>%
select(GEOID)
# Population to order list
left_join(places_pop_est,
by = "GEOID")
places_sf %>%
st_drop_geometry() %>%
select("GEOID" = place_GEOID) %>%
# Population to order list
left_join(places_pop_est,
by = "GEOID")
dict_places <- places_sf %>%
st_drop_geometry() %>%
select(STATEFP, "GEOID" = place_GEOID) %>%
# Population to order list
left_join(places_pop_est,
by = "GEOID") %>%
# Metro/State names
left_join(fips_codes_tidy %>%
select(state_code, state) %>%
distinct(),
by = c("STATEFP" = "state_code")) %>%
# Basic scrubbing
mutate("metro_state" = paste0(NAME, ", ", state) %>%
str_replace_all(.,
pattern = " (city|village|municipality|town|city and borough|borough|(city|((unified|consolidated|metro|metropolitan) government)) \\(balance\\)|\\(balance\\)), ",
replacement = ", ")) %>%
# Individual cases
mutate("metro_state" = case_when(GEOID == "3651000" ~
"New York City, NY",
GEOID == "4752006" ~
"Nashville, TN",
GEOID == "1571550" ~
"Honolulu, HI",
GEOID == "2146027" ~
"Lexington, KY",
GEOID == "2148006" ~
"Louisville, KY",
TRUE ~
metro_state)) %>%
select("GEOID" = place_GEOID, "NAME" = place_NAME, metro_state,
POP, DENSITY)
dict_places <- places_sf %>%
st_drop_geometry() %>%
select(STATEFP, "GEOID" = place_GEOID) %>%
# Population to order list
left_join(places_pop_est,
by = "GEOID") %>%
# Metro/State names
left_join(fips_codes_tidy %>%
select(state_code, state) %>%
distinct(),
by = c("STATEFP" = "state_code")) %>%
# Basic scrubbing
mutate("metro_state" = paste0(NAME, ", ", state) %>%
str_replace_all(.,
pattern = " (city|village|municipality|town|city and borough|borough|(city|((unified|consolidated|metro|metropolitan) government)) \\(balance\\)|\\(balance\\)), ",
replacement = ", ")) %>%
# Individual cases
mutate("metro_state" = case_when(GEOID == "3651000" ~
"New York City, NY",
GEOID == "4752006" ~
"Nashville, TN",
GEOID == "1571550" ~
"Honolulu, HI",
GEOID == "2146027" ~
"Lexington, KY",
GEOID == "2148006" ~
"Louisville, KY",
TRUE ~
metro_state)) %>%
select(GEOID, NAME, metro_state,
POP, DENSITY)
# Places
write_csv(dict_places, "dictionaries/dict_places.txt")
cities_acs_places_ref <- read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/national-tile-map/dictionaries/dict_places.txt?token=AGLBDE7TKKDH2T76FNSXUDTAG3U2O")
cities_acs_places_ref <- read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/national-tile-map/dictionaries/dict_places.txt?token=AGLBDEZ3AAV7MV7JXHW7ELLAG3XGQ")
cities_acs_places_ref %>%
separate(metro_state,
sep = ", ",
into = c("clean_city", "clean_state")) %>%
select("census_GEOID" = GEOID, "census_NAME" = NAME,
clean_city, clean_state,
"population" = POP, "density" = DENSITY)
places_sf %>%
st_drop_geometry() %>%
select(STATEFP, "GEOID" = place_GEOID) %>%
# Population to order list
left_join(places_pop_est,
by = "GEOID") %>%
# Metro/State names
left_join(fips_codes_tidy %>%
select(state_code, state) %>%
distinct(),
by = c("STATEFP" = "state_code"))
dict_places <- places_sf %>%
st_drop_geometry() %>%
select(STATEFP, "GEOID" = place_GEOID) %>%
# Population to order list
left_join(places_pop_est,
by = "GEOID") %>%
# Metro/State names
left_join(fips_codes_tidy %>%
select(state_code, state) %>%
distinct(),
by = c("STATEFP" = "state_code")) %>%
# Basic scrubbing
mutate("metro_state" = paste0(str_remove(NAME, ",.*$"),
", ", state) %>%
str_replace_all(.,
pattern = " (city|village|municipality|town|city and borough|borough|(city|((unified|consolidated|metro|metropolitan) government)) \\(balance\\)|\\(balance\\)), ",
replacement = ", ")) %>%
# Individual cases
mutate("metro_state" = case_when(GEOID == "3651000" ~
"New York City, NY",
GEOID == "4752006" ~
"Nashville, TN",
GEOID == "1571550" ~
"Honolulu, HI",
GEOID == "2146027" ~
"Lexington, KY",
GEOID == "2148006" ~
"Louisville, KY",
TRUE ~
metro_state)) %>%
select(GEOID, NAME, metro_state,
POP, DENSITY)
# Places
write_csv(dict_places, "dictionaries/dict_places.txt")
# Load Census places from GitHub repo
cities_acs_places_ref <- read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/national-tile-map/dictionaries/dict_places.txt?token=AGLBDE3JMXVTYDBOZ6CYFUDAG3YCM")
cities_acs_places_ref %>%
separate(metro_state,
sep = ", ",
into = c("clean_city", "clean_state")) %>%
select("census_GEOID" = GEOID, "census_NAME" = NAME,
clean_city, clean_state,
"population" = POP, "density" = DENSITY)
test <- read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/national-tile-map/dictionaries/dict_location_crosswalk.txt?token=AGLBDE7J3YJYQSCAA7QVO5TAG3ZNY") %>%
filter(overlap_pct > 0)
test <- read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/national-tile-map/dictionaries/dict_location_crosswalk.txt?token=AGLBDE7J3YJYQSCAA7QVO5TAG3ZNY")
test <- read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/national-tile-map/dictionaries/dict_location_crosswalk.txt?token=AGLBDE7J3YJYQSCAA7QVO5TAG3ZNY") %>%
filter(county_place_overlap_pct > 0)
test %>% filter(metro_state %in% c("Chicago, IL", "Flint, MI"))
test %>% filter(metro_state %in% c("Chicago, IL", "Flint, MI")) %>% arrange(desc(metro_state))
tracts_places_counties <- test %>% filter(metro_state %in% c("Chicago, IL", "Flint, MI"))
tracts_places_counties %>%
mutate("STATEFP" = str_sub(county_GEOID, 1, 2),
"COUNTYFP" = str_sub(county_GEOID, 3, 5)) %>%
select(STATEFP, COUNTYFP) %>%
distinct()
pmap_df(.l = tracts_places_counties %>%
mutate("STATEFP" = str_sub(county_GEOID, 1, 2),
"COUNTYFP" = str_sub(county_GEOID, 3, 5)) %>%
select(STATEFP, COUNTYFP) %>%
distinct(),
.f = ~(get_acs(geography = "tract",
year = 2019,
variables = c("S0101_C01_006",
"S0101_C01_007",
"S0101_C01_008"),
survey = "acs5",
state = ..1,
county = ..2,
geometry = FALSE,
wide = TRUE)))
View(test)
tracts_places_counties %>%
mutate("STATEFP" = str_sub(county_GEOID, 1, 2),
"COUNTYFP" = str_sub(county_GEOID, 3, 5)) %>%
select(STATEFP, COUNTYFP) %>%
distinct()
tracts_places_counties %>%
mutate("STATEFP" = str_sub(county_GEOID, 1, 2),
"COUNTYFP" = str_sub(county_GEOID, 3, 5)) %>%
select(STATEFP, COUNTYFP) %>%
distinct() %>%
head(1)
test <- pmap_df(.l = tracts_places_counties %>%
mutate("STATEFP" = str_sub(county_GEOID, 1, 2),
"COUNTYFP" = str_sub(county_GEOID, 3, 5)) %>%
select(STATEFP, COUNTYFP) %>%
distinct() %>%
head(2),
.f = ~(tigris::tracts(state = ..1,
county = ..2,
cb = TRUE,
class = "sf") %>%
select(GEOID) %>%
filter(GEOID %in% tracts_places_counties$tract_GEOID)))
View(test)
test <- pmap_df(.l = tracts_places_counties %>%
mutate("STATEFP" = str_sub(county_GEOID, 1, 2),
"COUNTYFP" = str_sub(county_GEOID, 3, 5)) %>%
select(STATEFP, COUNTYFP) %>%
distinct() %>%
head(2),
.f = ~(tigris::tracts(state = ..1,
county = ..2,
cb = TRUE,
class = "sf") %>%
# select(GEOID) %>%
filter(GEOID %in% tracts_places_counties$tract_GEOID)))
View(test)
test <- read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/national-tile-map/dictionaries/dict_location_crosswalk.txt?token=AGLBDE7J3YJYQSCAA7QVO5TAG3ZNY")
read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/national-tile-map/dictionaries/dict_location_crosswalk.txt?token=AGLBDE6NW5BIDXOISVPLRWLAIZKRK")
readr::read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/national-tile-map/dictionaries/dict_location_crosswalk.txt?token=AGLBDE6NW5BIDXOISVPLRWLAIZKRK")
# Libraries
library(tidyverse);library(readxl)
library(tigris);library(sf);library(janitor)
library(tidycensus);library(viridis);library(tmap)
library(RPostgres);library(RPostgreSQL);library(DBI)
library(geojsonsf);library(mongolite);library(config)
library(shiny);library(shinyjs);library(shinyWidgets)
# Set working dictionary, options
setwd(here::here())
options(stringsAsFactors = FALSE, scipen = 999,
dplyr.summarise.inform = FALSE, tigris_use_cache = TRUE)
knitr::opts_chunk$set(echo = FALSE)
# Load API keys and database connection information
source("functions.R", local = TRUE)
read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/national-tile-map/dictionaries/dict_places.txt?token=AGLBDE7ABUTQJ56SNQCENODAIZKXO")
cities_acs_places_ref <- read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/national-tile-map/dictionaries/dict_places.txt?token=AGLBDE3JMXVTYDBOZ6CYFUDAG3YCM")
