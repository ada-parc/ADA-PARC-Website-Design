# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
# Static check
altText(demographics,
national_variable_selector_static)
# Static check
altText(demographics,
national_variable_selector_static)
# Packages
library(tidyverse)
library(sf)
library(geofacet)
library(leaflet); library(leaflet.extras);
library(htmltools)
library(shiny)
library(shinyWidgets)
library(flexdashboard)
library(colourpicker)
library(gghighlight)
library(knitr)
library(kableExtra)
library(scales)
library(hrbrthemes)
library(ggthemes)
library(extrafont)
library(plotly)
library(mongolite)
library(here)
options(scipen = 999999)
# Set this to host_prod or host_dev
host_name = "host_dev"
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
# Load variable dictionary for relating tables, variable codes, and readable values
dict_vars <- fun_pull_mongo_data(tables = "dict_vars", host_name = host_name)
### ------------------------
### National data import and clean
###
# This script takes the national_* objects and transforms them
# into the final datasets for mapping
source(here("national_import.R"), local = TRUE)
# Packages
library(tidyverse)
library(sf)
library(geofacet)
library(leaflet); library(leaflet.extras);
library(htmltools)
library(shiny)
library(shinyWidgets)
library(flexdashboard)
library(colourpicker)
library(gghighlight)
library(knitr)
library(kableExtra)
library(scales)
library(hrbrthemes)
library(ggthemes)
library(extrafont)
library(plotly)
library(mongolite)
library(here)
options(scipen = 999999)
# Set this to host_prod or host_dev
host_name = "host_dev"
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
# Load variable dictionary for relating tables, variable codes, and readable values
dict_vars <- fun_pull_mongo_data(tables = "dict_vars", host_name = host_name)
### ------------------------
### National data import and clean
###
# This script takes the national_* objects and transforms them
# into the final datasets for mapping
source(here("national_import.R"), local = TRUE)
# Packages
library(tidyverse)
library(sf)
library(geofacet)
library(leaflet); library(leaflet.extras);
library(htmltools)
library(shiny)
library(shinyWidgets)
library(flexdashboard)
library(colourpicker)
library(gghighlight)
library(knitr)
library(kableExtra)
library(scales)
library(hrbrthemes)
library(ggthemes)
library(extrafont)
library(plotly)
library(mongolite)
library(here)
options(scipen = 999999)
# Set this to host_prod or host_dev
host_name = "host_dev"
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
# Load variable dictionary for relating tables, variable codes, and readable values
dict_vars <- fun_pull_mongo_data(tables = "dict_vars", host_name = host_name)
### ------------------------
### National data import and clean
###
# This script takes the national_* objects and transforms them
# into the final datasets for mapping
source(here("national_import.R"), local = TRUE)
# Packages
library(tidyverse)
library(sf)
library(geofacet)
library(leaflet); library(leaflet.extras);
library(htmltools)
library(shiny)
library(shinyWidgets)
library(flexdashboard)
library(colourpicker)
library(gghighlight)
library(knitr)
library(kableExtra)
library(scales)
library(hrbrthemes)
library(ggthemes)
library(extrafont)
library(plotly)
library(mongolite)
library(here)
options(scipen = 999999)
# Set this to host_prod or host_dev
host_name = "host_dev"
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
# Load variable dictionary for relating tables, variable codes, and readable values
dict_vars <- fun_pull_mongo_data(tables = "dict_vars", host_name = host_name)
### ------------------------
### National data import and clean
###
# This script takes the national_* objects and transforms them
# into the final datasets for mapping
source(here("national_import.R"), local = TRUE)
# Packages
library(tidyverse)
library(sf)
library(geofacet)
library(leaflet); library(leaflet.extras);
library(htmltools)
library(shiny)
library(shinyWidgets)
library(flexdashboard)
library(colourpicker)
library(gghighlight)
library(knitr)
library(kableExtra)
library(scales)
library(hrbrthemes)
library(ggthemes)
library(extrafont)
library(plotly)
library(mongolite)
library(here)
options(scipen = 999999)
# Set this to host_prod or host_dev
host_name = "host_dev"
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
# Load variable dictionary for relating tables, variable codes, and readable values
dict_vars <- fun_pull_mongo_data(tables = "dict_vars", host_name = host_name)
### ------------------------
### National data import and clean
###
# This script takes the national_* objects and transforms them
# into the final datasets for mapping
source(here("national_import.R"), local = TRUE)
national_variable_selector_static <- tibble::deframe(
dict_vars %>%
filter(is_demographics == TRUE,
var_readable %in% (
demographics %>%
select(-c(GEOID, NAME, ABBR)) %>%
names()
),
!is.na(national_dropdown_label)) %>%
select(national_dropdown_label, var_readable)) %>%
head(1)
national_variable_selector_static
altText(demographics,
national_variable_selector_static)
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
altText(demographics,
national_variable_selector_static)
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
# Load variable dictionary for relating tables, variable codes, and readable values
dict_vars <- fun_pull_mongo_data(tables = "dict_vars", host_name = host_name)
### ------------------------
### National data import and clean
###
# This script takes the national_* objects and transforms them
# into the final datasets for mapping
source(here("national_import.R"), local = TRUE)
# Static check
altText(demographics,
national_variable_selector_static)
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
national_variable_selector_static <- tibble::deframe(
dict_vars %>%
filter(is_demographics == TRUE,
var_readable %in% (
demographics %>%
select(-c(GEOID, NAME, ABBR)) %>%
names()
),
!is.na(national_dropdown_label)) %>%
select(national_dropdown_label, var_readable)) %>%
head(1)
altText(demographics,
national_variable_selector_static)
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
# Load variable dictionary for relating tables, variable codes, and readable values
dict_vars <- fun_pull_mongo_data(tables = "dict_vars", host_name = host_name)
### ------------------------
### National data import and clean
###
# This script takes the national_* objects and transforms them
# into the final datasets for mapping
source(here("national_import.R"), local = TRUE)
altText(demographics,
national_variable_selector_static)
altText(demographics,
national_variable_selector_static) %>%
str_c(collapse = "; ")
altText(demographics,
national_variable_selector_static) %>%
unlist()
altText(demographics,
national_variable_selector_static) %>%
flatten()
altText(demographics,
national_variable_selector_static) %>%
unnest()
altText(demographics,
national_variable_selector_static) %>%
unlist()
altText(demographics,
national_variable_selector_static) %>%
unlist(recursive = FALSE)
altText(demographics,
national_variable_selector_static) %>%
unlist(recursive = FALSE) %>%
flatten_chr()
altText(demographics,
national_variable_selector_static) %>%
unlist(recursive = FALSE) %>%
str_flatten()
altText(demographics,
national_variable_selector_static) %>%
# unlist(recursive = FALSE) %>%
str_flatten()
altText(demographics,
national_variable_selector_static) %>%
# unlist(recursive = FALSE) %>%
str_flatten(collapse = "; ")
altText(demographics,
national_variable_selector_static) %>%
# unlist(recursive = FALSE) %>%
str_flatten(collapse = "; ") %>%
as.character()
altText(demographics,
national_variable_selector_static) %>%
str()
altText(demographics,
national_variable_selector_static) %>%
# str() %>%
purrr::flatten()
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
# Load variable dictionary for relating tables, variable codes, and readable values
dict_vars <- fun_pull_mongo_data(tables = "dict_vars", host_name = host_name)
### ------------------------
### National data import and clean
###
# This script takes the national_* objects and transforms them
# into the final datasets for mapping
source(here("national_import.R"), local = TRUE)
altText(demographics,
national_variable_selector_static)
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
# Load variable dictionary for relating tables, variable codes, and readable values
dict_vars <- fun_pull_mongo_data(tables = "dict_vars", host_name = host_name)
### ------------------------
### National data import and clean
###
# This script takes the national_* objects and transforms them
# into the final datasets for mapping
source(here("national_import.R"), local = TRUE)
altText(demographics,
national_variable_selector_static)
labels
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
altText(demographics,
national_variable_selector_static)
test <- altText(demographics,
national_variable_selector_static)
test
test %>% as.list()
test %>% pluck()
test %>% pluck() %>% pluck()
test %>% pluck() %>% flatten()
test %>% pluck() %>% unlist()
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
altText(demographics,
national_variable_selector_static)
test %>% as_vector()
test
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
test %>% as_vector()
altText(demographics,
national_variable_selector_static)
test %>% map_chr([[1]])
test %>% map_chr([1]])
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
altText(demographics,
national_variable_selector_static)
test <- altText(demographics,
national_variable_selector_static)
test2 <- test[-1]
test[-1] %>%
flatten_chr()
test[-1] %>%
str_flatten(collapse = "; ")
test2 %>%
str_flatten(collapse = "; ")
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
altText(demographics,
national_variable_selector_static)
national_variable_selector_static
sym(variable)
dict_vars %>%
filter(!is.na(national_dropdown_label),
var_readable == !!sym("pop_total"))
dict_vars %>%
filter(!is.na(national_dropdown_label),
var_readable == sym("pop_total"))
geofacet::get_grid_names("us_census_div_grid1")
# ====================
# Setup
# ====================
# Packages
library(tidyverse)
library(tigris); library(sf)
library(geofacet)
library(leaflet); library(leaflet.extras);
library(htmltools)
library(shiny)
library(shinyWidgets)
library(flexdashboard)
library(colourpicker)
library(gghighlight)
library(knitr)
library(kableExtra)
library(scales)
library(hrbrthemes)
library(ggthemes)
library(extrafont)
library(plotly)
library(mongolite)
library(here)
options(scipen = 999999,
tigris_use_cache = TRUE)
# Set this to host_prod or host_dev
host_name = "host_dev"
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
# Load variable dictionary for relating tables, variable codes, and readable values
dict_vars <- fun_pull_mongo_data(tables = "dict_vars", host_name = host_name)
### ------------------------
### National data import and clean
###
# This script takes the national_* objects and transforms them
# into the final datasets for mapping
source(here("national_import.R"), local = TRUE)
national_variable_selector_static <- tibble::deframe(
dict_vars %>%
filter(is_demographics == TRUE,
var_readable %in% (
demographics %>%
select(-c(GEOID, NAME, ABBR)) %>%
names()
),
!is.na(national_dropdown_label)) %>%
select(national_dropdown_label, var_readable)) %>%
head(1)
national_variable_selector_static
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
render_geographic_map(demographics,
national_variable_selector_static,
"YlOrBr")
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
render_geographic_map(demographics,
national_variable_selector_static,
"YlOrBr")
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
render_geographic_map(demographics,
national_variable_selector_static,
"YlOrBr")
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
render_geographic_map(demographics,
national_variable_selector_static,
"YlOrBr")
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
render_geographic_map(demographics,
national_variable_selector_static,
"YlOrBr")
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
render_geographic_map(demographics,
national_variable_selector_static,
"YlOrBr")
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
render_geographic_map(demographics,
national_variable_selector_static,
"YlOrBr")
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
render_geographic_map(demographics,
national_variable_selector_static,
"YlOrBr")
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
test <- render_geographic_map(demographics,
national_variable_selector_static,
"YlOrBr")
View(test)
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
test <- render_geographic_map(demographics,
national_variable_selector_static,
"YlOrBr")
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
test <- render_geographic_map(demographics,
national_variable_selector_static,
"YlOrBr")
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
test <- render_geographic_map(demographics,
national_variable_selector_static,
"YlOrBr")
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
test <- render_geographic_map(demographics,
national_variable_selector_static,
"YlOrBr")
# ====================
# Setup
# ====================
# Packages
library(tidyverse)
library(tigris); library(sf)
library(geofacet)
library(leaflet); library(leaflet.extras);
library(tmap); library(tmaptools)
library(htmltools)
library(shiny)
library(shinyWidgets)
library(flexdashboard)
library(colourpicker)
library(gghighlight)
library(knitr)
library(kableExtra)
library(scales)
library(hrbrthemes)
library(ggthemes)
library(extrafont)
library(plotly)
library(mongolite)
library(here)
options(scipen = 999999,
tigris_use_cache = TRUE)
# Set this to host_prod or host_dev
host_name = "host_dev"
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
# Load variable dictionary for relating tables, variable codes, and readable values
dict_vars <- fun_pull_mongo_data(tables = "dict_vars", host_name = host_name)
### ------------------------
### National data import and clean
###
# This script takes the national_* objects and transforms them
# into the final datasets for mapping
source(here("national_import.R"), local = TRUE)
tibble::deframe(
dict_vars %>%
filter(!is.na(national_dropdown_label)) %>%
select(national_dropdown_label, var_readable))
