knitr::opts_chunk$set(echo = FALSE)
# Load API keys and database connection information
source("functions.R", local = TRUE)
mongo_conn <- mongo_connect(host_name = config::get("host_dev"),
collection_name = .y,
database_name = "ADA-PARC")
mongo_conn <- mongo_connect(host_name = config::get("host_dev"),
collection_name = "test",
database_name = "ADA-PARC")
# Libraries
library(tidyverse);library(readxl)
library(tigris);library(sf);library(janitor)
library(tidycensus);library(viridis);library(tmap)
library(RPostgres);library(RPostgreSQL);library(DBI)
library(geojsonsf);library(mongolite);library(config)
library(shiny);library(shinyjs);library(shinyWidgets)
# Set working document, options
setwd(here::here())
options(stringsAsFactors = FALSE, scipen = 999,
dplyr.summarise.inform = FALSE, tigris_use_cache = TRUE)
knitr::opts_chunk$set(echo = FALSE)
# Load API keys and database connection information
source("functions.R", local = TRUE)
# Libraries
library(tidyverse);library(readxl)
library(tigris);library(sf);library(janitor)
library(tidycensus);library(viridis);library(tmap)
library(RPostgres);library(RPostgreSQL);library(DBI)
library(geojsonsf);library(mongolite);library(config)
library(shiny);library(shinyjs);library(shinyWidgets)
# Set working document, options
setwd(here::here())
options(stringsAsFactors = FALSE, scipen = 999,
dplyr.summarise.inform = FALSE, tigris_use_cache = TRUE)
knitr::opts_chunk$set(echo = FALSE)
# Load API keys and database connection information
source("functions.R", local = TRUE)
cities_acs_places_selected <- read_csv("example_cities_geoid_upload.csv")
df <- pmap_df(.l = cities_acs_places_selected %>%
select(clean_state) %>%
distinct(),
.f = ~(get_acs(geography = "place",
year = 2019,
variables = c("S0101_C01_006",
"S0101_C01_007",
"S0101_C01_008",
"S0102_C01_006"),
survey = "acs5",
state = ..1,
geometry = FALSE,
wide = TRUE) %>%
semi_join(cities_acs_places_selected,
by = "GEOID")))
cities_acs_places_selected <- read_csv("example_cities_geoid_upload.csv") %>%
rename("GEOID" = 1)
df <- pmap_df(.l = cities_acs_places_selected %>%
select(clean_state) %>%
distinct(),
.f = ~(get_acs(geography = "place",
year = 2019,
variables = c("S0101_C01_006",
"S0101_C01_007",
"S0101_C01_008",
"S0102_C01_006"),
survey = "acs5",
state = ..1,
geometry = FALSE,
wide = TRUE) %>%
semi_join(cities_acs_places_selected,
by = "GEOID")))
cities_acs_places_selected <- read_csv("example_cities_geoid_upload.csv") %>%
rename("GEOID" = 1) %>%
mutate("GEOID" = as.character(GEOID))
df <- pmap_df(.l = cities_acs_places_selected %>%
select(clean_state) %>%
distinct(),
.f = ~(get_acs(geography = "place",
year = 2019,
variables = c("S0101_C01_006",
"S0101_C01_007",
"S0101_C01_008",
"S0102_C01_006"),
survey = "acs5",
state = ..1,
geometry = FALSE,
wide = TRUE) %>%
semi_join(cities_acs_places_selected,
by = "GEOID")))
View(df)
df_test <- df
df_test %>%
mutate("table_name" = gsub( "_.*$", "", name)) %>%
group_by(table_name) %>%
drop_na(estimate)
df_test %>%
mutate("table_name" = gsub( "_.*$", "", variable)) %>%
group_by(table_name) %>%
drop_na(estimate)
df_test %>%
mutate("table_name" = gsub( "_.*$", "", variable)) %>%
group_by(table_name) %>%
drop_na(estimate) %>%
distinct()
group_keys(df) %>%
mutate("table_name" = paste0("acs_", geo, "_", table_name))
group_keys(df) %>%
mutate("table_name" = paste0("acs_", "place", "_", table_name))
df <- df %>%
mutate("table_name" = gsub( "_.*$", "", variable)) %>%
group_by(table_name) %>%
drop_na(estimate) %>%
distinct()
group_keys(df) %>%
mutate("table_name" = paste0("acs_", "place", "_", table_name))
# Get table names to rename list elements
df_group_names <- group_keys(df) %>%
mutate("table_name" = paste0("acs_", "place", "_", table_name))
df_group_names
df_list <- df %>%
group_map( ~{ .x %>%
pivot_wider(names_from = variable, values_from = c(estimate, moe)) },
.keep = FALSE)
View(df_list)
# Reconfigure into list of dfs for database purposes
df_list <- df %>%
group_map( ~{ .x %>%
pivot_wider(names_from = variable,
names_glue = "{variable}_{.value}",
values_from = c(estimate, moe)) },
.keep = FALSE)
df_list <- df_list %>%
setNames(df_group_names$table_name)
# Libraries
library(tidyverse);library(readxl)
library(tigris);library(sf);library(janitor)
library(tidycensus);library(viridis);library(tmap)
library(RPostgres);library(RPostgreSQL);library(DBI)
library(geojsonsf);library(mongolite);library(config)
library(shiny);library(shinyjs);library(shinyWidgets)
# Set working document, options
setwd(here::here())
options(stringsAsFactors = FALSE, scipen = 999,
dplyr.summarise.inform = FALSE, tigris_use_cache = TRUE)
knitr::opts_chunk$set(echo = FALSE)
# Load API keys and database connection information
source("functions.R", local = TRUE)
config::get("host_dev")
# Setup -------------------------------------------------------------------
# Libraries
library(tidyverse);library(readxl)
library(tigris);library(sf)
library(geojsonsf);library(mongolite)
# Set working dictionary, options
setwd(here::here())
options(stringsAsFactors = FALSE, scipen = 999,
dplyr.summarise.inform = FALSE, tigris_use_cache = TRUE)
# FIPS codes --------------------------------------------------------------
# All states and counties
fips_codes_tidy <- force(fips_codes)
# Places/Cities lookup ----------------------------------------------------
places_sf <- pmap_df(.l = fips_codes_tidy %>%
filter(as.numeric(state_code) == 17) %>%
select(state_code) %>%
distinct(),
.f = ~(tigris::places(state = ..1,
cb = TRUE,
class = "sf") %>%
rename("place_GEOID" = GEOID,
"place_NAME" = NAME)))
View(places_sf)
View(fips_codes_tidy)
places_sf %>%
st_drop_geometry() %>%
left_join(fips_codes_tidy %>%
select(state_name, state) %>%
distinct(),
by = c("state_name"))
places_sf %>%
st_drop_geometry() %>%
left_join(fips_codes_tidy %>%
select(state_code, state) %>%
distinct(),
by = c("STATEFP" = "state_code"))
dict_places <- places_sf %>%
st_drop_geometry() %>%
left_join(fips_codes_tidy %>%
select(state_code, state) %>%
distinct(),
by = c("STATEFP" = "state_code")) %>%
mutate("metro_state" = paste0(city, ", ", state) %>%
str_replace_all(.,
pattern = " (city|village|municipality|town|city and borough|borough|(city|((unified|consolidated|metro|metropolitan) government)) \\(balance\\)|\\(balance\\)), ",
replacement = ", ")) %>%
mutate("metro_state" = case_when(GEOID == "3651000" ~
"New York City, NY",
GEOID == "4752006" ~
"Nashville, TN",
GEOID == "1571550" ~
"Honolulu, HI",
GEOID == "2146027" ~
"Lexington, KY",
GEOID == "2148006" ~
"Louisville, KY",
TRUE ~
metro_state)) %>%
select("GEOID" = place_GEOID, metro_state)
dict_places <- places_sf %>%
st_drop_geometry() %>%
left_join(fips_codes_tidy %>%
select(state_code, state) %>%
distinct(),
by = c("STATEFP" = "state_code")) %>%
mutate("metro_state" = paste0(place_NAME, ", ", state) %>%
str_replace_all(.,
pattern = " (city|village|municipality|town|city and borough|borough|(city|((unified|consolidated|metro|metropolitan) government)) \\(balance\\)|\\(balance\\)), ",
replacement = ", ")) %>%
mutate("metro_state" = case_when(GEOID == "3651000" ~
"New York City, NY",
GEOID == "4752006" ~
"Nashville, TN",
GEOID == "1571550" ~
"Honolulu, HI",
GEOID == "2146027" ~
"Lexington, KY",
GEOID == "2148006" ~
"Louisville, KY",
TRUE ~
metro_state)) %>%
select("GEOID" = place_GEOID, metro_state)
places_sf %>%
st_drop_geometry() %>%
left_join(fips_codes_tidy %>%
select(state_code, state) %>%
distinct(),
by = c("STATEFP" = "state_code"))
places_sf %>%
st_drop_geometry() %>%
left_join(fips_codes_tidy %>%
select(state_code, state) %>%
distinct(),
by = c("STATEFP" = "state_code")) %>%
mutate("metro_state" = paste0(place_NAME, ", ", state) %>%
str_replace_all(.,
pattern = " (city|village|municipality|town|city and borough|borough|(city|((unified|consolidated|metro|metropolitan) government)) \\(balance\\)|\\(balance\\)), ",
replacement = ", "))
# Get spatial footprint of cities/places
# Remove US Outlying Islands/US Virgin Islands (<=72)
places_sf <- pmap_df(.l = fips_codes_tidy %>%
filter(as.numeric(state_code) <= 72) %>%
select(state_code) %>%
distinct(),
.f = ~(tigris::places(state = ..1,
cb = TRUE,
class = "sf") %>%
rename("place_GEOID" = GEOID,
"place_NAME" = NAME))) %>%
select(STATEFP, PLACEFP, place_GEOID, place_NAME) %>%
mutate("place_area" = st_area(.),
"place_area_num" = as.numeric(place_area)) %>%
relocate(geometry, .after = last_col())
# Clean for lookup
dict_places <- places_sf %>%
st_drop_geometry() %>%
left_join(fips_codes_tidy %>%
select(state_code, state) %>%
distinct(),
by = c("STATEFP" = "state_code")) %>%
# Basic scrubbing
mutate("metro_state" = paste0(place_NAME, ", ", state) %>%
str_replace_all(.,
pattern = " (city|village|municipality|town|city and borough|borough|(city|((unified|consolidated|metro|metropolitan) government)) \\(balance\\)|\\(balance\\)), ",
replacement = ", ")) %>%
# Individual cases
select("GEOID" = place_GEOID, metro_state) %>%
mutate("metro_state" = case_when(GEOID == "3651000" ~
"New York City, NY",
GEOID == "4752006" ~
"Nashville, TN",
GEOID == "1571550" ~
"Honolulu, HI",
GEOID == "2146027" ~
"Lexington, KY",
GEOID == "2148006" ~
"Louisville, KY",
TRUE ~
metro_state))
View(dict_places)
places_counties <- st_intersection(places_sf,
counties_sf) %>%
mutate("overlap_area" = st_area(.),
"overlap_area_num" = as.numeric(overlap_area),
"overlap_pct" = overlap_area_num / place_area_num) %>%
filter(overlap_pct > 0) %>%
st_drop_geometry()
# Get spatial footprint of counties
# Remove US Outlying Islands/US Virgin Islands (<=72)
counties_sf <- pmap_df(.l = places_sf %>%
st_drop_geometry() %>%
select(STATEFP) %>%
distinct(),
.f = ~(tigris::counties(state = ..1,
cb = TRUE,
class = "sf") %>%
rename("county_GEOID" = GEOID,
"county_NAME" = NAME))) %>%
select(COUNTYFP, county_GEOID, county_NAME)
places_counties <- st_intersection(places_sf,
counties_sf) %>%
mutate("overlap_area" = st_area(.),
"overlap_area_num" = as.numeric(overlap_area),
"overlap_pct" = overlap_area_num / place_area_num) %>%
filter(overlap_pct > 0) %>%
st_drop_geometry()
View(places_counties)
tracts_sf <- pmap_df(.l = places_counties %>%
select(STATEFP, COUNTYFP) %>%
distinct(),
.f = ~(tigris::tracts(state = ..1,
county = ..2,
cb = TRUE,
class = "sf")))
mapview::mapview(tracts_sf,
color = "white",
col.regions = "blue",
alpha.regions = 0.4)
View(tracts_sf)
st_write(tracts_sf, "tracts.geojson", delete_dsn = TRUE)
test <- geojsonsf::geojson_sf("tracts.geojson")
rm(test)
tracts_sf <- tracts_sf %>%
select("tract_GEOID" = GEOID,
"tract_NAME" = NAME,
STATEFP, COUNTYFP) %>%
mutate("tract_area" = st_area(.),
"tract_area_num" = as.numeric(tract_area)) %>%
relocate(geometry, .after = last_col())
st_write(tracts_sf, "tracts.geojson", delete_dsn = TRUE)
View(places_counties)
places_sf <- pmap_df(.l = fips_codes_tidy %>%
filter(as.numeric(state_code) <= 72) %>%
select(state_code) %>%
distinct(),
.f = ~(tigris::places(state = ..1,
cb = TRUE,
class = "sf") %>%
rename("place_GEOID" = GEOID,
"place_NAME" = NAME))) %>%
select(place_GEOID, place_NAME, STATEFP, PLACEFP) %>%
mutate("place_area" = st_area(.),
"place_area_num" = as.numeric(place_area)) %>%
relocate(geometry, .after = last_col())
places_counties_tracts <- st_join(places_sf,
tracts_sf %>%
select(tract_GEOID)) %>%
st_drop_geometry() %>%
left_join(places_counties %>%
select(place_GEOID, STATEFP, COUNTYFP,
county_GEOID, county_NAME,
"place_county_overlap_pct" = overlap_pct),
by = c("place_GEOID", "STATEFP", "COUNTYFP"))
places_sf <- pmap_df(.l = fips_codes_tidy %>%
filter(as.numeric(state_code) <= 72) %>%
select(state_code) %>%
distinct(),
.f = ~(tigris::places(state = ..1,
cb = TRUE,
class = "sf") %>%
rename("place_GEOID" = GEOID,
"place_NAME" = NAME)))
places_counties_tracts <- st_join(places_sf,
tracts_sf %>%
select(tract_GEOID,
COUNTYFP)) %>%
st_drop_geometry() %>%
left_join(places_counties %>%
select(place_GEOID, STATEFP, COUNTYFP,
county_GEOID, county_NAME,
"place_county_overlap_pct" = overlap_pct),
by = c("place_GEOID", "STATEFP", "COUNTYFP"))
View(places_counties_tracts)
places_sf <- pmap_df(.l = fips_codes_tidy %>%
filter(as.numeric(state_code) <= 72) %>%
select(state_code) %>%
distinct(),
.f = ~(tigris::places(state = ..1,
cb = TRUE,
class = "sf") %>%
rename("place_GEOID" = GEOID,
"place_NAME" = NAME))) %>%
select(STATEFP, PLACEFP, place_GEOID, place_NAME) %>%
mutate("place_area" = st_area(.),
"place_area_num" = as.numeric(place_area)) %>%
relocate(geometry, .after = last_col())
## ----- Join place/county/tract -----
places_counties_tracts <- st_join(places_sf,
tracts_sf %>%
select(tract_GEOID,
COUNTYFP)) %>%
st_drop_geometry() %>%
left_join(places_counties %>%
select(place_GEOID, STATEFP, COUNTYFP,
county_GEOID, county_NAME,
"place_county_overlap_pct" = overlap_pct),
by = c("place_GEOID", "STATEFP", "COUNTYFP"))
View(places_sf)
View(places_counties_tracts)
places_tracts <- st_intersection(places_sf,
tracts_sf) %>%
mutate("overlap_area" = st_area(.),
"overlap_area_num" = as.numeric(overlap_area),
"overlap_pct" = overlap_area_num / place_area_num) %>%
filter(overlap_pct > 0) %>%
st_drop_geometry()
places_tracts <- st_intersection(places_sf,
tracts_sf) %>%
mutate("overlap_area" = st_area(.),
"overlap_area_num" = as.numeric(overlap_area),
"overlap_pct" = overlap_area_num / place_area_num) %>%
filter(overlap_pct > 0) %>%
st_drop_geometry()
test <- places_tracts %>%
select(place_GEOID, STATEFP, COUNTYFP,
tract_GEOID) %>%
distinct()
places_counties_tracts <- places_sf %>%
st_drop_geometry() %>%
select(place_GEOID) %>%
# Clean place name
left_join(dict_places,
by = "place_GEOID") %>%
# Tracts
left_join(places_tracts %>%
select(place_GEOID, STATEFP, COUNTYFP,
tract_GEOID),
by = "place_GEOID") %>%
# Counties joined to correct tracts
left_join(places_counties %>%
select(place_GEOID, STATEFP, COUNTYFP,
county_GEOID, county_NAME,
"place_county_overlap_pct" = overlap_pct),
by = c("place_GEOID", "STATEFP", "COUNTYFP"))
# Unique join of above
places_counties_tracts <- places_sf %>%
st_drop_geometry() %>%
select(place_GEOID) %>%
# Clean place name
left_join(dict_places %>%
rename("place_GEOID" = GEOID),
by = "place_GEOID") %>%
# Tracts
left_join(places_tracts %>%
select(place_GEOID, STATEFP, COUNTYFP,
tract_GEOID),
by = "place_GEOID") %>%
# Counties joined to correct tracts
left_join(places_counties %>%
select(place_GEOID, STATEFP, COUNTYFP,
county_GEOID, county_NAME,
"place_county_overlap_pct" = overlap_pct),
by = c("place_GEOID", "STATEFP", "COUNTYFP"))
# Unique join of above
places_counties_tracts <- places_sf %>%
st_drop_geometry() %>%
select(place_GEOID) %>%
# Clean place name
left_join(dict_places %>%
rename("place_GEOID" = GEOID),
by = "place_GEOID") %>%
# Tracts
left_join(places_tracts %>%
select(place_GEOID, STATEFP, COUNTYFP,
tract_GEOID, tract_NAME,
"place_tract_overlap_pct" = overlap_pct),
by = "place_GEOID") %>%
# Counties joined to correct tracts
left_join(places_counties %>%
select(place_GEOID, STATEFP, COUNTYFP,
county_GEOID, county_NAME,
"place_county_overlap_pct" = overlap_pct),
by = c("place_GEOID", "STATEFP", "COUNTYFP"))
View(places_counties_tracts)
# Unique join of above
places_counties_tracts <- places_sf %>%
st_drop_geometry() %>%
select(place_GEOID) %>%
# Clean place name
left_join(dict_places %>%
rename("place_GEOID" = GEOID),
by = "place_GEOID") %>%
# Tracts
left_join(places_tracts %>%
select(place_GEOID, STATEFP, COUNTYFP,
tract_GEOID, tract_NAME,
"tract_place_overlap_pct" = overlap_pct),
by = "place_GEOID") %>%
# Counties joined to correct tracts
left_join(places_counties %>%
select(place_GEOID, STATEFP, COUNTYFP,
county_GEOID, county_NAME,
"county_place_overlap_pct" = overlap_pct),
by = c("place_GEOID", "STATEFP", "COUNTYFP"))
places_counties_tracts <- places_counties_tracts %>%
select(place_GEOID, metro_state,
starts_with("county_"), starts_with("tract_"))
dict_places_counties_tracts <- places_counties_tracts
dict_location_crosswalk <- dict_places_counties_tracts
# Places
write_csv(dict_places, "dict_places.txt")
# Tracts
st_write(tracts_sf, "tracts.geojson", delete_dsn = TRUE)
# Places, counties, tracts crosswalk
write_csv(dict_location_crosswalk, "dict_location_crosswalk.txt")
