TRUE ~
shiny_input_label)) %>%
select(GEOID, NAME, shiny_input_label, everything())
# Clean names for labels
test <- acs_places_ref %>%
separate(NAME, sep =  ", ",
into = c("city", "state_name"),
remove = FALSE) %>%
left_join(fips_codes_tidy %>%
select(state_name, state) %>%
distinct(),
by = c("state_name")) %>%
mutate("shiny_input_label" = paste0(city, ", ", state) %>%
str_replace_all(.,
pattern = " (city|village|municipality|town|city and borough|borough|(city|((unified|consolidated|metro|metropolitan) government)) \\(balance\\)|\\(balance\\)), ",
replacement = ", ")) %>%
mutate("shiny_input_label" = case_when(GEOID == "3651000" ~
"New York City, NY",
GEOID == "4752006" ~
"Nashville, TN",
GEOID == "1571550" ~
"Honolulu, HI",
GEOID == "2146027" ~
"Lexington, KY",
GEOID == "2148006" ~
"Louisville, KY",
TRUE ~
shiny_input_label)) %>%
select(-c(city, state_name, state)) %>%
select(GEOID, NAME, shiny_input_label, everything())
test <- acs_places_ref %>%
separate(NAME, sep =  ", ",
into = c("city", "state_name"),
remove = FALSE) %>%
left_join(fips_codes_tidy %>%
select(state_name, state) %>%
distinct(),
by = c("state_name")) %>%
mutate("shiny_input_label" = paste0(city, ", ", state) %>%
str_replace_all(.,
pattern = " (city|village|municipality|town|city and borough|borough|(city|((unified|consolidated|metro|metropolitan) government)) \\(balance\\)|\\(balance\\)), ",
replacement = ", ")) %>%
mutate("shiny_input_label" = case_when(GEOID == "3651000" ~
"New York City, NY",
GEOID == "4752006" ~
"Nashville, TN",
GEOID == "1571550" ~
"Honolulu, HI",
GEOID == "2146027" ~
"Lexington, KY",
GEOID == "2148006" ~
"Louisville, KY",
TRUE ~
shiny_input_label)) %>%
select(-c(city, state))
# Clean names for labels
test <- acs_places_ref %>%
separate(NAME, sep =  ", ",
into = c("city", "state_name"),
remove = FALSE) %>%
left_join(fips_codes_tidy %>%
select(state_name, state) %>%
distinct(),
by = c("state_name")) %>%
mutate("shiny_input_label" = paste0(city, ", ", state) %>%
str_replace_all(.,
pattern = " (city|village|municipality|town|city and borough|borough|(city|((unified|consolidated|metro|metropolitan) government)) \\(balance\\)|\\(balance\\)), ",
replacement = ", ")) %>%
mutate("shiny_input_label" = case_when(GEOID == "3651000" ~
"New York City, NY",
GEOID == "4752006" ~
"Nashville, TN",
GEOID == "1571550" ~
"Honolulu, HI",
GEOID == "2146027" ~
"Lexington, KY",
GEOID == "2148006" ~
"Louisville, KY",
TRUE ~
shiny_input_label)) %>%
select(-c(city, state)) %>%
select(GEOID, NAME, shiny_input_label, state_name, everything())
acs_places_ref <- get_estimates(geography = "place",
# year = 2019,
product = "population",
geometry = FALSE,
output = "wide")
View(acs_places_ref)
View(test)
cities_acs_places_ref %>%
arrange(desc(POP)) %>%
head(200) %>%
pull(GEOID)
# Load Census places
cities_acs_places_ref <- get_estimates(geography = "place",
product = "population",
geometry = FALSE,
output = "wide")
# Clean place names for labels
cities_acs_places_ref <- cities_acs_places_ref %>%
separate(NAME, sep =  ", ",
into = c("city", "state_name"),
remove = FALSE) %>%
left_join(fips_codes_tidy %>%
select(state_name, state) %>%
distinct(),
by = c("state_name")) %>%
mutate("shiny_input_label" = paste0(city, ", ", state) %>%
str_replace_all(.,
pattern = " (city|village|municipality|town|city and borough|borough|(city|((unified|consolidated|metro|metropolitan) government)) \\(balance\\)|\\(balance\\)), ",
replacement = ", ")) %>%
mutate("shiny_input_label" = case_when(GEOID == "3651000" ~
"New York City, NY",
GEOID == "4752006" ~
"Nashville, TN",
GEOID == "1571550" ~
"Honolulu, HI",
GEOID == "2146027" ~
"Lexington, KY",
GEOID == "2148006" ~
"Louisville, KY",
TRUE ~
shiny_input_label)) %>%
select(-c(city, state)) %>%
select(GEOID, NAME, shiny_input_label, state_name, everything())
View(cities_acs_places_ref)
tibble::deframe(cities_acs_places_ref) %>%
select(shiny_input_label, GEOID)
cities_acs_places_ref %>%
select(shiny_input_label, GEOID)
tibble::deframe(cities_acs_places_ref %>%
select(shiny_input_label, GEOID))
View(acs_places_ref)
View(cities_acs_places_ref)
cities_acs_places_ref %>%
separate(shiny_input_label,
sep = ", ",
into = c("clean_city", "clean_state")) %>%
select("census_GEOID" = GEOID, "census_NAME" = NAME,
clean_city, clean_state,
"population" = POP, "density" = DENSITY)
View(cities_acs_places_ref)
cities_acs_places_selected <- read_csv("example_cities_geoid_upload.csv") %>%
rename("GEOID" = 1) %>%
mutate("GEOID" = as.character(GEOID) %>%
stringr::str_pad(7, side = "left", pad = "0"))
View(cities_acs_places_selected)
tracts_places <- #reactive({
pmap_df(.l = fips_codes_tidy %>%
select(state_code) %>%
distinct(),
.f = ~(tigris::places(state = ..1,
cb = TRUE,
class = "sf") %>%
rename("place_GEOID" = GEOID,
"place_NAME" = NAME) %>%
filter(place_GEOID %in% cities_acs_places_selected)))
tracts_places <- #reactive({
pmap_df(.l = fips_codes_tidy %>%
select(state_code) %>%
distinct(),
.f = ~(tigris::places(state = ..1,
cb = TRUE,
class = "sf") %>%
rename("place_GEOID" = GEOID,
"place_NAME" = NAME) %>%
filter(place_GEOID %in%
cities_acs_places_selected$GEOID)))
tracts_places <- #reactive({
pmap_df(.l = fips_codes_tidy %>%
select(state) %>%
distinct(),
.f = ~(tigris::places(state = ..1,
cb = TRUE,
class = "sf") %>%
rename("place_GEOID" = GEOID,
"place_NAME" = NAME) %>%
filter(place_GEOID %in%
cities_acs_places_selected$GEOID)))
test <- fips_codes_tidy %>%
select(state_code) %>%
distinct()
View(test)
test <- fips_codes_tidy %>%
filter(as.numeric(state_code) <= 72) %>%
select(state_code) %>%
distinct()
View(fips_codes_tidy)
# Get spatial footprint of cities/places selected
tracts_places <- #reactive({
pmap_df(.l = fips_codes_tidy %>%
filter(as.numeric(state_code) <= 72) %>%
select(state_code) %>%
distinct(),
.f = ~(tigris::places(state = ..1,
cb = TRUE,
class = "sf") %>%
rename("place_GEOID" = GEOID,
"place_NAME" = NAME) %>%
filter(place_GEOID %in%
cities_acs_places_selected$GEOID)))
counties <- # reactive({
pmap_df(.l = fips_codes_tidy %>%
filter(as.numeric(state_code) <= 72) %>%
select(state_code) %>%
distinct(),
.f = ~(tigris::counties(state = ..1,
cb = TRUE,
class = "sf") %>%
rename("county_GEOID" = GEOID,
"county_NAME" = NAME)))
View(counties)
View(tracts_places)
tracts_counties <- # reactive({
pmap_df(.l = fips_codes_tidy %>%
filter(as.numeric(state_code) <= 72) %>%
select(state_code) %>%
distinct(),
.f = ~(tigris::counties(state = ..1,
cb = TRUE,
class = "sf") %>%
rename("county_GEOID" = GEOID,
"county_NAME" = NAME) %>%
filter(STATEFP %in% tracts_places$STATEFP)))
rm(counties)
tracts_counties <- # reactive({
pmap_df(.l = tracts_places %>%
select(STATEFP) %>%
distinct(),
.f = ~(tigris::counties(state = ..1,
cb = TRUE,
class = "sf") %>%
rename("county_GEOID" = GEOID,
"county_NAME" = NAME)))
tracts_places %>%
select(STATEFP) %>%
distinct()
tracts_places %>%
select(STATEFP) %>%
distinct() %>%
st_drop_geometry()
View(tracts_places)
tracts_places %>%
st_drop_geometry()
tracts_places %>%
st_drop_geometry() %>%
select(STATEFP)
tracts_places %>%
st_drop_geometry() %>%
select(STATEFP) %>%
distinct()
tracts_counties <- # reactive({
pmap_df(.l = tracts_places %>%
st_drop_geometry() %>%
select(STATEFP) %>%
distinct(),
.f = ~(tigris::counties(state = ..1,
cb = TRUE,
class = "sf") %>%
rename("county_GEOID" = GEOID,
"county_NAME" = NAME)))
View(tracts_counties)
tracts_places_counties <- #reactive({
st_join(tracts_places, tracts_counties)
View(tracts_places_counties)
tracts_places_counties <- #reactive({
st_join(tracts_places,
tracts_counties %>%
select(county_GEOID, county_NAME))
View(tracts_places_counties)
mapview(places, zcol = "place_GEOID") + mapview(counties)
mapview::mapview(places, zcol = "place_GEOID") +
mapview::mapview(counties)
mapview::mapview(tracts_places, zcol = "place_GEOID") +
mapview::mapview(tracts_counties)
mapview::mapview(tracts_counties, col.regions = "red") +
mapview::mapview(tracts_places, col.regions = "blue")
tracts_counties_places <- st_join(tracts_counties,
tracts_places,
.predicate = st_intersects)
tracts_counties_places <- st_join(tracts_counties,
tracts_places,
.predicate = st_intersects,
left = FALSE)
tracts_counties_places <- st_join(tracts_counties,
tracts_places,
.predicate = st_overlaps,
left = FALSE)
tracts_places_counties <- #reactive({
st_join(tracts_places,
tracts_counties %>%
select(county_GEOID, county_NAME),
.predicate = st_overlaps)
tracts_counties_places <- st_join(tracts_counties,
tracts_places,
.predicate = st_within,
left = FALSE)
tracts_places_counties <- #reactive({
st_join(tracts_places,
tracts_counties %>%
select(county_GEOID, county_NAME),
.predicate = st_within)
tracts_counties_places <- st_join(tracts_counties,
tracts_places,
.predicate = st_covers,
left = FALSE)
tracts_places_counties <- #reactive({
st_join(tracts_places,
tracts_counties %>%
select(county_GEOID, county_NAME),
.predicate = st_covers)
tracts_counties_places <- st_join(tracts_counties,
tracts_places,
.predicate = st_disjoint,
left = FALSE)
st_join(tracts_places,
tracts_counties %>%
select(county_GEOID, county_NAME),
.predicate = st_is_within_distance,
dist = -0.01)
tracts_places_counties <- #reactive({
st_join(tracts_places,
tracts_counties %>%
select(county_GEOID, county_NAME),
.predicate = st_is_within_distance,
dist = -0.00001)
tracts_places_counties <- #reactive({
st_join(tracts_places,
tracts_counties %>%
select(county_GEOID, county_NAME),
.predicate = st_is_within_distance,
dist = -0.0001)
tracts_places_counties <- #reactive({
st_join(tracts_places,
tracts_counties %>%
select(county_GEOID, county_NAME),
.predicate = st_is_within_distance,
dist = -0.001)
tracts_places_counties <- #reactive({
st_join(tracts_places,
tracts_counties %>%
select(county_GEOID, county_NAME),
.predicate = st_is_within_distance,
dist = -0.01)
tracts_places_counties <- #reactive({
st_join(tracts_places,
tracts_counties %>%
select(county_GEOID, county_NAME),
.predicate = st_is_within_distance,
dist = -0.1)
tracts_places_counties <- #reactive({
st_join(tracts_places,
tracts_counties %>%
select(county_GEOID, county_NAME),
.predicate = st_is_within_distance,
dist = -1)
tracts_places_counties <- #reactive({
st_join(tracts_places,
tracts_counties %>%
select(county_GEOID, county_NAME),
.predicate = st_is_within_distance,
dist = -100)
tracts_counties_places <- st_join(tracts_counties,
tracts_places,
.predicate = st_covered_by,
left = FALSE)
rm(tracts_counties_places)
tracts_counties_places <- st_join(tracts_counties,
tracts_places,
.predicate = st_covered_by,
left = FALSE)
View(tracts_counties_places)
tracts_places_counties <- #reactive({
st_join(tracts_places,
tracts_counties %>%
select(county_GEOID, county_NAME))
View(tracts_places_counties)
temp_inter_pct <- st_intersection(tracts_places,
tracts_counties) %>%
mutate(intersect_area = st_area(.)) %>%   # create new column with shape area
dplyr::select(NAME, intersect_area) %>%   # only select columns needed to merge
st_drop_geometry()
temp_inter_pct <- st_intersection(tracts_places,
tracts_counties) %>%
mutate(intersect_area = st_area(.))
View(temp_inter_pct)
View(tracts_counties_places)
temp_inter_pct <- st_intersection(tracts_places,
tracts_counties)
mapview::mapview(tracts_counties, col.regions = "red") +
mapview::mapview(tracts_places, col.regions = "blue") +
mapview::mapview(temp_inter_pct, col.regions = "green")
plot(temp_inter_pct)
plot(temp_inter_pct$STATEFP)
plot(temp_inter_pct$geometry)
mapview::mapview(tracts_counties, col.regions = "red") +
mapview::mapview(tracts_places, col.regions = "blue")
mapview::mapview(tracts_places_counties, col.regions = "red") +
mapview::mapview(tracts_places, col.regions = "blue")
View(tracts_places_counties)
View(fips_codes_tidy)
test <- pmap_df(.l = cities_acs_places_selected %>%
select(clean_state) %>%
distinct(),
.f = ~(get_acs(geography = "place",
year = 2019,
variables = c("S0101_C01_006",
"S0101_C01_007",
"S0101_C01_008"),
survey = "acs5",
state = ..1,
geometry = FALSE,
wide = TRUE) %>%
semi_join(cities_acs_places_selected,
by = "GEOID")))
View(test)
View(tracts_places_counties)
tracts_places_counties <- # reactive({
pmap_df(.l = tracts_places %>%
st_drop_geometry() %>%
select(STATEFP) %>%
distinct(),
.f = ~(tigris::counties(state = ..1,
cb = TRUE,
class = "sf") %>%
rename("county_GEOID" = GEOID,
"county_NAME" = NAME))) %>%
st_join(tracts_places,
. %>%
select(COUNTYFP, county_GEOID, county_NAME)) %>%
st_drop_geometry() %>%
select(PLACEFP, place_GEOID, place_NAME,
STATEFP, COUNTYFP, county_GEOID, county_NAME) %>%
distinct()
tracts_places_counties <- # reactive({
pmap_df(.l = tracts_places %>%
st_drop_geometry() %>%
select(STATEFP) %>%
distinct(),
.f = ~(tigris::counties(state = ..1,
cb = TRUE,
class = "sf") %>%
rename("county_GEOID" = GEOID,
"county_NAME" = NAME))) %>%
st_join(tracts_places,
. %>%
select(COUNTYFP, county_GEOID, county_NAME))
temp <- pmap_df(.l = tracts_places %>%
st_drop_geometry() %>%
select(STATEFP) %>%
distinct(),
.f = ~(tigris::counties(state = ..1,
cb = TRUE,
class = "sf") %>%
rename("county_GEOID" = GEOID,
"county_NAME" = NAME)))
tracts_places_counties <- st_join(tracts_places,
temp %>%
select(COUNTYFP, county_GEOID, county_NAME))
tracts_places_counties <- st_join(tracts_places,
temp %>%
select(COUNTYFP, county_GEOID, county_NAME)) %>%
st_drop_geometry() %>%
select(PLACEFP, place_GEOID, place_NAME,
STATEFP, COUNTYFP, county_GEOID, county_NAME) %>%
distinct()
View(tracts_places_counties)
View(tracts_places_counties)
View(tracts_places)
test <- pmap_df(.l = tracts_places_counties %>%
select(STATEFP, COUNTYFP) %>%
distinct(),
.f = ~(get_acs(geography = "place",
year = 2019,
variables = c("S0101_C01_006",
"S0101_C01_007",
"S0101_C01_008"),
survey = "acs5",
state = ..1,
county = ..2,
geometry = FALSE,
wide = TRUE) %>%
st_join(tracts_places %>%
select(place_GEOID))))
test <- pmap_df(.l = tracts_places_counties %>%
select(STATEFP, COUNTYFP) %>%
distinct(),
.f = ~(get_acs(geography = "tract",
year = 2019,
variables = c("S0101_C01_006",
"S0101_C01_007",
"S0101_C01_008"),
survey = "acs5",
state = ..1,
county = ..2,
geometry = FALSE,
wide = TRUE) %>%
st_join(tracts_places %>%
select(place_GEOID))))
test <- pmap_df(.l = tracts_places_counties %>%
select(STATEFP, COUNTYFP) %>%
distinct(),
.f = ~(get_acs(geography = "tract",
year = 2019,
variables = c("S0101_C01_006",
"S0101_C01_007",
"S0101_C01_008"),
survey = "acs5",
state = ..1,
county = ..2,
geometry = FALSE,
wide = TRUE)))
