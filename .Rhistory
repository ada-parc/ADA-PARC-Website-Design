# Get population estimates for lookup
places_pop_est <- get_estimates(geography = "place",
product = "population",
geometry = FALSE,
output = "wide")
# Libraries
library(tidyverse);library(readxl)
library(tidycensus);library(tigris);library(sf)
library(geojsonsf);library(mongolite)
# Set working dictionary, options
setwd(here::here())
options(stringsAsFactors = FALSE, scipen = 999,
dplyr.summarise.inform = FALSE, tigris_use_cache = TRUE)
# Load API keys
api_key_census <- config::get("api_key_census")
# FIPS codes --------------------------------------------------------------
# All states and counties
fips_codes_tidy <- force(fips_codes)
# Places/Cities lookup ----------------------------------------------------
# Get spatial footprint of cities/places
# Remove US Outlying Islands/US Virgin Islands (c(1:56, 72))
places_sf <- pmap_df(.l = fips_codes_tidy %>%
filter(as.numeric(state_code) %in% c(1:56, 72)) %>%
select(state_code) %>%
distinct(),
.f = ~(tigris::places(state = ..1,
cb = TRUE,
class = "sf") %>%
rename("place_GEOID" = GEOID,
"place_NAME" = NAME))) %>%
select(STATEFP, PLACEFP, place_GEOID, place_NAME) %>%
mutate("place_area" = st_area(.),
"place_area_num" = as.numeric(place_area)) %>%
relocate(geometry, .after = last_col())
# Get population estimates for lookup
places_pop_est <- get_estimates(geography = "place",
product = "population",
geometry = FALSE,
output = "wide")
# Clean for lookup
dict_places <- places_sf %>%
st_drop_geometry() %>%
# Metro/State names
left_join(fips_codes_tidy %>%
select(state_code, state) %>%
distinct(),
by = c("STATEFP" = "state_code")) %>%
# Basic scrubbing
mutate("metro_state" = paste0(place_NAME, ", ", state) %>%
str_replace_all(.,
pattern = " (city|village|municipality|town|city and borough|borough|(city|((unified|consolidated|metro|metropolitan) government)) \\(balance\\)|\\(balance\\)), ",
replacement = ", ")) %>%
# Individual cases
select("GEOID" = place_GEOID, "NAME" = place_NAME, metro_state) %>%
mutate("metro_state" = case_when(GEOID == "3651000" ~
"New York City, NY",
GEOID == "4752006" ~
"Nashville, TN",
GEOID == "1571550" ~
"Honolulu, HI",
GEOID == "2146027" ~
"Lexington, KY",
GEOID == "2148006" ~
"Louisville, KY",
TRUE ~
metro_state)) %>%
# Population to order list
left_join(places_pop_est %>%
select(GEOID, POP, DENSITY),
by = "GEOID")
# Places
write_csv(dict_places, "dict_places.txt")
View(places_pop_est)
View(places_sf)
# Get spatial footprint of cities/places
# Remove US Outlying Islands/US Virgin Islands (c(1:56, 72))
places_sf <- pmap_df(.l = fips_codes_tidy %>%
filter(as.numeric(state_code) %in% c(1:56, 72)) %>%
select(state_code) %>%
distinct(),
.f = ~(tigris::places(state = ..1,
cb = TRUE,
class = "sf") %>%
rename("place_GEOID" = GEOID,
"place_NAME" = NAME))) %>%
select(STATEFP, PLACEFP, place_GEOID, place_NAME) %>%
mutate("place_area" = st_area(.),
"place_area_num" = as.numeric(place_area)) %>%
relocate(geometry, .after = last_col())
places_sf %>%
st_drop_geometry() %>%
select(GEOID)
# Population to order list
left_join(places_pop_est,
by = "GEOID")
places_sf %>%
st_drop_geometry() %>%
select("GEOID" = place_GEOID) %>%
# Population to order list
left_join(places_pop_est,
by = "GEOID")
dict_places <- places_sf %>%
st_drop_geometry() %>%
select(STATEFP, "GEOID" = place_GEOID) %>%
# Population to order list
left_join(places_pop_est,
by = "GEOID") %>%
# Metro/State names
left_join(fips_codes_tidy %>%
select(state_code, state) %>%
distinct(),
by = c("STATEFP" = "state_code")) %>%
# Basic scrubbing
mutate("metro_state" = paste0(NAME, ", ", state) %>%
str_replace_all(.,
pattern = " (city|village|municipality|town|city and borough|borough|(city|((unified|consolidated|metro|metropolitan) government)) \\(balance\\)|\\(balance\\)), ",
replacement = ", ")) %>%
# Individual cases
mutate("metro_state" = case_when(GEOID == "3651000" ~
"New York City, NY",
GEOID == "4752006" ~
"Nashville, TN",
GEOID == "1571550" ~
"Honolulu, HI",
GEOID == "2146027" ~
"Lexington, KY",
GEOID == "2148006" ~
"Louisville, KY",
TRUE ~
metro_state)) %>%
select("GEOID" = place_GEOID, "NAME" = place_NAME, metro_state,
POP, DENSITY)
dict_places <- places_sf %>%
st_drop_geometry() %>%
select(STATEFP, "GEOID" = place_GEOID) %>%
# Population to order list
left_join(places_pop_est,
by = "GEOID") %>%
# Metro/State names
left_join(fips_codes_tidy %>%
select(state_code, state) %>%
distinct(),
by = c("STATEFP" = "state_code")) %>%
# Basic scrubbing
mutate("metro_state" = paste0(NAME, ", ", state) %>%
str_replace_all(.,
pattern = " (city|village|municipality|town|city and borough|borough|(city|((unified|consolidated|metro|metropolitan) government)) \\(balance\\)|\\(balance\\)), ",
replacement = ", ")) %>%
# Individual cases
mutate("metro_state" = case_when(GEOID == "3651000" ~
"New York City, NY",
GEOID == "4752006" ~
"Nashville, TN",
GEOID == "1571550" ~
"Honolulu, HI",
GEOID == "2146027" ~
"Lexington, KY",
GEOID == "2148006" ~
"Louisville, KY",
TRUE ~
metro_state)) %>%
select(GEOID, NAME, metro_state,
POP, DENSITY)
# Places
write_csv(dict_places, "dictionaries/dict_places.txt")
cities_acs_places_ref <- read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/national-tile-map/dictionaries/dict_places.txt?token=AGLBDE7TKKDH2T76FNSXUDTAG3U2O")
cities_acs_places_ref <- read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/national-tile-map/dictionaries/dict_places.txt?token=AGLBDEZ3AAV7MV7JXHW7ELLAG3XGQ")
cities_acs_places_ref %>%
separate(metro_state,
sep = ", ",
into = c("clean_city", "clean_state")) %>%
select("census_GEOID" = GEOID, "census_NAME" = NAME,
clean_city, clean_state,
"population" = POP, "density" = DENSITY)
places_sf %>%
st_drop_geometry() %>%
select(STATEFP, "GEOID" = place_GEOID) %>%
# Population to order list
left_join(places_pop_est,
by = "GEOID") %>%
# Metro/State names
left_join(fips_codes_tidy %>%
select(state_code, state) %>%
distinct(),
by = c("STATEFP" = "state_code"))
dict_places <- places_sf %>%
st_drop_geometry() %>%
select(STATEFP, "GEOID" = place_GEOID) %>%
# Population to order list
left_join(places_pop_est,
by = "GEOID") %>%
# Metro/State names
left_join(fips_codes_tidy %>%
select(state_code, state) %>%
distinct(),
by = c("STATEFP" = "state_code")) %>%
# Basic scrubbing
mutate("metro_state" = paste0(str_remove(NAME, ",.*$"),
", ", state) %>%
str_replace_all(.,
pattern = " (city|village|municipality|town|city and borough|borough|(city|((unified|consolidated|metro|metropolitan) government)) \\(balance\\)|\\(balance\\)), ",
replacement = ", ")) %>%
# Individual cases
mutate("metro_state" = case_when(GEOID == "3651000" ~
"New York City, NY",
GEOID == "4752006" ~
"Nashville, TN",
GEOID == "1571550" ~
"Honolulu, HI",
GEOID == "2146027" ~
"Lexington, KY",
GEOID == "2148006" ~
"Louisville, KY",
TRUE ~
metro_state)) %>%
select(GEOID, NAME, metro_state,
POP, DENSITY)
# Places
write_csv(dict_places, "dictionaries/dict_places.txt")
# Load Census places from GitHub repo
cities_acs_places_ref <- read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/national-tile-map/dictionaries/dict_places.txt?token=AGLBDE3JMXVTYDBOZ6CYFUDAG3YCM")
cities_acs_places_ref %>%
separate(metro_state,
sep = ", ",
into = c("clean_city", "clean_state")) %>%
select("census_GEOID" = GEOID, "census_NAME" = NAME,
clean_city, clean_state,
"population" = POP, "density" = DENSITY)
test <- read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/national-tile-map/dictionaries/dict_location_crosswalk.txt?token=AGLBDE7J3YJYQSCAA7QVO5TAG3ZNY") %>%
filter(overlap_pct > 0)
test <- read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/national-tile-map/dictionaries/dict_location_crosswalk.txt?token=AGLBDE7J3YJYQSCAA7QVO5TAG3ZNY")
test <- read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/national-tile-map/dictionaries/dict_location_crosswalk.txt?token=AGLBDE7J3YJYQSCAA7QVO5TAG3ZNY") %>%
filter(county_place_overlap_pct > 0)
test %>% filter(metro_state %in% c("Chicago, IL", "Flint, MI"))
test %>% filter(metro_state %in% c("Chicago, IL", "Flint, MI")) %>% arrange(desc(metro_state))
tracts_places_counties <- test %>% filter(metro_state %in% c("Chicago, IL", "Flint, MI"))
tracts_places_counties %>%
mutate("STATEFP" = str_sub(county_GEOID, 1, 2),
"COUNTYFP" = str_sub(county_GEOID, 3, 5)) %>%
select(STATEFP, COUNTYFP) %>%
distinct()
pmap_df(.l = tracts_places_counties %>%
mutate("STATEFP" = str_sub(county_GEOID, 1, 2),
"COUNTYFP" = str_sub(county_GEOID, 3, 5)) %>%
select(STATEFP, COUNTYFP) %>%
distinct(),
.f = ~(get_acs(geography = "tract",
year = 2019,
variables = c("S0101_C01_006",
"S0101_C01_007",
"S0101_C01_008"),
survey = "acs5",
state = ..1,
county = ..2,
geometry = FALSE,
wide = TRUE)))
View(test)
tracts_places_counties %>%
mutate("STATEFP" = str_sub(county_GEOID, 1, 2),
"COUNTYFP" = str_sub(county_GEOID, 3, 5)) %>%
select(STATEFP, COUNTYFP) %>%
distinct()
tracts_places_counties %>%
mutate("STATEFP" = str_sub(county_GEOID, 1, 2),
"COUNTYFP" = str_sub(county_GEOID, 3, 5)) %>%
select(STATEFP, COUNTYFP) %>%
distinct() %>%
head(1)
test <- pmap_df(.l = tracts_places_counties %>%
mutate("STATEFP" = str_sub(county_GEOID, 1, 2),
"COUNTYFP" = str_sub(county_GEOID, 3, 5)) %>%
select(STATEFP, COUNTYFP) %>%
distinct() %>%
head(2),
.f = ~(tigris::tracts(state = ..1,
county = ..2,
cb = TRUE,
class = "sf") %>%
select(GEOID) %>%
filter(GEOID %in% tracts_places_counties$tract_GEOID)))
View(test)
test <- pmap_df(.l = tracts_places_counties %>%
mutate("STATEFP" = str_sub(county_GEOID, 1, 2),
"COUNTYFP" = str_sub(county_GEOID, 3, 5)) %>%
select(STATEFP, COUNTYFP) %>%
distinct() %>%
head(2),
.f = ~(tigris::tracts(state = ..1,
county = ..2,
cb = TRUE,
class = "sf") %>%
# select(GEOID) %>%
filter(GEOID %in% tracts_places_counties$tract_GEOID)))
View(test)
test <- read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/national-tile-map/dictionaries/dict_location_crosswalk.txt?token=AGLBDE7J3YJYQSCAA7QVO5TAG3ZNY")
read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/national-tile-map/dictionaries/dict_location_crosswalk.txt?token=AGLBDE6NW5BIDXOISVPLRWLAIZKRK")
readr::read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/national-tile-map/dictionaries/dict_location_crosswalk.txt?token=AGLBDE6NW5BIDXOISVPLRWLAIZKRK")
# Libraries
library(tidyverse);library(readxl)
library(tigris);library(sf);library(janitor)
library(tidycensus);library(viridis);library(tmap)
library(RPostgres);library(RPostgreSQL);library(DBI)
library(geojsonsf);library(mongolite);library(config)
library(shiny);library(shinyjs);library(shinyWidgets)
# Set working dictionary, options
setwd(here::here())
options(stringsAsFactors = FALSE, scipen = 999,
dplyr.summarise.inform = FALSE, tigris_use_cache = TRUE)
knitr::opts_chunk$set(echo = FALSE)
# Load API keys and database connection information
source("functions.R", local = TRUE)
read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/national-tile-map/dictionaries/dict_places.txt?token=AGLBDE7ABUTQJ56SNQCENODAIZKXO")
cities_acs_places_ref <- read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/national-tile-map/dictionaries/dict_places.txt?token=AGLBDE3JMXVTYDBOZ6CYFUDAG3YCM")
# Libraries
library(tidyverse);library(readxl)
library(tigris);library(sf);library(janitor)
library(tidycensus);library(viridis);library(tmap)
library(RPostgres);library(RPostgreSQL);library(DBI)
library(geojsonsf);library(mongolite);library(config)
library(shiny);library(shinyjs);library(shinyWidgets)
# Set working dictionary, options
setwd(here::here())
options(stringsAsFactors = FALSE, scipen = 999,
dplyr.summarise.inform = FALSE, tigris_use_cache = TRUE)
knitr::opts_chunk$set(echo = FALSE)
# Load API keys and database connection information
source("functions.R", local = TRUE)
cities_acs_places_ref <- read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/national-tile-map/dictionaries/dict_places.txt?token=AGLBDE3JMXVTYDBOZ6CYFUDAG3YCM")
# Pull Census places dictionary from GitHub repo
cities_acs_places_ref <- read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/national-tile-map/dictionaries/dict_places.txt?token=AGLBDE3K7O567P6TPWNVVW3AIZORY")
read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/national-tile-map/dictionaries/dict_places.txt?token=AGLBDE7ABUTQJ56SNQCENODAIZKXO")
read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/national-tile-map/dictionaries/dict_location_crosswalk.txt?token=AGLBDE3ZLRMLCJ4H4AS2BLDAIZOVQ")
test <- st_read("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/blob/national-tile-map/dictionaries/geo_tract/geo_tract.shp")
test <- st_read("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/blob/national-tile-map/dictionaries/geo_tract")
test <- st_read("https://github.com/sean-connelly/ADA-PARC-Website-Design/blob/national-tile-map/dictionaries/geo_tract")
test <- st_read("https://github.com/sean-connelly/ADA-PARC-Website-Design/blob/national-tile-map/dictionaries/geo_tract/geo_tract.shp")
download.file("https://github.com/sean-connelly/ADA-PARC-Website-Design/blob/national-tile-map/dictionaries/geo_tract")
temp <- tempfile()
download.file("https://github.com/sean-connelly/ADA-PARC-Website-Design/blob/national-tile-map/dictionaries/geo_tract",
destfile = temp)
list.files(temp)
download.file("https://github.com/sean-connelly/ADA-PARC-Website-Design/blob/national-tile-map/dictionaries/geo_tract.zip",
destfile = temp)
list.files(temp)
# Static check
# Temp files
temp <- tempfile()
download.file("https://github.com/sean-connelly/ADA-PARC-Website-Design/blob/national-tile-map/dictionaries/geo_tract.zip",
destfile = temp)
list.files(temp)
temp <- tempfile()
temp2 <- tempfile()
# Download shapefile
download.file("https://github.com/sean-connelly/ADA-PARC-Website-Design/blob/national-tile-map/dictionaries/geo_tract.zip",
destfile = temp)
# Unzip
unzip(zipfile = temp, exdir = temp2)
# Temp files
temp <- tempfile()
temp2 <- tempfile()
# Download shapefile
download.file("https://github.com/sean-connelly/ADA-PARC-Website-Design/blob/national-tile-map/dictionaries/geo_tract.zip?raw=true",
destfile = temp)
# Unzip
unzip(zipfile = temp, exdir = temp2)
list.files(temp2)
list.files(temp2, full.names=TRUE)
temp <- tempfile()
# Download shapefile
download.file("https://github.com/sean-connelly/ADA-PARC-Website-Design/blob/national-tile-map/dictionaries/geo_tract.zip?raw=true",
destfile = temp)
# Unzip
unzip(zipfile = temp)
sf::st_read(temp)
list.files(temp, full.names=TRUE)
temp
test <- st_read(unzip(download.file("https://github.com/sean-connelly/ADA-PARC-Website-Design/blob/national-tile-map/dictionaries/geo_tract.zip?raw=true")))
test <- st_read(unzip(download.file("https://github.com/sean-connelly/ADA-PARC-Website-Design/blob/national-tile-map/dictionaries/geo_tract.zip?raw=true",
destfile = tempfile())))
temp_zip <- download.file("https://github.com/sean-connelly/ADA-PARC-Website-Design/blob/national-tile-map/dictionaries/geo_tract.zip?raw=true",
destfile = tempfile())
temp <- tempfile()
# Download shapefile
download.file("https://github.com/sean-connelly/ADA-PARC-Website-Design/blob/national-tile-map/dictionaries/geo_tract.zip?raw=true",
destfile = temp)
list.files(temp)
list.files(temp)
unzip(temp)
temp <- "C:\\Users\\sconn\\Downloads"
# Download shapefile
download.file("https://github.com/sean-connelly/ADA-PARC-Website-Design/blob/national-tile-map/dictionaries/geo_tract.zip?raw=true",
destfile = temp)
# Static check
# Temp files
temp <- "C:/Users/sconn/Downloads"
# Download shapefile
download.file("https://github.com/sean-connelly/ADA-PARC-Website-Design/blob/national-tile-map/dictionaries/geo_tract.zip?raw=true",
destfile = temp)
# Static check
# Temp files
temp <- "E:/UIC/Voorhees/ADA-PARC/ADA PARC Website Design"
# Download shapefile
download.file("https://github.com/sean-connelly/ADA-PARC-Website-Design/blob/national-tile-map/dictionaries/geo_tract.zip?raw=true",
destfile = temp)
temp <- tempfile()
temp
download.file("https://github.com/sean-connelly/ADA-PARC-Website-Design/blob/national-tile-map/dictionaries/geo_tract.zip?raw=true",
destfile = temp)
# Download shapefile
download.file("https://github.com/sean-connelly/ADA-PARC-Website-Design/blob/national-tile-map/dictionaries/geo_tract.zip?raw=true",
destfile = temp)
# Static check
# Temp files
temp <- tempdir()
temp
# Download shapefile
download.file("https://github.com/sean-connelly/ADA-PARC-Website-Design/blob/national-tile-map/dictionaries/geo_tract.zip?raw=true",
destfile = temp)
# Static check
# Temp files
temp <- tempfile()
# Static check
# Temp files
temp <- tempfile()
temp <- tempfile()
# Download shapefile
download.file("https://github.com/sean-connelly/ADA-PARC-Website-Design/blob/national-tile-map/dictionaries/geo_tract.zip",
destfile = temp)
temp
list.files(temp)
tempfile()
temp <- tempfile()
# Download shapefile
download.file("https://github.com/sean-connelly/ADA-PARC-Website-Design/blob/national-tile-map/dictionaries/geo_tract.zip",
destfile = temp)
download.file("https://github.com/sean-connelly/ADA-PARC-Website-Design/blob/national-tile-map/dictionaries/geo_tract.zip?raw=true",
destfile = temp)
unzip(temp)
list.files(temp)
download.file("https://github.com/sean-connelly/ADA-PARC-Website-Design/raw/national-tile-map/dictionaries/geo_tract.zip",
destfile = temp)
temp
unz(temp)
unz(filename = temp)
unzip(temp)
list.files(temp)
download.file("https://github.com/sean-connelly/ADA-PARC-Website-Design/raw/national-tile-map/dictionaries/geo_tract.zip",
destfile = temp,
mode = "wb")
# Download shapefile
download("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/national-tile-map/dictionaries/geo_tract.zip",
destfile = temp)
# Download shapefile
download.file("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/national-tile-map/dictionaries/geo_tract.zip",
destfile = temp)
temp
# Download shapefile
download.file("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/national-tile-map/dictionaries/geo_tract.zip",
destfile = paste0(temp, "\\geo_tract.zip"))
temp <- tempfile()
tempd <- tempdir()
# Download shapefile
download.file("https://github.com/sean-connelly/ADA-PARC-Website-Design/raw/national-tile-map/dictionaries/geo_tract.zip",
destfile = temp,
mode = "wb")
unzip(temp,  exdir = tempd)
list.files(temp)
list.files(tempd)
tempd
test <- st_read(paste0(tempd, "geo_tract/geo_tract.shp"))
test <- st_read(paste0(tempd, "/geo_tract/geo_tract.shp"))
View(test)
View(test)
unlink(temp)
unlink(tempd)
rm(temp, tempd)
cities_acs_places_ref %>%
# filter(GEOID %in% input$cities_acs_places) %>%
separate(metro_state,
sep = ", ",
into = c("clean_city", "clean_state")) %>%
select("census_GEOID" = GEOID, "census_NAME" = NAME,
clean_city, clean_state,
"population" = POP, "density" = DENSITY)
View(cities_acs_places_ref)
tracts_places_counties <- read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/national-tile-map/dictionaries/dict_location_crosswalk.txt") %>%
filter(county_place_overlap_pct > 0)
test <- tracts_places_counties %>%
group_by("City" = metro_state) %>%
summarize("Counties" = str_c(county_NAME,
collapse = ", "))
View(test)
tracts_places_counties %>%
select(metro_state, county_NAME) %>%
distinct()
tracts_places_counties %>%
select(metro_state, county_NAME) %>%
distinct() %>%
group_by("City" = metro_state) %>%
summarize("Counties" = str_c(county_NAME,
collapse = ", "))
test <- tracts_places_counties %>%
select(metro_state, county_NAME) %>%
distinct() %>%
group_by("City" = metro_state) %>%
summarize("Counties" = str_c(county_NAME,
collapse = ", "))
View(test)
Sys.which("zip")
Sys.which("zip")
pkgbuild::find_rtools(debug = TRUE)
pkgbuild::find_rtools()
