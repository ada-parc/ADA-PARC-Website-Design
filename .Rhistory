url = sprintf("mongodb+srv://%s:%s@%s/%s",
config::get("user"),
config::get("password"),
host_name,
database_name))
}
fun_mongo_connect(host_name = "ada-parc.3zodz.mongodb.net", # host_name,
collection_name = "acs_state_B18135",
database_name = "ADA-PARC")
fun_mongo_connect(host_name = host_name,
collection_name = "acs_state_B18135",
database_name = "ADA-PARC")
# Packages
library(tidyverse); library(readxl); library(openxlsx); library(summarytools); library(janitor)
library(sf); library(geofacet); library(leaflet); library(leaflet.extras);
library(htmltools); library(shiny); library(shinyWidgets); library(flexdashboard)
library(colourpicker); library(DT); library(gghighlight)
library(knitr); library(kableExtra)
library(scales); library(hrbrthemes); library(ggthemes)
library(extrafont); library(plotly)
library(mongolite)
library(here)
# Set this to host_prod or host_dev
host_name = "host_dev"
# Load API keys and database connection information
source("functions.R", local = TRUE)
# Load variable dictionary for relating tables, variable codes, and readable values
dict_vars <-  fun_pull_mongo_data(tables = "vars_dict", host_name = host_name)
### ------------------------
### National data import and clean
###
# This script takes the national_* objects and transforms them
# into the final datasets for mapping
source(here("national_import.R"), local = TRUE)
View(dict_vars)
View(dict_vars)
# Packages
library(tidyverse); library(readxl); library(openxlsx); library(summarytools); library(janitor)
library(sf); library(geofacet); library(leaflet); library(leaflet.extras);
library(htmltools); library(shiny); library(shinyWidgets); library(flexdashboard)
library(colourpicker); library(DT); library(gghighlight)
library(knitr); library(kableExtra)
library(scales); library(hrbrthemes); library(ggthemes)
library(extrafont); library(plotly)
library(mongolite)
library(here)
# Set this to host_prod or host_dev
host_name = "host_dev"
# Load API keys and database connection information
source("functions.R", local = TRUE)
# Load variable dictionary for relating tables, variable codes, and readable values
dict_vars <- fun_pull_mongo_data(tables = "dict_vars", host_name = host_name)
### ------------------------
### National data import and clean
###
# This script takes the national_* objects and transforms them
# into the final datasets for mapping
source(here("national_import.R"), local = TRUE)
View(dict_vars)
national_demographic %>%
mutate("State" = str_c(NAME, "(", ABBR, ")")) %>%
select(State, everything(), -GEOID, -ABBR) %>%
rename(across(vars(-State),
~str_replace_all(., setNames(dict_vars$var_pretty,
dict_vars$var_readable))))
national_demographic %>%
mutate("State" = str_c(NAME, "(", ABBR, ")")) %>%
select(State, everything(), -GEOID, -ABBR) %>%
rename_at(vars(-State),
~str_replace_all(., setNames(dict_vars$var_pretty,
dict_vars$var_readable)))
national_demographic %>%
mutate("State" = str_c(NAME, "(", ABBR, ")")) %>%
select(State, ends_with("_estimate")) %>%
rename_at(vars(ends_with("_estimate")),
~str_remove(., "_estimate$")
national_demographic %>%
mutate("State" = str_c(NAME, "(", ABBR, ")")) %>%
select(State, ends_with("_estimate")) %>%
rename_at(vars(ends_with("_estimate")),
~str_remove(., "_estimate$"))
national_demographic %>%
mutate("State" = str_c(NAME, "(", ABBR, ")")) %>%
select(State, ends_with("_estimate"))
national_demographic %>%
mutate("State" = str_c(NAME, "(", ABBR, ")")) %>%
select(State, ends_with("_estimate")) %>%
rename_at(vars(ends_with("_estimate")),
~str_remove(., "_estimate$"))
national_demographic %>%
mutate("State" = str_c(NAME, "(", ABBR, ")")) %>%
select(State, ends_with("_estimate")) %>%
rename_at(vars(ends_with("_estimate")),
~str_remove(., "_estimate$")) %>%
rename_at(vars(-State),
~str_replace_all(., setNames(dict_vars$var_pretty,
dict_vars$database)))
national_demographic %>%
mutate("State" = str_c(NAME, "(", ABBR, ")")) %>%
select(State, ends_with("_estimate")) %>%
rename_at(vars(ends_with("_estimate")),
~str_remove(., "_estimate$")) %>%
rename_at(vars(-State),
~str_replace_all(., setNames(dict_vars$var_pretty,
dict_vars$database)))
national_demographic %>%
mutate("State" = str_c(NAME, "(", ABBR, ")")) %>%
select(State, ends_with("_estimate")) %>%
rename_at(vars(ends_with("_estimate")),
~str_remove(., "_estimate$")) %>%
rename_at(vars(-State),
~str_replace_all(., setNames(dict_vars$var_pretty,
dict_vars$database)))
national_demographic %>%
mutate("State" = str_c(NAME, "(", ABBR, ")")) %>%
select(State, ends_with("_estimate")) %>%
rename_at(vars(ends_with("_estimate")),
~str_remove(., "_estimate$"))
setNames(dict_vars$var_pretty,
dict_vars$database)
setNames(dict_vars$var_pretty,
dict_vars$var_database)
national_demographic %>%
mutate("State" = str_c(NAME, "(", ABBR, ")")) %>%
select(State, ends_with("_estimate")) %>%
rename_at(vars(ends_with("_estimate")),
~str_remove(., "_estimate$")) %>%
#   pivot_longer(df, cols = starts_with("S"), names_to = "Sample_name") %>%
# left_join(dict_vars, by = c("database")) %>%
# pivot_wider(id_cols = Gene_Symbol,
#             names_from = Tumor_name,
#             values_from = value)
#
rename_at(vars(-State),
~str_replace_all(., setNames(dict_vars$var_pretty,
dict_vars$var_database)))
national_demographic %>%
mutate("State" = str_c(NAME, "(", ABBR, ")")) %>%
select(State, ends_with("_estimate")) %>%
rename_at(vars(ends_with("_estimate")),
~str_remove(., "_estimate$")) %>%
pivot_longer(cols = vars(-State),
names_to = "var_database")
national_demographic %>%
mutate("State" = str_c(NAME, "(", ABBR, ")")) %>%
select(State, ends_with("_estimate")) %>%
rename_at(vars(ends_with("_estimate")),
~str_remove(., "_estimate$")) %>%
pivot_longer(cols = vars(-State),
names_to = "var_database")
national_demographic %>%
mutate("State" = str_c(NAME, "(", ABBR, ")")) %>%
select(State, ends_with("_estimate")) %>%
rename_at(vars(ends_with("_estimate")),
~str_remove(., "_estimate$")) %>%
pivot_longer(., cols = vars(-State),
names_to = "var_database")
national_demographic %>%
mutate("State" = str_c(NAME, "(", ABBR, ")")) %>%
select(State, ends_with("_estimate")) %>%
rename_at(vars(ends_with("_estimate")),
~str_remove(., "_estimate$"))
national_demographic %>%
mutate("State" = str_c(NAME, "(", ABBR, ")")) %>%
select(State, ends_with("_estimate")) %>%
rename_at(vars(ends_with("_estimate")),
~str_remove(., "_estimate$")) %>%
pivot_longer(cols = -State,
names_to = "var_database",
values_to = "value")
national_demographic %>%
mutate("State" = str_c(NAME, "(", ABBR, ")")) %>%
select(State, ends_with("_estimate")) %>%
rename_at(vars(ends_with("_estimate")),
~str_remove(., "_estimate$")) %>%
pivot_longer(cols = -State,
names_to = "var_database",
values_to = "value") %>%
left_join(dict_vars, by = "var_database") %>%
pivot_wider(id_cols = State,
names_from = var_database,
values_from = value)
national_demographic %>%
mutate("State" = str_c(NAME, "(", ABBR, ")")) %>%
select(State, ends_with("_estimate")) %>%
rename_at(vars(ends_with("_estimate")),
~str_remove(., "_estimate$")) %>%
pivot_longer(cols = -State,
names_to = "var_database",
values_to = "value") %>%
left_join(dict_vars, by = "var_database")
national_demographic %>%
mutate("State" = str_c(NAME, "(", ABBR, ")")) %>%
select(State, ends_with("_estimate")) %>%
rename_at(vars(ends_with("_estimate")),
~str_remove(., "_estimate$")) %>%
pivot_longer(cols = -State,
names_to = "var_database",
values_to = "value") %>%
left_join(dict_vars %>%
select(var_database, var_pretty),
by = "var_database")
dict_vars %>%
filter(!is.na(var_pretty)) %>%
distinct(var_database, var_pretty)
national_demographic
national_demographic %>%
mutate("State" = str_c(NAME, "(", ABBR, ")")) %>%
select(State, ends_with("_estimate")) %>%
rename_at(vars(ends_with("_estimate")),
~str_remove(., "_estimate$")) %>%
pivot_longer(cols = -State,
names_to = "var_database",
values_to = "value") %>%
left_join(dict_vars %>%
filter(!is.na(var_pretty)) %>%
distinct(var_database, var_pretty),
by = "var_database")
# City Lookup
mongo_conn_input <- fun_mongo_connect(host_name,
collection_name = "acs_place_S1810",
database_name = "ADA-PARC")
metro_snapshot_input <- mongo_conn_input$find(fields = '{"GEOID" : true, "NAME" : true}') %>%
mutate(label = case_when(
NAME == "Augusta-Richmond County consolidated government (balance), Georgia" ~
"Augusta, Georgia",
NAME == "Boise City city, Idaho" ~
"Boise, Idaho",
NAME == "Indianapolis city (balance), Indiana" ~
"Indianapolis, Indiana",
NAME == "Lexington-Fayette urban county, Kentucky" ~
"Lexington, Kentucky",
NAME == "Louisville/Jefferson County metro government (balance), Kentucky" ~
"Louisville, Kentucky",
NAME == "Macon-Bibb County, Georgia" ~
"Macon, Georgia",
NAME == "Nashville-Davidson metropolitan government (balance), Tennessee" ~
"Nashville, Tennessee",
NAME == "New York city, New York" ~
"New York City, New York",
NAME == "Urban Honolulu CDP, Hawaii" ~
"Honolulu, Hawaii",
TRUE ~ str_replace_all(NAME,
pattern = " (city|village|municipality|town), ",
replacement = ", "))) %>%
arrange(label)
metro_snapshot_place_full <- fun_pull_mongo_data(c("S1810", "S1811"),
host_name,
"place")
dict_location_crosswalk <- read_csv("https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/national-tile-map/dictionaries/dict_location_crosswalk.txt")
tibble::deframe(metro_snapshot_input %>%
select(label, GEOID)
tibble::deframe(metro_snapshot_input %>%
select(label, GEOID))
metro_snapshot_input %>%
select(label, GEOID)
temp_mongo_conn <- fun_mongo_connect(host_name,
collection_name = "acs_tract_S1810",
database_name = "ADA-PARC")
temp <- temp_mongo_conn$find()
temp <- temp %>% head(100)
temp %>%
select(GEOID:NAME, matches("_C02_"))
temp %>%
select(GEOID:NAME, matches("_C02_")) %>%
pivot_longer(cols = -c(GEOID:NAME),
names_to = c(".value", "variable"),
names_pattern = "(^[^_]+(?=_))[^_]*_(.*)")
temp %>%
select(GEOID:NAME, matches("_C02_")) %>%
pivot_longer(cols = -c(GEOID:NAME),
names_to = c("variable", ".value"),
names_pattern = "(^[^_]+(?=_))[^_]*_(.*)")
temp %>%
select(GEOID:NAME, matches("_C02_")) %>%
pivot_longer(cols = -c(GEOID:NAME),
names_to = c("variable", ".value"),
names_pattern = "((.*)_(.*)")
temp %>%
select(GEOID:NAME, matches("_C02_")) %>%
pivot_longer(cols = -c(GEOID:NAME),
names_to = c("variable", ".value"),
names_pattern = "(.*)_(.*)")
temp %>%
select(GEOID:NAME, matches("_C03_")) %>%
pivot_longer(cols = -c(GEOID:NAME),
names_to = c("variable", ".value"),
names_pattern = "(.*)_(.*)") %>%
mutate("variable" = str_replace_all(variable,
pattern = "_C03_",
replacement =  "_C02_"),
estimate = replace_na(estimate, 0))
View(dict_vars)
temp_values <- temp %>%
select(GEOID:NAME, matches("_C02_")) %>%
pivot_longer(cols = -c(GEOID:NAME),
names_to = c("variable", ".value"),
names_pattern = "(.*)_(.*)")
# Percent
temp_pct <- temp %>%
select(GEOID:NAME, matches("_C03_")) %>%
pivot_longer(cols = -c(GEOID:NAME),
names_to = c("variable", ".value"),
names_pattern = "(.*)_(.*)") %>%
mutate("variable" = str_replace_all(variable,
pattern = "_C03_",
replacement =  "_C02_"),
estimate = replace_na(estimate, 0))
temp_values %>%
left_join(.,
temp_pct %>%
select(GEOID, NAME, variable, "pct" = estimate),
by = c("GEOID", "NAME", "variable")) %>%
left_join(.,
dict_vars %>%
select("variable" = var_database,
"label" = var_pretty),
by = "variable")
temp_values %>%
left_join(.,
temp_pct %>%
select(GEOID, NAME, variable, "pct" = estimate),
by = c("GEOID", "NAME", "variable")) %>%
left_join(.,
dict_vars %>%
select("variable" = var_database,
"label" = var_pretty,
"category" = national_dropdown_label),
by = "variable")
temp_values %>%
left_join(.,
temp_pct %>%
select(GEOID, NAME, variable, "pct" = estimate),
by = c("GEOID", "NAME", "variable")) %>%
left_join(.,
dict_vars %>%
select("variable" = var_database,
"label" = var_pretty),
by = "variable")
test <- temp_values %>%
left_join(.,
temp_pct %>%
select(GEOID, NAME, variable, "pct" = estimate),
by = c("GEOID", "NAME", "variable")) %>%
left_join(.,
dict_vars %>%
select("variable" = var_database,
"label" = var_pretty),
by = "variable")
View(test)
View(dict_vars)
test <- temp_values %>%
left_join(.,
temp_pct %>%
select(GEOID, NAME, variable, "pct" = estimate),
by = c("GEOID", "NAME", "variable")) %>%
left_join(.,
dict_vars %>%
select("variable" = var_database,
"label" = var_pretty),
by = "variable") %>%
# mutate(label = str_remove_all(label, "Estimate; With a disability; Subject; ")) %>%
# mutate(label = case_when(variable == "S1810_C02_001" ~
#                            "Overall; People with Disabilities",
#                          TRUE ~ label)) %>%
separate(label, into = c("category", "label"),
sep = ", ", extra = "merge")
View(test)
metro_snapshot_place_full
metro_snapshot_place_full %>%
select(GEOID,
NAME,
"pwd" = S1810_C02_001_estimate,
"total_population" = S1810_C01_001_estimate,
"pwd_pct" = S1810_C03_001_estimate) %>%
ggplot(aes(text = paste0("City: ", NAME,
"<br>PWD: ", scales::comma(pwd),
" (", pwd_pct, "%)",
"<br>Total Pop.",
scales::comma(total_population)))) +
geom_point(stat = "identity",
aes(x = total_population, y = pwd_pct))
# ====================
# Setup
# ====================
# Packages
library(tidyverse); library(readxl); library(openxlsx); library(summarytools); library(janitor)
library(sf); library(geofacet); library(leaflet); library(leaflet.extras);
library(htmltools); library(shiny); library(shinyWidgets); library(flexdashboard)
library(colourpicker); library(DT); library(gghighlight)
library(knitr); library(kableExtra)
library(scales); library(hrbrthemes); library(ggthemes)
library(extrafont); library(plotly)
library(mongolite)
library(here)
# Set this to host_prod or host_dev
host_name = "host_dev"
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
# Load variable dictionary for relating tables, variable codes, and readable values
dict_vars <- fun_pull_mongo_data(tables = "dict_vars", host_name = host_name)
### ------------------------
### National data import and clean
###
# This script takes the national_* objects and transforms them
# into the final datasets for mapping
source(here("national_import.R"), local = TRUE)
# ====================
# Setup
# ====================
# Packages
library(tidyverse); library(readxl); library(openxlsx); library(summarytools); library(janitor)
library(sf); library(geofacet); library(leaflet); library(leaflet.extras);
library(htmltools); library(shiny); library(shinyWidgets); library(flexdashboard)
library(colourpicker); library(DT); library(gghighlight)
library(knitr); library(kableExtra)
library(scales); library(hrbrthemes); library(ggthemes)
library(extrafont); library(plotly)
library(mongolite)
library(here)
# Set this to host_prod or host_dev
host_name = "host_dev"
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
# Load variable dictionary for relating tables, variable codes, and readable values
dict_vars <- fun_pull_mongo_data(tables = "dict_vars", host_name = host_name)
### ------------------------
### National data import and clean
###
# This script takes the national_* objects and transforms them
# into the final datasets for mapping
source(here("national_import.R"), local = TRUE)
eval(sym("demographics"))
# Static check
tibble::deframe(
dict_vars %>%
filter(var_desc == "demographics",
var_readable %in% (
demographics %>%
select(-c(GEOID, NAME, ABBR)) %>%
names()
),
!is.na(var_pretty)) %>%
select(var_pretty, var_readable))
# Static check
tibble::deframe(
dict_vars %>%
filter(var_desc == "demographics",
var_readable %in% (
demographics %>%
select(-c(GEOID, NAME, ABBR)) %>%
names()
),
!is.na(var_pretty)) %>%
select(national_dropdown_label, var_readable))
# Static check
tibble::deframe(
dict_vars %>%
filter(var_desc == "demographics",
var_readable %in% (
demographics %>%
select(-c(GEOID, NAME, ABBR)) %>%
names()
),
!is.na(var_pretty)) %>%
select(national_dropdown_label, var_readable)) %>%
drop_na()
# Static check
tibble::deframe(
dict_vars %>%
filter(var_desc == "demographics",
var_readable %in% (
demographics %>%
select(-c(GEOID, NAME, ABBR)) %>%
names()
),
!is.na(national_dropdown_label)) %>%
select(national_dropdown_label, var_readable))
# Static check
tibble::deframe(
dict_vars %>%
filter(var_desc == "work_economic",
var_readable %in% (
work_economic %>%
select(-c(GEOID, NAME, ABBR)) %>%
names()
),
!is.na(national_dropdown_label)) %>%
select(national_dropdown_label, var_readable))
# Load variable dictionary for relating tables, variable codes, and readable values
dict_vars <- read_csv(here::here("dictionaries", "dict_vars.csv"))
# Static check
tibble::deframe(
dict_vars %>%
filter(var_desc == "work_economic",
var_readable %in% (
work_economic %>%
select(-c(GEOID, NAME, ABBR)) %>%
names()
),
!is.na(national_dropdown_label)) %>%
select(national_dropdown_label, var_readable))
mongo_conn <- fun_mongo_connect(host_name = "host_dev",
collection_name = "dict_vars",
database_name = "ADA-PARC")
mongo_conn$drop()
mongo_conn$insert(dict_vars)
mongo_conn <- fun_mongo_connect(host_name = "host_prod",
collection_name = "dict_vars",
database_name = "ADA-PARC")
mongo_conn$drop()
mongo_conn$insert(dict_vars)
