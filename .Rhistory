mongo_conn$drop()
mongo_conn$insert([[list]])
# Message
msg <- paste0("Writing ", as.character(nrow([[list]])),
" rows to ", names([list]))
print(msg)
# Disconnect
rm(mongo_conn)
}
# Write to MongoDB function
walk(.x = df,
.f = ~{
# Connect to MongoDB database/collection
mongo_conn <- mongo_connect(collection_name = names([.x]),
database_name = "ADA-PARC")
# Write to database
mongo_conn$drop()
mongo_conn$insert([[.x]])
# Message
msg <- paste0("Writing ", as.character(nrow([[.x]])),
" rows to ", names([.x]))
print(msg)
# Disconnect
rm(mongo_conn)
}
)
write_to_mongo_db <- function(list_of_dfs) {
# Connect to MongoDB database/collection
mongo_conn <- mongo_connect(collection_name = names([list_of_dfs]),
database_name = "ADA-PARC")
# Write to database
mongo_conn$drop()
mongo_conn$insert([[list_of_dfs]])
# Message
msg <- paste0("Writing ", as.character(nrow([[list_of_dfs]])),
" rows to ", names([list_of_dfs]))
print(msg)
# Disconnect
rm(mongo_conn)
}
df <- acs_place_subject_raw
geo_name <- "place"
# Group by table name
df <- acs_place_subject_raw %>%
left_join(lookup_var %>% select(variable, table_name), by = "variable") %>%
group_by(table_name)
# Get table names to rename list elements
df_group_names <- group_keys(df) %>%
mutate("table_name" = paste0("acs_", geo_name, "_", table_name))
# Reconfigure for database purposes
df_list <- df %>%
group_map( ~{ .x %>%
pivot_wider(names_from = variable, values_from = c(estimate, moe)) },
.keep = FALSE)
# Set names for list
df_list <- df_list %>%
setNames(df_group_names$table_name)
# Write to MongoDB function
walk(.x = df_list,
.f = ~{
# Connect to MongoDB database/collection
mongo_conn <- mongo_connect(collection_name = names([.x]),
database_name = "ADA-PARC")
# Write to database
mongo_conn$drop()
mongo_conn$insert([[.x]])
# Message
msg <- paste0("Writing ", as.character(nrow([[.x]])),
" rows to ", names([.x]))
print(msg)
# Disconnect
rm(mongo_conn)
}
)
df_list %>%
walk(
~{ # Connect to MongoDB database/collection
mongo_conn <- mongo_connect(collection_name = names([.x]),
database_name = "ADA-PARC")
# Write to database
mongo_conn$drop()
mongo_conn$insert([[.x]])
# Message
msg <- paste0("Writing ", as.character(nrow([[.x]])),
" rows to ", names([.x]))
print(msg)
# Disconnect
rm(mongo_conn)
}
)
# Organize data into list of dfs and export
fun_write_by_geo_table <- function(df, geo_name) {
# Group by table name
df <- acs_place_subject_raw %>%
left_join(lookup_var %>% select(variable, table_name), by = "variable") %>%
group_by(table_name)
# Get table names to rename list elements
df_group_names <- group_keys(df) %>%
mutate("table_name" = paste0("acs_", geo_name, "_", table_name))
# Reconfigure for database purposes
df_list <- df %>%
group_map( ~{ .x %>%
pivot_wider(names_from = variable, values_from = c(estimate, moe)) },
.keep = FALSE)
# Set names for list
df_list <- df_list %>%
setNames(df_group_names$table_name)
return(df_list)
}
# Organize data into list of dfs and export
fun_write_by_geo_table <- function(df, geo_name) {
# Group by table name
df <- df %>%
left_join(lookup_var %>% select(variable, table_name), by = "variable") %>%
group_by(table_name)
# Get table names to rename list elements
df_group_names <- group_keys(df) %>%
mutate("table_name" = paste0("acs_", geo_name, "_", table_name))
# Reconfigure for database purposes
df_list <- df %>%
group_map( ~{ .x %>%
pivot_wider(names_from = variable, values_from = c(estimate, moe)) },
.keep = FALSE)
# Set names for list
df_list <- df_list %>%
setNames(df_group_names$table_name)
return(df_list)
}
df_list <- fun_write_by_geo_table(acs_place_subject_raw, "place")
df_list %>%
walk(
{ # Connect to MongoDB database/collection
mongo_conn <- mongo_connect(collection_name = names([.x]),
database_name = "ADA-PARC")
# Write to database
mongo_conn$drop()
mongo_conn$insert([[.x]])
# Message
msg <- paste0("Writing ", as.character(nrow([[.x]])),
" rows to ", names([.x]))
print(msg)
# Disconnect
rm(mongo_conn)
}
)
# Write to MongoDB function
df_list %>%
walk(~{ # Connect to MongoDB database/collection
mongo_conn <- mongo_connect(collection_name = names([.x]),
database_name = "ADA-PARC")
# Write to database
mongo_conn$drop()
mongo_conn$insert([[.x]])
# Message
msg <- paste0("Writing ", as.character(nrow([[.x]])),
" rows to ", names([.x]))
print(msg)
# Disconnect
rm(mongo_conn)
}
)
df_list %>%
walk(
~{ # Connect to MongoDB database/collection
mongo_conn <- mongo_connect(collection_name = names(.x[]),
database_name = "ADA-PARC")
# Write to database
mongo_conn$drop()
mongo_conn$insert(.x[[]])
# Message
msg <- paste0("Writing ", as.character(nrow(.x[[]])),
" rows to ", names(.x[]))
print(msg)
# Disconnect
rm(mongo_conn)
}
)
# Write to MongoDB function
df_list %>%
walk(
~{ # Connect to MongoDB database/collection
mongo_conn <- mongo_connect(collection_name = names(.x),
database_name = "ADA-PARC")
# Write to database
mongo_conn$drop()
mongo_conn$insert(.x)
# Message
msg <- paste0("Writing ", as.character(nrow(.x)),
" rows to ", names(.x))
print(msg)
# Disconnect
rm(mongo_conn)
}
)
names(df_list)
df_list[1]
names(df_list[1])
df_list[1] %>%
map(
~{ # Connect to MongoDB database/collection
mongo_conn <- mongo_connect(collection_name = names(.x),
database_name = "ADA-PARC")
# Write to database
mongo_conn$drop()
mongo_conn$insert(.x)
# Message
msg <- paste0("Writing ", as.character(nrow(.x)),
" rows to ", names(.x))
print(msg)
# Disconnect
rm(mongo_conn)
}
)
df_list[1] %>%
map(
~{
print(.x)
#
# # Connect to MongoDB database/collection
# mongo_conn <- mongo_connect(collection_name = names(.x),
#                             database_name = "ADA-PARC")
#
# # Write to database
# mongo_conn$drop()
# mongo_conn$insert(.x)
#
# # Message
# msg <- paste0("Writing ", as.character(nrow(.x)),
#               " rows to ", names(.x))
# print(msg)
#
# # Disconnect
# rm(mongo_conn)
}
)
df_list[1] %>%
map2(.x = .,
.y = names(.),
~{
print(.y)
#
# # Connect to MongoDB database/collection
# mongo_conn <- mongo_connect(collection_name = names(.x),
#                             database_name = "ADA-PARC")
#
# # Write to database
# mongo_conn$drop()
# mongo_conn$insert(.x)
#
# # Message
# msg <- paste0("Writing ", as.character(nrow(.x)),
#               " rows to ", names(.x))
# print(msg)
#
# # Disconnect
# rm(mongo_conn)
}
)
map2(.x = df_list,
.y = names(df_list),
.f = ~{
# Connect to MongoDB database/collection
mongo_conn <- mongo_connect(collection_name = .y,
database_name = "ADA-PARC")
# Write to database
mongo_conn$drop()
mongo_conn$insert(.x)
# Message
msg <- paste0("Writing ", as.character(nrow(.x)),
" rows to ", .y)
print(msg)
# Disconnect
rm(mongo_conn)
}
)
# Organize data into list of dfs and export
fun_write_by_geo_table <- function(df, geo_name) {
# Group by table name
df <- df %>%
left_join(lookup_var %>% select(variable, table_name), by = "variable") %>%
group_by(table_name)
# Get table names to rename list elements
df_group_names <- group_keys(df) %>%
mutate("table_name" = paste0("acs_", geo_name, "_", table_name))
# Reconfigure for database purposes
df_list <- df %>%
group_map( ~{ .x %>%
pivot_wider(names_from = variable, values_from = c(estimate, moe)) },
.keep = FALSE)
# Set names for list
df_list <- df_list %>%
setNames(df_group_names$table_name)
# Write to MongoDB function
map2(.x = df_list,
.y = names(df_list),
.f = ~{
# Connect to MongoDB database/collection
mongo_conn <- mongo_connect(collection_name = .y,
database_name = "ADA-PARC")
# Write to database
mongo_conn$drop()
mongo_conn$insert(.x)
# Message
msg <- paste0("Writing ", as.character(nrow(.x)),
" rows to ", .y)
print(msg)
# Disconnect
rm(mongo_conn)
}
)
}
# Remove temporary tables
rm(acs_place_subject_vars, acs_tract_subject_vars)
rm(geo_name)
# Places
fun_write_by_geo_table(df = acs_place_subject_raw, geo = "place")
# Tracts
fun_write_by_geo_table(df = acs_tract_subject_raw, geo = "tract")
# Packages
library(tidyverse); library(readxl); library(openxlsx); library(summarytools); library(janitor)
library(sf); library(urbnmapr); library(leaflet); library(leaflet.extras);
library(htmltools); library(shiny); library(shinyWidgets); library(flexdashboard)
library(colourpicker); library(DT); library(gghighlight)
library(knitr); library(kableExtra)
library(scales); library(hrbrthemes); library(ggthemes)
library(extrafont); library(plotly)
library(mongolite)
# Must install urbnmapr via GitHUb if is not already installed
# install.packages("devtools")
# devtools::install_github("UrbanInstitute/urbnmapr")
# Load API keys and database connection information
source("secret.R", local = TRUE)
map_data <- function(data) {
data %>%
left_join(states_sf, ., by = c("state_name", "state_abbv")) %>%
st_transform(4326)
}
create_palette <- function(data, selected) {
colorQuantile(palette = input$access_map_palette,
domain = pull(data, !!sym(selected)),
n = 4)
}
render_map <- function(data, selected, palette) {
title <- selected
map <- data %>%
mutate(map_focus = !!sym(selected)) %>%
leaflet() %>%
clearShapes() %>%
addResetMapButton() %>%
addPolygons(stroke = TRUE, color = "#444444", weight = 1, smoothFactor = 0,
fillColor = ~palette(map_focus),
fillOpacity = 1,
popup = ~paste(state_name, " (", state_abbv, ")", "<br>",
percent(map_focus,
scale = 1, accuracy = 0.1)),
layerId = ~state_name) %>%
addLegend(position = "topright", pal = palette,
values = ~map_focus,
labFormat =  function(type, cuts, p) {
n = length(cuts)
paste0(as.numeric(cuts)[-n], " &ndash; ", as.numeric(cuts)[-1])
},
title = title)
map
}
# Lookup
mongo_conn_lu <- mongo_connect(collection_name = "acs_variable_lu",
database_name = "ADA-PARC")
metro_snapshot_lu <-mongo_conn_lu$find()
rm(mongo_conn_lu)
# Tabular
mongo_conn_tab <- mongo_connect(collection_name = "acs_tract_S1810",
database_name = "ADA-PARC")
metro_snapshot_tract_full <- mongo_conn_tab$find()
metro_snapshot_tract_full %>%
head()
metro_snapshot_tract_full %>%
filter(GEOID == "01051031200") %>%
select(GEOID:NAME, matches("_C02_")) %>%
pivot_longer(cols = -c(GEOID:NAME),
names_to = c(".value", "variable"),
names_pattern = "(^[^_]+(?=_))[^_]*_(.*)") %>%
left_join(.,
metro_snapshot_lu %>% select(variable, label),
by = "variable") %>%
mutate(label = str_remove_all(label, "Estimate; With a disability; Subject; ")) %>%
mutate(label = case_when(variable == "S1810_C02_001" ~
"Overall; Persons with Disabilities",
TRUE ~ label)) %>%
separate(label, into = c("category", "label"), sep = "; ") %>%
mutate(category = str_to_title(category))
temp %>%
metro_snapshot_tract_full %>%
filter(GEOID == "01051031200") %>%
select(GEOID:NAME, matches("_C02_")) %>%
pivot_longer(cols = -c(GEOID:NAME),
names_to = c(".value", "variable"),
names_pattern = "(^[^_]+(?=_))[^_]*_(.*)") %>%
left_join(.,
metro_snapshot_lu %>% select(variable, label),
by = "variable") %>%
mutate(label = str_remove_all(label, "Estimate; With a disability; Subject; ")) %>%
mutate(label = case_when(variable == "S1810_C02_001" ~
"Overall; Persons with Disabilities",
TRUE ~ label)) %>%
separate(label, into = c("category", "label"), sep = "; ")
metro_snapshot_tract_full %>%
filter(GEOID == "01051031200") %>%
select(GEOID:NAME, matches("_C02_")) %>%
pivot_longer(cols = -c(GEOID:NAME),
names_to = c(".value", "variable"),
names_pattern = "(^[^_]+(?=_))[^_]*_(.*)") %>%
left_join(.,
metro_snapshot_lu %>% select(variable, label),
by = "variable") %>%
mutate(label = str_remove_all(label, "Estimate; With a disability; Subject; ")) %>%
mutate(label = case_when(variable == "S1810_C02_001" ~
"Overall; Persons with Disabilities",
TRUE ~ label)) %>%
separate(label, into = c("category", "label"), sep = "; ")
metro_snapshot_tract_full %>%
filter(GEOID == "01051031200") %>%
select(GEOID:NAME, matches("_C02_")) %>%
pivot_longer(cols = -c(GEOID:NAME),
names_to = c(".value", "variable"),
names_pattern = "(^[^_]+(?=_))[^_]*_(.*)") %>%
left_join(.,
metro_snapshot_lu %>% select(variable, label),
by = "variable") %>%
mutate(label = str_remove_all(label, "Estimate; With a disability; Subject; ")) %>%
mutate(label = case_when(variable == "S1810_C02_001" ~
"Overall; Persons with Disabilities",
TRUE ~ label))
test <- metro_snapshot_tract_full %>%
filter(GEOID == "01051031200") %>%
select(GEOID:NAME, matches("_C02_")) %>%
pivot_longer(cols = -c(GEOID:NAME),
names_to = c(".value", "variable"),
names_pattern = "(^[^_]+(?=_))[^_]*_(.*)") %>%
left_join(.,
metro_snapshot_lu %>% select(variable, label),
by = "variable") %>%
mutate(label = str_remove_all(label, "Estimate; With a disability; Subject; ")) %>%
mutate(label = case_when(variable == "S1810_C02_001" ~
"Overall; Persons with Disabilities",
TRUE ~ label)) %>%
separate(label, into = c("category", "label"), sep = "; ")
View(test)
test <- metro_snapshot_tract_full %>%
filter(GEOID == "01051031200") %>%
select(GEOID:NAME, matches("_C02_")) %>%
pivot_longer(cols = -c(GEOID:NAME),
names_to = c(".value", "variable"),
names_pattern = "(^[^_]+(?=_))[^_]*_(.*)") %>%
left_join(.,
metro_snapshot_lu %>% select(variable, label),
by = "variable") %>%
mutate(label = str_remove_all(label, "Estimate; With a disability; Subject; ")) %>%
mutate(label = case_when(variable == "S1810_C02_001" ~
"Overall; Persons with Disabilities",
TRUE ~ label))
View(test)
test <- metro_snapshot_tract_full %>%
filter(GEOID == "01051031200") %>%
select(GEOID:NAME, matches("_C02_")) %>%
pivot_longer(cols = -c(GEOID:NAME),
names_to = c(".value", "variable"),
names_pattern = "(^[^_]+(?=_))[^_]*_(.*)") %>%
left_join(.,
metro_snapshot_lu %>% select(variable, label),
by = "variable") %>%
mutate(label = str_remove_all(label, "Estimate; With a disability; Subject; ")) %>%
mutate(label = case_when(variable == "S1810_C02_001" ~
"Overall; Persons with Disabilities",
TRUE ~ label)) %>%
separate(label, into = c("category", "label"), sep = "; ")
temp %>%
test <- metro_snapshot_tract_full %>%
filter(GEOID == "01051031200") %>%
select(GEOID:NAME, matches("_C02_")) %>%
pivot_longer(cols = -c(GEOID:NAME),
names_to = c(".value", "variable"),
names_pattern = "(^[^_]+(?=_))[^_]*_(.*)") %>%
left_join(.,
metro_snapshot_lu %>% select(variable, label),
by = "variable") %>%
mutate(label = str_remove_all(label, "Estimate; With a disability; Subject; ")) %>%
mutate(label = case_when(variable == "S1810_C02_001" ~
"Overall; Persons with Disabilities",
TRUE ~ label)) %>%
separate(label, into = c("category", "label"),
sep = "; ", extra = "merge") %>%
filter(category != "DISABILITY TYPE BY DETAILED AGE") %>%
mutate(category = str_to_title(category))
test <- metro_snapshot_tract_full %>%
filter(GEOID == "01051031200") %>%
select(GEOID:NAME, matches("_C02_")) %>%
pivot_longer(cols = -c(GEOID:NAME),
names_to = c(".value", "variable"),
names_pattern = "(^[^_]+(?=_))[^_]*_(.*)") %>%
left_join(.,
metro_snapshot_lu %>% select(variable, label),
by = "variable") %>%
mutate(label = str_remove_all(label, "Estimate; With a disability; Subject; ")) %>%
mutate(label = case_when(variable == "S1810_C02_001" ~
"Overall; Persons with Disabilities",
TRUE ~ label)) %>%
separate(label, into = c("category", "label"),
sep = "; ", extra = "merge") %>%
filter(category != "DISABILITY TYPE BY DETAILED AGE") %>%
mutate(category = str_to_title(category))
View(test)
