separate(label, into = c("category", "label"),
sep = ", ", extra = "merge")
View(test)
metro_snapshot_place_full
metro_snapshot_place_full %>%
select(GEOID,
NAME,
"pwd" = S1810_C02_001_estimate,
"total_population" = S1810_C01_001_estimate,
"pwd_pct" = S1810_C03_001_estimate) %>%
ggplot(aes(text = paste0("City: ", NAME,
"<br>PWD: ", scales::comma(pwd),
" (", pwd_pct, "%)",
"<br>Total Pop.",
scales::comma(total_population)))) +
geom_point(stat = "identity",
aes(x = total_population, y = pwd_pct))
# ====================
# Setup
# ====================
# Packages
library(tidyverse); library(readxl); library(openxlsx); library(summarytools); library(janitor)
library(sf); library(geofacet); library(leaflet); library(leaflet.extras);
library(htmltools); library(shiny); library(shinyWidgets); library(flexdashboard)
library(colourpicker); library(DT); library(gghighlight)
library(knitr); library(kableExtra)
library(scales); library(hrbrthemes); library(ggthemes)
library(extrafont); library(plotly)
library(mongolite)
library(here)
# Set this to host_prod or host_dev
host_name = "host_dev"
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
# Load variable dictionary for relating tables, variable codes, and readable values
dict_vars <- fun_pull_mongo_data(tables = "dict_vars", host_name = host_name)
### ------------------------
### National data import and clean
###
# This script takes the national_* objects and transforms them
# into the final datasets for mapping
source(here("national_import.R"), local = TRUE)
# ====================
# Setup
# ====================
# Packages
library(tidyverse); library(readxl); library(openxlsx); library(summarytools); library(janitor)
library(sf); library(geofacet); library(leaflet); library(leaflet.extras);
library(htmltools); library(shiny); library(shinyWidgets); library(flexdashboard)
library(colourpicker); library(DT); library(gghighlight)
library(knitr); library(kableExtra)
library(scales); library(hrbrthemes); library(ggthemes)
library(extrafont); library(plotly)
library(mongolite)
library(here)
# Set this to host_prod or host_dev
host_name = "host_dev"
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
# Load variable dictionary for relating tables, variable codes, and readable values
dict_vars <- fun_pull_mongo_data(tables = "dict_vars", host_name = host_name)
### ------------------------
### National data import and clean
###
# This script takes the national_* objects and transforms them
# into the final datasets for mapping
source(here("national_import.R"), local = TRUE)
eval(sym("demographics"))
# Static check
tibble::deframe(
dict_vars %>%
filter(var_desc == "demographics",
var_readable %in% (
demographics %>%
select(-c(GEOID, NAME, ABBR)) %>%
names()
),
!is.na(var_pretty)) %>%
select(var_pretty, var_readable))
# Static check
tibble::deframe(
dict_vars %>%
filter(var_desc == "demographics",
var_readable %in% (
demographics %>%
select(-c(GEOID, NAME, ABBR)) %>%
names()
),
!is.na(var_pretty)) %>%
select(national_dropdown_label, var_readable))
# Static check
tibble::deframe(
dict_vars %>%
filter(var_desc == "demographics",
var_readable %in% (
demographics %>%
select(-c(GEOID, NAME, ABBR)) %>%
names()
),
!is.na(var_pretty)) %>%
select(national_dropdown_label, var_readable)) %>%
drop_na()
# Static check
tibble::deframe(
dict_vars %>%
filter(var_desc == "demographics",
var_readable %in% (
demographics %>%
select(-c(GEOID, NAME, ABBR)) %>%
names()
),
!is.na(national_dropdown_label)) %>%
select(national_dropdown_label, var_readable))
# Static check
tibble::deframe(
dict_vars %>%
filter(var_desc == "work_economic",
var_readable %in% (
work_economic %>%
select(-c(GEOID, NAME, ABBR)) %>%
names()
),
!is.na(national_dropdown_label)) %>%
select(national_dropdown_label, var_readable))
# Load variable dictionary for relating tables, variable codes, and readable values
dict_vars <- read_csv(here::here("dictionaries", "dict_vars.csv"))
# Static check
tibble::deframe(
dict_vars %>%
filter(var_desc == "work_economic",
var_readable %in% (
work_economic %>%
select(-c(GEOID, NAME, ABBR)) %>%
names()
),
!is.na(national_dropdown_label)) %>%
select(national_dropdown_label, var_readable))
mongo_conn <- fun_mongo_connect(host_name = "host_dev",
collection_name = "dict_vars",
database_name = "ADA-PARC")
mongo_conn$drop()
mongo_conn$insert(dict_vars)
mongo_conn <- fun_mongo_connect(host_name = "host_prod",
collection_name = "dict_vars",
database_name = "ADA-PARC")
mongo_conn$drop()
mongo_conn$insert(dict_vars)
# ====================
# Setup
# ====================
# Packages
library(tidyverse); library(readxl); library(openxlsx); library(summarytools); library(janitor)
library(sf); library(geofacet); library(leaflet); library(leaflet.extras);
library(htmltools); library(shiny); library(shinyWidgets); library(flexdashboard)
library(colourpicker); library(DT); library(gghighlight)
library(knitr); library(kableExtra)
library(scales); library(hrbrthemes); library(ggthemes)
library(extrafont); library(plotly)
library(mongolite)
library(here)
# Set this to host_prod or host_dev
host_name = "host_dev"
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
# Load variable dictionary for relating tables, variable codes, and readable values
dict_vars <- fun_pull_mongo_data(tables = "dict_vars", host_name = host_name)
### ------------------------
### National data import and clean
###
# This script takes the national_* objects and transforms them
# into the final datasets for mapping
source(here("national_import.R"), local = TRUE)
# Static check
# Census Tract 59.01, Montgomery County, Alabama
temp_mongo_conn <- fun_mongo_connect(host_name = "host_dev",
collection_name = "acs_tract_S1810",
database_name = "ADA-PARC")
tract_snapshot <- temp_mongo_conn$find(
query = sprintf('{ "GEOID" : { "$in" : ["01101005901" ] } }'))
rm(tract_snapshot)
temp <- temp_mongo_conn$find(
query = sprintf('{ "GEOID" : { "$in" : ["01101005901" ] } }'))
temp %>%
select(GEOID:NAME, matches("_C02_")) %>%
pivot_longer(cols = -c(GEOID:NAME),
names_to = c("variable", ".value"),
names_pattern = "(.*)_(.*)")
temp %>%
select(GEOID:NAME, matches("_C03_")) %>%
pivot_longer(cols = -c(GEOID:NAME),
names_to = c("variable", ".value"),
names_pattern = "(.*)_(.*)") %>%
mutate("variable" = str_replace_all(variable,
pattern = "_C03_",
replacement =  "_C02_"),
estimate = replace_na(estimate, 0))
# Values
temp_values <- temp %>%
select(GEOID:NAME, matches("_C02_")) %>%
pivot_longer(cols = -c(GEOID:NAME),
names_to = c("variable", ".value"),
names_pattern = "(.*)_(.*)")
# Percent
temp_pct <- temp %>%
select(GEOID:NAME, matches("_C03_")) %>%
pivot_longer(cols = -c(GEOID:NAME),
names_to = c("variable", ".value"),
names_pattern = "(.*)_(.*)") %>%
mutate("variable" = str_replace_all(variable,
pattern = "_C03_",
replacement =  "_C02_"),
estimate = replace_na(estimate, 0))
test <- temp_values %>%
left_join(.,
temp_pct %>%
select(GEOID, NAME, variable, "pct" = estimate),
by = c("GEOID", "NAME", "variable")) %>%
left_join(.,
dict_vars %>%
select("category" = var_topic,
"label" = var_pretty,
"variable" = var_database),
by = "variable")
View(test)
View(temp_values)
dict_vars <- read_csv(here("dictionaries", "dict_vars.csv"))
mongo_conn <- fun_mongo_connect(host_name = "host_dev",
collection_name = "dict_vars",
database_name = "ADA-PARC")
mongo_conn$drop()
mongo_conn$insert(dict_vars)
# Load variable dictionary for relating tables, variable codes, and readable values
dict_vars <- fun_pull_mongo_data(tables = "dict_vars", host_name = host_name)
test <- temp_values %>%
left_join(.,
temp_pct %>%
select(GEOID, NAME, variable, "pct" = estimate),
by = c("GEOID", "NAME", "variable")) %>%
left_join(.,
dict_vars %>%
select("category" = var_topic,
"label" = var_pretty,
"variable" = var_database),
by = "variable")
View(test)
test <- temp_values %>%
left_join(.,
temp_pct %>%
select(GEOID, NAME, variable, "pct" = estimate),
by = c("GEOID", "NAME", "variable")) %>%
left_join(.,
dict_vars %>%
select("category" = var_topic,
"label" = var_pretty,
"variable" = var_database),
by = "variable") %>%
mutate(label = str_remove_all(label,
"Total Persons with Disabilities, ")) %>%
mutate(label = case_when(variable == "S1810_C02_001" ~
"People with Disabilities",
TRUE ~ label)) %>%
mutate(category = str_to_title(category)) %>%
select(GEOID, NAME, category, variable, label,
estimate, moe, pct)
temp_values
temp_values <- temp %>%
select(GEOID:NAME, matches("_C02_")) %>%
pivot_longer(cols = -c(GEOID:NAME),
names_to = c("variable", ".value"),
names_pattern = "(.*)_(.*)") %>%
filter(!variable %in% c("S1810_C02_004",
"S1810_C02_005"))
# Percent
temp_pct <- temp %>%
select(GEOID:NAME, matches("_C03_")) %>%
pivot_longer(cols = -c(GEOID:NAME),
names_to = c("variable", ".value"),
names_pattern = "(.*)_(.*)") %>%
mutate("variable" = str_replace_all(variable,
pattern = "_C03_",
replacement =  "_C02_"),
estimate = replace_na(estimate, 0))
# Output
test <- temp_values %>%
left_join(.,
temp_pct %>%
select(GEOID, NAME, variable, "pct" = estimate),
by = c("GEOID", "NAME", "variable")) %>%
left_join(.,
dict_vars %>%
select("category" = var_topic,
"label" = var_pretty,
"variable" = var_database),
by = "variable")
dict_vars <- read_csv(here("dictionaries", "dict_vars.csv"))
mongo_conn <- fun_mongo_connect(host_name = "host_dev",
collection_name = "dict_vars",
database_name = "ADA-PARC")
mongo_conn$drop()
mongo_conn$insert(dict_vars)
# Load variable dictionary for relating tables, variable codes, and readable values
dict_vars <- fun_pull_mongo_data(tables = "dict_vars", host_name = host_name)
temp_values <- temp %>%
select(GEOID:NAME, matches("_C02_")) %>%
pivot_longer(cols = -c(GEOID:NAME),
names_to = c("variable", ".value"),
names_pattern = "(.*)_(.*)") %>%
filter(!variable %in% c("S1810_C02_004"))
# Percent
temp_pct <- temp %>%
select(GEOID:NAME, matches("_C03_")) %>%
pivot_longer(cols = -c(GEOID:NAME),
names_to = c("variable", ".value"),
names_pattern = "(.*)_(.*)") %>%
mutate("variable" = str_replace_all(variable,
pattern = "_C03_",
replacement =  "_C02_"),
estimate = replace_na(estimate, 0))
test <- temp_values %>%
left_join(.,
temp_pct %>%
select(GEOID, NAME, variable, "pct" = estimate),
by = c("GEOID", "NAME", "variable")) %>%
left_join(.,
dict_vars %>%
select("category" = var_topic,
"label" = var_pretty,
"variable" = var_database),
by = "variable") %>%
mutate(label = str_remove_all(label,
"Total Persons with Disabilities, ")) %>%
mutate(label = case_when(variable == "S1810_C02_001" ~
"People with Disabilities",
TRUE ~ label))
temp %>%
select(GEOID:NAME, matches("_C02_")) %>%
pivot_longer(cols = -c(GEOID:NAME),
names_to = c("variable", ".value"),
names_pattern = "(.*)_(.*)") %>%
filter(!variable %in% c("S1810_C02_004")) %>%
mutate("variable" = fct_relevel(variable,
c("S1810_C02_011",
"S1810_C02_012"),
after = "S1810_C02_005"))
test %>% pull(variable)
temp %>%
select(GEOID:NAME, matches("_C02_")) %>%
pivot_longer(cols = -c(GEOID:NAME),
names_to = c("variable", ".value"),
names_pattern = "(.*)_(.*)") %>%
filter(!variable %in% c("S1810_C02_004")) %>%
mutate("variable" = fct_relevel(variable,
c("S1810_C02_011",
"S1810_C02_012"),
after = 4))
temp %>%
select(GEOID:NAME, matches("_C02_")) %>%
pivot_longer(cols = -c(GEOID:NAME),
names_to = c("variable", ".value"),
names_pattern = "(.*)_(.*)") %>%
filter(!variable %in% c("S1810_C02_004")) %>%
mutate("variable" = fct_relevel(variable,
c("S1810_C02_011",
"S1810_C02_012"),
after = 4)) %>%
arrange(variable)
# Values (Remove White/Hispanic, reorder Race topic)
temp_values <- temp %>%
select(GEOID:NAME, matches("_C02_")) %>%
pivot_longer(cols = -c(GEOID:NAME),
names_to = c("variable", ".value"),
names_pattern = "(.*)_(.*)") %>%
filter(!variable %in% c("S1810_C02_004")) %>%
mutate("variable" = fct_relevel(variable,
c("S1810_C02_011",
"S1810_C02_012"),
after = 4)) %>%
arrange(variable)
# Percent
temp_pct <- temp %>%
select(GEOID:NAME, matches("_C03_")) %>%
pivot_longer(cols = -c(GEOID:NAME),
names_to = c("variable", ".value"),
names_pattern = "(.*)_(.*)") %>%
mutate("variable" = str_replace_all(variable,
pattern = "_C03_",
replacement =  "_C02_"),
estimate = replace_na(estimate, 0))
temp_values %>%
left_join(.,
temp_pct %>%
select(GEOID, NAME, variable, "pct" = estimate),
by = c("GEOID", "NAME", "variable")) %>%
left_join(.,
dict_vars %>%
select("category" = var_topic,
"label" = var_pretty,
"variable" = var_database),
by = "variable") %>%
mutate(label = str_remove_all(label,
"Total Persons with Disabilities, ")) %>%
mutate(label = case_when(variable == "S1810_C02_001" ~
"People with Disabilities",
TRUE ~ label))
temp %>%
select(GEOID:NAME, matches("_C03_")) %>%
pivot_longer(cols = -c(GEOID:NAME),
names_to = c("variable", ".value"),
names_pattern = "(.*)_(.*)") %>%
mutate("variable" = str_replace_all(variable,
pattern = "_C03_",
replacement =  "_C02_"),
estimate = replace_na(estimate, 0))
View(temp_pct)
temp_values %>%
left_join(.,
temp_pct %>%
select(GEOID, NAME, variable, "pct" = estimate),
by = c("GEOID", "NAME", "variable")) %>%
left_join(.,
dict_vars %>%
select("category" = var_topic,
"label" = var_pretty,
"variable" = var_database),
by = "variable")
temp_pct <- temp %>%
select(GEOID:NAME, matches("_C03_")) %>%
pivot_longer(cols = -c(GEOID:NAME),
names_to = c("variable", ".value"),
names_pattern = "(.*)_(.*)") %>%
mutate("variable" = str_replace_all(variable,
pattern = "_C03_",
replacement =  "_C02_"),
estimate = replace_na(estimate, 0))
temp_values %>%
left_join(.,
temp_pct %>%
select(GEOID, NAME, variable, "pct" = estimate),
by = c("GEOID", "NAME", "variable")) %>%
left_join(.,
dict_vars %>%
select("category" = var_topic,
"label" = var_pretty,
"variable" = var_database),
by = "variable")
test <- temp_values %>%
left_join(.,
temp_pct %>%
select(GEOID, NAME, variable, "pct" = estimate),
by = c("GEOID", "NAME", "variable")) %>%
left_join(.,
dict_vars %>%
select("category" = var_topic,
"label" = var_pretty,
"variable" = var_database),
by = "variable")
View(temp_pct)
temp_values %>%
left_join(.,
temp_pct %>%
select(GEOID, NAME, variable, "pct" = estimate),
by = c("GEOID", "NAME", "variable")) %>%
mutate("pct" = replace_na(pct, 0)) %>%
left_join(.,
dict_vars %>%
select("category" = var_topic,
"label" = var_pretty,
"variable" = var_database),
by = "variable") %>%
mutate("label" = str_remove_all(label,
"Total Persons with Disabilities, ")) %>%
mutate("label" = case_when(variable == "S1810_C02_001" ~
"People with Disabilities",
TRUE ~ label)) %>%
mutate("category" = str_to_title(category)) %>%
select(GEOID, NAME, category, variable, label,
estimate, moe, pct)
View(temp_values)
View(test)
test %>%
mutate(output_est = paste0(comma(estimate, accuracy = 1),
" (", pct, "%)"),
output_moe = "(±", comma(moe), ")")
test %>%
mutate("output_est" = paste0(comma(estimate, accuracy = 1),
" (", pct, "%)"),
"output_moe" = paste0("(±", comma(moe), ")"))
test %>%
mutate("output_est" = paste0(comma(estimate, accuracy = 1),
" (", pct, "%)"),
"output_moe" = paste0("(±", comma(moe,
accuracy = 1), ")"))
temp_values %>%
left_join(.,
temp_pct %>%
select(GEOID, NAME, variable, "pct" = estimate),
by = c("GEOID", "NAME", "variable")) %>%
mutate("pct" = replace_na(pct, 0)) %>%
left_join(.,
dict_vars %>%
select("category" = var_topic,
"label" = var_pretty,
"variable" = var_database),
by = "variable") %>%
mutate("label" = str_remove_all(label,
"Total Persons with Disabilities, ")) %>%
mutate("label" = case_when(variable == "S1810_C02_001" ~
"People with Disabilities",
TRUE ~ label)) %>%
mutate("category" = str_to_title(category)) %>%
select(GEOID, NAME, category, variable, label,
estimate, moe, pct)
