"national_variable_selector" = var_readable,
national_dropdown_label) %>%
pivot_longer(cols = -c(national_variable_selector,
national_dropdown_label),
names_to = "national_category_selector") %>%
filter(value == TRUE) %>%
select(national_category_selector,
national_variable_selector,
national_dropdown_label) %>%
group_by(national_dropdown_label) %>%
slice(1) %>%
ungroup() %>%
mutate("output_file_pdf" = stringr::str_c(here(), "/factsheet_national/output_files/",
national_dropdown_label, ".pdf"),
"output_file_html" = stringr::str_c(here(), "/factsheet_national/output_files/",
national_dropdown_label, ".html"),
"params" = pmap(list(national_category_selector,
national_variable_selector),
~list(national_category_selector = ..1,
national_variable_selector = ..2))) %>%
filter(national_variable_selector %in% c("pop_total",
"pwd_commute_car_alone_pct",
"pwd_commute_public_pct"))
# Create factsheets -------------------------------------------------------
# Walk through dataframe, create HTML documents
factsheet_national_params %>%
select(output_file_html, params) %>%
pwalk(rmarkdown::render,
input = stringr::str_c(here(), "/factsheet_national/factsheet_national.Rmd"))
factsheet_national_params %>%
select(output_file_html, params) %>%
pwalk(rmarkdown::render,
input = stringr::str_c(here(), "/factsheet_national/factsheet_national.Rmd"))
# Pull baseline places in database from GitHub repo
# Organize parameters for looping operation
factsheet_national_params <- dict_vars %>%
filter(!is.na(national_dropdown_label)) %>%
select(starts_with("is_"),
"national_variable_selector" = var_readable,
national_dropdown_label) %>%
pivot_longer(cols = -c(national_variable_selector,
national_dropdown_label),
names_to = "national_category_selector") %>%
filter(value == TRUE) %>%
select(national_category_selector,
national_variable_selector,
national_dropdown_label) %>%
group_by(national_dropdown_label) %>%
slice(1) %>%
ungroup() %>%
mutate("output_file" = stringr::str_c(here(), "/factsheet_national/output_files/",
national_dropdown_label, ".html"),
"params" = pmap(list(national_category_selector,
national_variable_selector),
~list(national_category_selector = ..1,
national_variable_selector = ..2))) %>%
filter(national_variable_selector %in% c("pop_total",
"pwd_commute_car_alone_pct",
"pwd_commute_public_pct"))
# Walk through dataframe, create HTML documents
factsheet_national_params %>%
select(output_file, params) %>%
pwalk(rmarkdown::render,
input = stringr::str_c(here(), "/factsheet_national/factsheet_national.Rmd"))
# Get a vector of all the filepaths for the newly-generated HTML files
html_files <- list.files(stringr::str_c(here(), "/factsheet_national/output_files/"),
pattern = ".html$",
full.names = TRUE)
# Print HTMLs to PDFs
map(.x = html_files,
.f = ~chrome_print(input = .x))
factsheet_national_params <- dict_vars %>%
filter(!is.na(national_dropdown_label)) %>%
select(starts_with("is_"),
"national_variable_selector" = var_readable,
national_dropdown_label) %>%
pivot_longer(cols = -c(national_variable_selector,
national_dropdown_label),
names_to = "national_category_selector") %>%
filter(value == TRUE) %>%
select(national_category_selector,
national_variable_selector,
national_dropdown_label) %>%
group_by(national_dropdown_label) %>%
slice(1) %>%
ungroup() %>%
mutate("output_file" = stringr::str_c(here(), "/factsheet_national/output_files/",
national_dropdown_label, ".html"),
"params" = pmap(list(national_category_selector,
national_variable_selector),
~list(national_category_selector = ..1,
national_variable_selector = ..2)))
View(factsheet_national_params)
dict_vars %>%
filter(!is.na(national_dropdown_label)) %>%
select(starts_with("is_"),
"national_variable_selector" = var_readable,
national_dropdown_label)
dict_vars %>%
filter(!is.na(national_dropdown_label)) %>%
select(starts_with("is_"),
"national_variable_selector" = var_readable,
national_dropdown_label) %>%
pivot_longer(cols = -c(national_variable_selector,
national_dropdown_label),
names_to = "national_category_selector") %>%
filter(value == TRUE) %>%
select(national_category_selector,
national_variable_selector,
national_dropdown_label) %>%
group_by(national_dropdown_label) %>%
slice(1) %>%
ungroup() %>%
mutate("output_file" = stringr::str_c(here(), "/factsheet_national/output_files/",
national_dropdown_label, ".html"),
"params" = pmap(list(national_category_selector,
national_variable_selector),
~list(national_category_selector = ..1,
national_variable_selector = ..2)))
dir(stringr::str_c(here(), "/factsheet_national/output_files/"),
all.files = TRUE,
full.names = TRUE)
list.files(stringr::str_c(here(), "/factsheet_national/output_files/"),
pattern = ".(html|pdf)$",
full.names = TRUE)
dict_vars %>%
mutate("row_number_temp" = row_number()) %>%
filter(!is.na(national_dropdown_label)) %>%
select(row_number_temp,
starts_with("is_"),
"national_variable_selector" = var_readable,
national_dropdown_label) %>%
pivot_longer(cols = -c(row_number_temp,
national_variable_selector,
national_dropdown_label),
names_to = "national_category_selector") %>%
filter(value == TRUE)
dict_vars %>%
mutate("row_number_temp" = row_number()) %>%
filter(!is.na(national_dropdown_label)) %>%
select(row_number_temp,
starts_with("is_"),
"national_variable_selector" = var_readable,
national_dropdown_label) %>%
pivot_longer(cols = -c(row_number_temp,
national_variable_selector,
national_dropdown_label),
names_to = "national_category_selector") %>%
filter(value == TRUE) %>%
select(row_number_temp,
national_category_selector,
national_variable_selector,
national_dropdown_label) %>%
group_by(national_dropdown_label) %>%
slice(1) %>%
ungroup() %>%
mutate("row_number" = stringr::str_pad(as.character(row_number()), 2,
side = "left", pad = "0"))
dict_vars %>%
mutate("row_number_temp" = row_number()) %>%
filter(!is.na(national_dropdown_label)) %>%
select(row_number_temp,
starts_with("is_"),
"national_variable_selector" = var_readable,
national_dropdown_label) %>%
pivot_longer(cols = -c(row_number_temp,
national_variable_selector,
national_dropdown_label),
names_to = "national_category_selector") %>%
filter(value == TRUE) %>%
select(row_number_temp,
national_category_selector,
national_variable_selector,
national_dropdown_label) %>%
group_by(national_dropdown_label) %>%
slice(1) %>%
ungroup() %>%
arrange(row_number_temp)
mutate("row_number" = stringr::str_pad(as.character(row_number()), 2,
side = "left", pad = "0"))
dict_vars %>%
mutate("row_number_temp" = row_number()) %>%
filter(!is.na(national_dropdown_label)) %>%
select(row_number_temp,
starts_with("is_"),
"national_variable_selector" = var_readable,
national_dropdown_label) %>%
pivot_longer(cols = -c(row_number_temp,
national_variable_selector,
national_dropdown_label),
names_to = "national_category_selector") %>%
filter(value == TRUE) %>%
select(row_number_temp,
national_category_selector,
national_variable_selector,
national_dropdown_label) %>%
group_by(national_dropdown_label) %>%
slice(1) %>%
ungroup() %>%
arrange(row_number_temp) %>%
mutate("row_number" = stringr::str_pad(as.character(row_number()), 2,
side = "left", pad = "0"))
factsheet_national_params <- dict_vars %>%
mutate("row_number_temp" = row_number()) %>%
filter(!is.na(national_dropdown_label)) %>%
select(row_number_temp,
starts_with("is_"),
"national_variable_selector" = var_readable,
national_dropdown_label) %>%
pivot_longer(cols = -c(row_number_temp,
national_variable_selector,
national_dropdown_label),
names_to = "national_category_selector") %>%
filter(value == TRUE) %>%
select(row_number_temp,
national_category_selector,
national_variable_selector,
national_dropdown_label) %>%
group_by(national_dropdown_label) %>%
slice(1) %>%
ungroup() %>%
arrange(row_number_temp) %>%
mutate("row_number" = stringr::str_pad(as.character(row_number()), 2,
side = "left", pad = "0")) %>%
mutate("output_file" = stringr::str_c(here(), "/factsheet_national/output_files/",
"_", row_number, "_",
national_dropdown_label, ".html"),
"params" = pmap(list(national_category_selector,
national_variable_selector),
~list(national_category_selector = ..1,
national_variable_selector = ..2))) %>%
select(row_number, national_category_selector:params)
View(factsheet_national_params)
# Setup -------------------------------------------------------------------
# Libraries
library(rmarkdown); library(tidyverse)
library(pagedown);library(mongolite); library(here)
# Set this to host_prod or host_dev
host_name = "host_dev"
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
# Load variable dictionary for relating tables, variable codes,
# and readable values
dict_vars <- fun_pull_mongo_data(tables = "dict_vars",
host_name = host_name)
# Factsheet parameters ----------------------------------------------------
# Pull baseline places in database from GitHub repo
# Organize parameters for looping operation
factsheet_national_params <- dict_vars %>%
mutate("row_number_temp" = row_number()) %>%
filter(!is.na(national_dropdown_label)) %>%
select(row_number_temp,
starts_with("is_"),
"national_variable_selector" = var_readable,
national_dropdown_label) %>%
pivot_longer(cols = -c(row_number_temp,
national_variable_selector,
national_dropdown_label),
names_to = "national_category_selector") %>%
filter(value == TRUE) %>%
select(row_number_temp,
national_category_selector,
national_variable_selector,
national_dropdown_label) %>%
group_by(national_dropdown_label) %>%
slice(1) %>%
ungroup() %>%
arrange(row_number_temp) %>%
mutate("row_number" = stringr::str_pad(as.character(row_number()), 3,
side = "left", pad = "0")) %>%
mutate("output_file" = stringr::str_c(here(), "/factsheet_national/output_files/",
row_number, "_",
national_dropdown_label, ".html"),
"params" = pmap(list(national_category_selector,
national_variable_selector),
~list(national_category_selector = ..1,
national_variable_selector = ..2))) %>%
select(row_number, national_category_selector:params) %>%
filter(national_variable_selector %in% c("pop_total",
"pwd_commute_car_alone_pct",
"pwd_commute_public_pct"))
# Walk through dataframe, create HTML documents
factsheet_national_params %>%
select(output_file, params) %>%
pwalk(rmarkdown::render,
input = stringr::str_c(here(), "/factsheet_national/factsheet_national.Rmd"))
# Delete existing HTML and PDF files
file.remove(list.files(stringr::str_c(here(), "/factsheet_national/output_files/"),
pattern = ".(html|pdf)$",
full.names = TRUE))
source('E:/UIC/Voorhees/ADA-PARC/ADA PARC Website Design/factsheet_national/iterate_factsheet_national.R', echo=TRUE)
source('E:/UIC/Voorhees/ADA-PARC/ADA PARC Website Design/factsheet_national/iterate_factsheet_national.R', echo=TRUE)
# Chunk 1: setup
### ----- Libraries and database connections -----
# Packages
library(tidyverse); library(sf); library(htmltools)
library(colourpicker); library(gghighlight)
library(knitr); library(kableExtra)
library(tigris); library(urbnmapr); library(patchwork)
library(scales); library(hrbrthemes); library(ggthemes)
library(extrafont); library(mongolite); library(here)
options(scipen = 999999)
opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE,
fig.width = 12, fig.asp = 0.618,
fig.align = "center", out.width = "100%")
# Set this to host_prod or host_dev
host_name = "host_dev"
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
# Load variable dictionary for relating tables, variable codes,
# and readable values
dict_vars <- fun_pull_mongo_data(tables = "dict_vars",
host_name = host_name)
### ----- National data import and clean -----
# This script takes the national_* objects and transforms them
# into the final datasets for mapping
source(here("national_import.R"), local = TRUE)
# Get the right combination of dataset and variable
national_data <- eval(sym(str_remove(params$national_category_selector, "^is_")))
# Markdown title
rmd_title <- dict_vars$national_dropdown_label[which(dict_vars$var_readable == params$national_variable_selector)][1]
# Chunk 2: national-map-summary
HTML(altText(national_data,
params$national_variable_selector))
# Chunk 3: national-map
render_geo_static_map(national_data,
params$national_variable_selector,
"YlOrBr")
# Chunk 4: national-table
# Get variable group based on selected variable
national_vars_in_topic <- dict_vars %>%
filter((!!sym(params$national_category_selector)) == TRUE,
var_topic ==
(dict_vars %>%
filter((!!sym(params$national_category_selector)) == TRUE,
var_readable == params$national_variable_selector) %>%
pull(var_topic))) %>%
select(var_pretty, var_readable)
# Caption
cap_choices <- c("Demographics" = "is_demographics",
"Community Participation" = "is_community_participation",
"Community Living" = "is_community_living",
"Work/Economic" = "is_work_economic")
table_caption <- paste(names(cap_choices[cap_choices == params$national_category_selector]), "Table")
# Reorganize dataframe, switch to pretty names
national_data_table_friendly <- national_data %>%
arrange(GEOID) %>%
mutate("State" = paste0(NAME, " (", ABBR, ")")) %>%
select(any_of(c("State",
national_vars_in_topic %>%
pull(var_readable)))) %>%
mutate(across(-State & -ends_with("_pct"),
~scales::comma(.x))) %>%
mutate(across(ends_with("_pct"),
~scales::percent(.x,
accuracy = 0.1,
scale = 1))) %>%
rename(!!any_of(national_vars_in_topic %>%
deframe()))
# Summary table
# # Left side
# summary_1 <- kbl(x = national_data_table_friendly,
#                  format = "html",
#                  row.names = FALSE,
#                  caption = table_caption) %>%
#   kable_paper("striped",
#               full_width = TRUE,
#               position = "left") %>%
#   kable_styling(bootstrap_options = c("striped",
#                                       "condensed"),
#                 full_width = TRUE,
#                 position = "left") %>%
#   column_spec(1, width = "1.5in")
#
# # Right side
# summary_2 <- kbl(x = national_data_table_friendly[27:52,],
#                  format = "html",
#                  row.names = FALSE,
#                  caption = table_caption) %>%
#   kable_paper("striped",
#               full_width = TRUE,
#               position = "left") %>%
#   kable_styling(bootstrap_options = c("striped",
#                                       "condensed"),
#                 full_width = TRUE,
#                 position = "left") %>%
#   column_spec(1, width = "1.5in")
# Full table
national_topic_table <-
kbl(x = national_data_table_friendly,
format = "html",
row.names = FALSE,
caption = table_caption) %>%
kable_paper("striped",
full_width = TRUE,
position = "left") %>%
kable_styling(bootstrap_options = c("striped",
"condensed"),
full_width = TRUE,
font_size = 11,
position = "left") %>%
column_spec(1, width = "1.5in")
# UI Output
HTML(national_topic_table)
source('E:/UIC/Voorhees/ADA-PARC/ADA PARC Website Design/factsheet_national/iterate_factsheet_national.R', echo=TRUE)
# Libraries
library(rmarkdown); library(tidyverse)
library(pagedown);library(mongolite); library(here)
# Set this to host_prod or host_dev
host_name = "host_prod"
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
# Load variable dictionary for relating tables, variable codes,
# and readable values
dict_vars <- fun_pull_mongo_data(tables = "dict_vars",
host_name = host_name)
# Factsheet parameters ----------------------------------------------------
# Pull baseline places in database from GitHub repo
# Organize parameters for looping operation
factsheet_national_params <- dict_vars %>%
mutate("row_number_temp" = row_number()) %>%
filter(!is.na(national_dropdown_label)) %>%
select(row_number_temp,
starts_with("is_"),
"national_variable_selector" = var_readable,
national_dropdown_label) %>%
pivot_longer(cols = -c(row_number_temp,
national_variable_selector,
national_dropdown_label),
names_to = "national_category_selector") %>%
filter(value == TRUE) %>%
select(row_number_temp,
national_category_selector,
national_variable_selector,
national_dropdown_label) %>%
group_by(national_dropdown_label) %>%
slice(1) %>%
ungroup() %>%
arrange(row_number_temp) %>%
mutate("row_number" = stringr::str_pad(as.character(row_number()), 3,
side = "left", pad = "0")) %>%
mutate("output_file" = stringr::str_c(here(),
"/factsheet_national/output_files/",
row_number, "_",
national_dropdown_label, ".html"),
"params" = pmap(list(national_category_selector,
national_variable_selector),
~list(national_category_selector = ..1,
national_variable_selector = ..2))) %>%
select(row_number, national_category_selector:params)
#
dashboard_factsheet_national <- factsheet_national_params %>%
select(national_dropdown_label,
output_file) %>%
mutate("output_file" = str_replace_all(output_file,
pattern = here(),
replacement = "https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/master/"))
View(dashboard_factsheet_national)
#
dashboard_factsheet_national <- factsheet_national_params %>%
select(national_dropdown_label,
output_file) %>%
mutate("output_file" = str_replace_all(output_file,
pattern = here(),
replacement = "https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/master"))
#
dashboard_factsheet_national <- factsheet_national_params %>%
select(national_dropdown_label,
output_file) %>%
mutate("output_file" = str_replace_all(output_file,
pattern = here(),
replacement = "https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/master")) %>%
mutate("output_file" = str_replace_all(output_file,
pattern = ".html$",
replacement = ".pdf"))
# Update output_file to location in GitHub repository
dashboard_factsheet_national <- factsheet_national_params %>%
select(national_dropdown_label,
output_file) %>%
mutate("output_file" = str_replace_all(output_file,
pattern = here(),
replacement = "https://raw.githubusercontent.com/sean-connelly/ADA-PARC-Website-Design/master")) %>%
mutate("output_file" = str_replace_all(output_file,
pattern = ".html$",
replacement = ".pdf"))
# Write CSV to file for dashboard front-end
write_csv(dashboard_factsheet_national,
file = str_c(here(),
"/factsheet_national/dashboard_factsheet_national.csv"))
# Write CSV to file for dashboard front-end
write_csv(dashboard_factsheet_national,
file = str_c(here(),
"/factsheet_national/dashboard_factsheet_national.csv"))
source('E:/UIC/Voorhees/ADA-PARC/ADA PARC Website Design/factsheet_national/iterate_factsheet_national.R', echo=TRUE)
source('E:/UIC/Voorhees/ADA-PARC/ADA PARC Website Design/factsheet_national/iterate_factsheet_national.R', echo=TRUE)
# Libraries
library(rmarkdown); library(tidyverse)
library(pagedown);library(mongolite); library(here)
# Set this to host_prod or host_dev
host_name = "host_prod"
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
# Load variable dictionary for relating tables, variable codes,
# and readable values
dict_vars <- fun_pull_mongo_data(tables = "dict_vars",
host_name = host_name)
View(dict_vars)
# This script takes the national_* objects and transforms them
# into the final datasets for mapping
source(here("national_import.R"), local = TRUE)
View(community_living)
View(community_participation)
