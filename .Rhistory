test <- get_urbn_labels(map = "territories_states",
sf = TRUE) %>%
st_drop_geometry()
View(test)
states_sf <- get_urbn_map("territories_states", sf = TRUE) %>%
st_drop_geometry()
View(states_sf)
# Geographic map function
render_cms_hud_map <- function(data, selected, palette_selected) {
# Set quartiles
no_classes <- 4
labels <- c()
quartiles <- quantile(data %>% pull(!!sym(selected)),
probs = seq(0, 1, length.out = no_classes + 1),
na.rm = TRUE)
# Custom labels based on percent or value
for(idx in 1:length(quartiles)){
if(grepl("pct", selected)) {
# Percent, add divide by 100, add symbol to text
labels <- c(labels, paste0(scales::percent(quartiles[idx] / 100),
"-",
scales::percent(quartiles[idx + 1] / 100)))
} else if(grepl("spending", selected)) {
# Values
labels <- c(labels, paste0("$", scales::comma(quartiles[idx]),
"-$",
scales::comma(quartiles[idx + 1])))
} else {
# Values
labels <- c(labels, paste0(scales::comma(quartiles[idx]),
"-",
scales::comma(quartiles[idx + 1])))
}
}
# Remove last label which will have NA
labels <- labels[1:length(labels)-1]
# Set map title and legend
title <- cms_hud_vars$national_dropdown_label[which(cms_hud_vars$var_readable == selected)][1]
legend_title <- paste0(cms_hud_vars$var_pretty[which(cms_hud_vars$var_readable == selected)][1], ": ")
# US State geography, remove territories, join data
states_sf <- get_urbn_map("territories_states", sf = TRUE) %>%
filter(!state_fips %in% c("60", "66", "69", "72", "78")) %>%
select("ABBR" = state_abbv) %>%
inner_join(data %>%
select(ABBR, !!sym(selected)),
by = "ABBR") %>%
rowwise() %>%
mutate("quartile_fill" = cut(!!sym(selected),
breaks = quartiles,
labels = labels,
include.lowest = TRUE))
# Plot geographic map
ggplot_object <- ggplot(states_sf) +
geom_sf(aes(fill = quartile_fill),
color = "black", size = 0.25) +
scale_fill_brewer(palette = palette_selected,
na.value = "grey") +
# Text
geom_sf_text(data = get_urbn_labels(map = "territories_states",
sf = TRUE) %>%
filter(!state_fips %in% c("60", "66", "69", "43", "78")),
aes(label = state_abbv),
size = 4, fontface = "bold", check_overlap = TRUE) +
# Labels
labs(x = "", y = "",
# title = title,
fill = legend_title) +
theme_void() +
# Theme, removes all of the grid elements that we don't need
theme(plot.background = element_rect(colour = "white"),
panel.grid = element_blank(),
panel.grid.major = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.line = element_blank(),
panel.spacing = unit(0L, "pt"),
legend.position = "bottom",
legend.title = element_text(face = "bold", vjust = 0.75),
legend.text = element_text(vjust = .5),
legend.key = element_rect(color = "black"),
strip.text.x = element_text(size = 9L),
text = element_text(size = 16)) +
guides(fill = guide_legend(label.position = "bottom"))
ggplot_object
}
# hcbs_ratio
render_cms_hud_map(cms_hud_data,
"hcbs_ratio",
"YlOrBr")
# hcbs_spending_per
render_cms_hud_map(cms_hud_data,
"hcbs_spending_per",
"YlOrBr")
# hud_public_housing_pct
render_cms_hud_map(cms_hud_data,
"hud_public_housing_pct",
"YlOrBr")
# hud_hcv_pct
render_cms_hud_map(cms_hud_data,
"hud_hcv_pct",
"YlOrBr")
# Chunk 1: setup
### ----- Libraries and database connections -----
# Packages
library(tidyverse); library(sf); library(htmltools)
library(colourpicker); library(gghighlight)
library(knitr); library(kableExtra)
library(tigris); library(urbnmapr); library(patchwork)
library(scales); library(hrbrthemes); library(ggthemes)
library(extrafont); library(mongolite); library(here)
options(scipen = 999999)
opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE,
fig.width = 12, fig.asp = 0.618,
fig.align = "center", out.width = "100%")
# Set this to host_prod or host_dev
host_name = "host_prod"
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
# Load variable dictionary for relating tables, variable codes,
# and readable values
dict_vars <- fun_pull_mongo_data(tables = "dict_vars",
host_name = host_name)
### ----- National data import and clean -----
# This script takes the national_* objects and transforms them
# into the final datasets for mapping
source(here("national_import.R"), local = TRUE)
# Get the right combination of dataset and variable
national_data <- eval(sym(str_remove(params$national_category_selector, "^is_")))
# Markdown title
rmd_title <- dict_vars$national_dropdown_label[which(dict_vars$var_readable == params$national_variable_selector)][1]
# Chunk 2: national-map-summary
HTML(paste0(altText(national_data,
params$national_variable_selector),
" Detailed information is available below in the map and table below.",
"<br><i>Source: 2015-2019 American Community Survey 5-Year Estimates.</i>"))
# Chunk 3: national-map
render_geo_static_map(national_data,
params$national_variable_selector,
"YlOrBr")
# Chunk 4: national-table
# Get variable group based on selected variable
national_vars_in_topic <- dict_vars %>%
filter((!!sym(params$national_category_selector)) == TRUE,
var_topic ==
(dict_vars %>%
filter((!!sym(params$national_category_selector)) == TRUE,
var_readable == params$national_variable_selector) %>%
pull(var_topic))) %>%
select(var_pretty, var_readable)
# Caption
cap_choices <- c("Demographics" = "is_demographics",
"Community Participation" = "is_community_participation",
"Community Living" = "is_community_living",
"Work/Economic" = "is_work_economic")
table_caption <- paste(names(cap_choices[cap_choices == params$national_category_selector]), "Table")
# Reorganize dataframe, switch to pretty names
national_data_table_friendly <- national_data %>%
arrange(GEOID) %>%
mutate("State" = paste0(NAME, " (", ABBR, ")")) %>%
select(any_of(c("State",
national_vars_in_topic %>%
pull(var_readable)))) %>%
mutate(across(-State & -ends_with("_pct"),
~scales::comma(.x))) %>%
mutate(across(ends_with("_pct"),
~scales::percent(.x,
accuracy = 0.1,
scale = 1))) %>%
rename(!!any_of(national_vars_in_topic %>%
deframe()))
# Summary table
# # Left side
# summary_1 <- kbl(x = national_data_table_friendly,
#                  format = "html",
#                  row.names = FALSE,
#                  caption = table_caption) %>%
#   kable_paper("striped",
#               full_width = TRUE,
#               position = "left") %>%
#   kable_styling(bootstrap_options = c("striped",
#                                       "condensed"),
#                 full_width = TRUE,
#                 position = "left") %>%
#   column_spec(1, width = "1.5in")
#
# # Right side
# summary_2 <- kbl(x = national_data_table_friendly[27:52,],
#                  format = "html",
#                  row.names = FALSE,
#                  caption = table_caption) %>%
#   kable_paper("striped",
#               full_width = TRUE,
#               position = "left") %>%
#   kable_styling(bootstrap_options = c("striped",
#                                       "condensed"),
#                 full_width = TRUE,
#                 position = "left") %>%
#   column_spec(1, width = "1.5in")
# Full table
national_topic_table <-
kbl(x = national_data_table_friendly,
format = "html",
row.names = FALSE,
caption = table_caption) %>%
kable_paper("striped",
full_width = TRUE,
position = "left") %>%
kable_styling(bootstrap_options = c("striped",
"condensed"),
full_width = TRUE,
font_size = 11,
position = "left") %>%
column_spec(1, width = "1.5in")
# UI Output
HTML(national_topic_table)
write_excel_csv(national_data_table_friendly,
file = "C:\\Users\\sconn\\Downloads\\pwd_institution_pct.csv")
# Chunk 1: setup
### ----- Libraries and database connections -----
# Packages
library(tidyverse); library(sf); library(htmltools)
library(colourpicker); library(gghighlight)
library(knitr); library(kableExtra)
library(tigris); library(urbnmapr); library(patchwork)
library(scales); library(hrbrthemes); library(ggthemes)
library(extrafont); library(mongolite); library(here)
options(scipen = 999999)
opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE,
fig.width = 12, fig.asp = 0.618,
fig.align = "center", out.width = "100%")
# Set this to host_prod or host_dev
host_name = "host_prod"
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
# Load variable dictionary for relating tables, variable codes,
# and readable values
dict_vars <- fun_pull_mongo_data(tables = "dict_vars",
host_name = host_name)
### ----- National data import and clean -----
# This script takes the national_* objects and transforms them
# into the final datasets for mapping
source(here("national_import.R"), local = TRUE)
# Get the right combination of dataset and variable
national_data <- eval(sym(str_remove(params$national_category_selector, "^is_")))
# Markdown title
rmd_title <- dict_vars$national_dropdown_label[which(dict_vars$var_readable == params$national_variable_selector)][1]
# Chunk 2: national-map-summary
HTML(paste0(altText(national_data,
params$national_variable_selector),
" Detailed information is available below in the map and table below.",
"<br><i>Source: 2015-2019 American Community Survey 5-Year Estimates.</i>"))
# Chunk 3: national-map
render_geo_static_map(national_data,
params$national_variable_selector,
"YlOrBr")
# Chunk 4: national-table
# Get variable group based on selected variable
national_vars_in_topic <- dict_vars %>%
filter((!!sym(params$national_category_selector)) == TRUE,
var_topic ==
(dict_vars %>%
filter((!!sym(params$national_category_selector)) == TRUE,
var_readable == params$national_variable_selector) %>%
pull(var_topic))) %>%
select(var_pretty, var_readable)
# Caption
cap_choices <- c("Demographics" = "is_demographics",
"Community Participation" = "is_community_participation",
"Community Living" = "is_community_living",
"Work/Economic" = "is_work_economic")
table_caption <- paste(names(cap_choices[cap_choices == params$national_category_selector]), "Table")
# Reorganize dataframe, switch to pretty names
national_data_table_friendly <- national_data %>%
arrange(GEOID) %>%
mutate("State" = paste0(NAME, " (", ABBR, ")")) %>%
select(any_of(c("State",
national_vars_in_topic %>%
pull(var_readable)))) %>%
mutate(across(-State & -ends_with("_pct"),
~scales::comma(.x))) %>%
mutate(across(ends_with("_pct"),
~scales::percent(.x,
accuracy = 0.1,
scale = 1))) %>%
rename(!!any_of(national_vars_in_topic %>%
deframe()))
# Summary table
# # Left side
# summary_1 <- kbl(x = national_data_table_friendly,
#                  format = "html",
#                  row.names = FALSE,
#                  caption = table_caption) %>%
#   kable_paper("striped",
#               full_width = TRUE,
#               position = "left") %>%
#   kable_styling(bootstrap_options = c("striped",
#                                       "condensed"),
#                 full_width = TRUE,
#                 position = "left") %>%
#   column_spec(1, width = "1.5in")
#
# # Right side
# summary_2 <- kbl(x = national_data_table_friendly[27:52,],
#                  format = "html",
#                  row.names = FALSE,
#                  caption = table_caption) %>%
#   kable_paper("striped",
#               full_width = TRUE,
#               position = "left") %>%
#   kable_styling(bootstrap_options = c("striped",
#                                       "condensed"),
#                 full_width = TRUE,
#                 position = "left") %>%
#   column_spec(1, width = "1.5in")
# Full table
national_topic_table <-
kbl(x = national_data_table_friendly,
format = "html",
row.names = FALSE,
caption = table_caption) %>%
kable_paper("striped",
full_width = TRUE,
position = "left") %>%
kable_styling(bootstrap_options = c("striped",
"condensed"),
full_width = TRUE,
font_size = 11,
position = "left") %>%
column_spec(1, width = "1.5in")
# UI Output
HTML(national_topic_table)
openxlsx::write.xlsx(national_data_table_friendly,
file = "C:\\Users\\sconn\\Downloads\\pwd_institution_pct.xlsx")
community_living %>% select(pop_total, pwd_pct, pwd_total, pwd_grpquarters_institution, pwd_grpquarters_institution_pct, pwd_grpquarters_noninstitution, pwd_home, pwd_home_pct)
# Packages
library(tidyverse); library(sf); library(htmltools)
library(colourpicker); library(gghighlight)
library(knitr); library(kableExtra)
library(tigris); library(urbnmapr); library(patchwork)
library(scales); library(hrbrthemes); library(ggthemes)
library(extrafont); library(mongolite); library(here)
options(scipen = 999999)
opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE,
fig.width = 12, fig.asp = 0.618,
fig.align = "center", out.width = "100%")
# Set this to host_prod or host_dev
host_name = "host_prod"
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
# Load variable dictionary for relating tables, variable codes,
# and readable values
dict_vars <- fun_pull_mongo_data(tables = "dict_vars",
host_name = host_name)
### ----- National data import and clean -----
# This script takes the national_* objects and transforms them
# into the final datasets for mapping
source(here("national_import.R"), local = TRUE)
# Get the right combination of dataset and variable
national_data <- eval(sym(str_remove(params$national_category_selector, "^is_")))
# Markdown title
rmd_title <- dict_vars$national_dropdown_label[which(dict_vars$var_readable == params$national_variable_selector)][1]
dict_vars <- fun_pull_mongo_data(tables = "dict_vars",
host_name = host_name)
community_living %>% select(pop_total, pwd_pct, pwd_total, pwd_grpquarters_institution, pwd_grpquarters_institution_pct,
pop_grpquarters_institution_pwd_pct, pwd_grpquarters_noninstitution, pwd_home, pwd_home_pct)
# This script takes the national_* objects and transforms them
# into the final datasets for mapping
source(here("national_import.R"), local = TRUE)
# Packages
library(tidyverse); library(sf); library(htmltools)
library(colourpicker); library(gghighlight)
library(knitr); library(kableExtra)
library(tigris); library(urbnmapr); library(patchwork)
library(scales); library(hrbrthemes); library(ggthemes)
library(extrafont); library(mongolite); library(here)
options(scipen = 999999)
opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE,
fig.width = 12, fig.asp = 0.618,
fig.align = "center", out.width = "100%")
# Set this to host_prod or host_dev
host_name = "host_prod"
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
# Load variable dictionary for relating tables, variable codes,
# and readable values
dict_vars <- fun_pull_mongo_data(tables = "dict_vars",
host_name = host_name)
### ----- National data import and clean -----
# This script takes the national_* objects and transforms them
# into the final datasets for mapping
source(here("national_import.R"), local = TRUE)
# Get the right combination of dataset and variable
national_data <- eval(sym(str_remove(params$national_category_selector, "^is_")))
# Markdown title
rmd_title <- dict_vars$national_dropdown_label[which(dict_vars$var_readable == params$national_variable_selector)][1]
dict_vars <- fun_pull_mongo_data(tables = "dict_vars",
host_name = host_name)
community_living %>% select(pop_total, pwd_pct, pwd_total, pwd_grpquarters_institution, pwd_grpquarters_institution_pct,
pop_grpquarters_institution_pwd_pct, pwd_grpquarters_noninstitution, pwd_home, pwd_home_pct)
# This script takes the national_* objects and transforms them
# into the final datasets for mapping
source(here("national_import.R"), local = TRUE)
# This script takes the national_* objects and transforms them
# into the final datasets for mapping
source(here("national_import.R"), local = TRUE)
# This script takes the national_* objects and transforms them
# into the final datasets for mapping
source(here("national_import.R"), local = TRUE)
### ----- Libraries and database connections -----
# Packages
library(tidyverse); library(sf); library(htmltools)
library(colourpicker); library(gghighlight)
library(knitr); library(kableExtra)
library(tigris); library(urbnmapr); library(patchwork)
library(scales); library(hrbrthemes); library(ggthemes)
library(extrafont); library(mongolite); library(here)
options(scipen = 999999)
opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE,
fig.width = 12, fig.asp = 0.618,
fig.align = "center", out.width = "100%")
# Set this to host_prod or host_dev
host_name = "host_prod"
# Load API keys and database connection information
source(here("functions.R"), local = TRUE)
# Load variable dictionary for relating tables, variable codes,
# and readable values
dict_vars <- fun_pull_mongo_data(tables = "dict_vars",
host_name = host_name)
### ----- National data import and clean -----
# This script takes the national_* objects and transforms them
# into the final datasets for mapping
source(here("national_import.R"), local = TRUE)
# Get the right combination of dataset and variable
national_data <- eval(sym(str_remove(params$national_category_selector, "^is_")))
# Markdown title
rmd_title <- dict_vars$national_dropdown_label[which(dict_vars$var_readable == params$national_variable_selector)][1]
dict_vars <- fun_pull_mongo_data(tables = "dict_vars",
host_name = host_name)
community_living %>% select(pop_total, pwd_pct, pwd_total,
pwd_grpquarters_institution,
pwd_grpquarters_institution_pct,
pop_grpquarters_institution_pwd_pct,
pwd_grpquarters_noninstitution,
pwd_home, pwd_home_pct)
community_living %>% select(ABBR, NAME, pop_total, pwd_pct, pwd_total,
pwd_grpquarters_institution,
pwd_grpquarters_institution_pct,
pop_grpquarters_institution_pwd_pct,
pwd_grpquarters_noninstitution,
pwd_home, pwd_home_pct)
community_living %>% select(ABBR, pop_total, pwd_pct, pwd_total,
pwd_grpquarters_institution,
pwd_grpquarters_institution_pct,
pop_grpquarters_institution_pwd_pct,
pwd_grpquarters_noninstitution,
pwd_home, pwd_home_pct) %>%
head(5)
community_living %>% select(ABBR, pop_total, pwd_pct, pwd_total,
pop_grpquarters_institution,
pwd_grpquarters_institution,
pop_grpquarters_institution_pwd_pct,
pwd_grpquarters_institution_pct,
pwd_grpquarters_noninstitution,
pwd_grpquarters_noninstitution_pct,
pwd_home, pwd_home_pct) %>%
head(2)
27586 / 539887
# This script takes the national_* objects and transforms them
# into the final datasets for mapping
source(here("national_import.R"), local = TRUE)
community_living %>% select(ABBR, pop_total, pwd_pct, pwd_total,
pop_grpquarters_institution,
pwd_grpquarters_institution,
pop_grpquarters_institution_pwd_pct,
pwd_grpquarters_institution_pct,
pop_grpquarters_noninstitution,
pwd_grpquarters_noninstitution,
pwd_grpquarters_noninstitution_pct,
pwd_home, pwd_home_pct) %>%
head(2)
community_living %>% select(ABBR, pop_total, pwd_pct, pwd_total,
pop_grpquarters_institution,
pwd_grpquarters_institution,
pop_grpquarters_institution_pwd_pct,
pwd_grpquarters_institution_pct,
pop_grpquarters_noninstitution,
pwd_grpquarters_noninstitution,
pop_grpquarters_noninstitution_pwd_pct,
pwd_grpquarters_noninstitution_pct,
pwd_home, pwd_home_pct) %>%
head(2)
5158 / 35090
5158 / 539887
community_living %>% select(ABBR, pop_total, pwd_pct, pwd_total,
pop_grpquarters_institution,
pwd_grpquarters_institution,
pop_grpquarters_institution_pwd_pct,
pwd_grpquarters_institution_pct,
pop_grpquarters_noninstitution,
pwd_grpquarters_noninstitution,
pop_grpquarters_noninstitution_pwd_pct,
pwd_grpquarters_noninstitution_pct,
pwd_home, pwd_home_pct) %>%
head(2)
27586 + 5158 + 507143
2830 + 2339 + 85490
View(demographics)
View(demographics)
5158 + 507143
source('E:/UIC/Voorhees/ADA-PARC/ADA PARC Website Design/helper_scripts/dict_vars_upload.R', echo=TRUE)
source('E:/UIC/Voorhees/ADA-PARC/ADA PARC Website Design/helper_scripts/dict_vars_upload.R', echo=TRUE)
source('E:/UIC/Voorhees/ADA-PARC/ADA PARC Website Design/helper_scripts/dict_vars_upload.R', echo=TRUE)
