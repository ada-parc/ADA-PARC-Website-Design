st_drop_geometry() %>%
select(STATEFP) %>%
distinct(),
.f = ~(tigris::counties(state = ..1,
cb = TRUE,
class = "sf") %>%
rename("county_GEOID" = GEOID,
"county_NAME" = NAME)))
st_join(tracts_places,
temp %>%
select(COUNTYFP, county_GEOID, county_NAME))
st_join(tracts_places,
temp %>%
select(COUNTYFP, county_GEOID, county_NAME)) %>%
st_drop_geometry()
st_join(tracts_places,
temp %>%
select(COUNTYFP, county_GEOID, county_NAME)) %>%
st_drop_geometry() %>%
select(PLACEFP, place_GEOID, place_NAME,
STATEFP, COUNTYFP, county_GEOID, county_NAME)
tracts_places_counties <- # reactive({
# Pull counties by state
temp <- pmap_df(.l = tracts_places %>%
st_drop_geometry() %>%
select(STATEFP) %>%
distinct(),
.f = ~(tigris::counties(state = ..1,
cb = TRUE,
class = "sf") %>%
rename("county_GEOID" = GEOID,
"county_NAME" = NAME)))
# Filter counties by joining to cities
st_join(tracts_places,
temp %>%
select(COUNTYFP, county_GEOID, county_NAME)) %>%
st_drop_geometry() %>%
select(PLACEFP, place_GEOID, place_NAME,
STATEFP, COUNTYFP, county_GEOID, county_NAME)
# Pull counties by state
temp <- pmap_df(.l = tracts_places %>%
st_drop_geometry() %>%
select(STATEFP) %>%
distinct(),
.f = ~(tigris::counties(state = ..1,
cb = TRUE,
class = "sf") %>%
rename("county_GEOID" = GEOID,
"county_NAME" = NAME)))
View(tracts_places_counties)
output_df <- st_join(tracts_places,
temp %>%
select(COUNTYFP, county_GEOID, county_NAME)) %>%
st_drop_geometry() %>%
select(PLACEFP, place_GEOID, place_NAME,
STATEFP, COUNTYFP, county_GEOID, county_NAME) %>%
distinct()
View(output_df)
output_df %>%
group_by("City" = place_NAME) %>%
mutate("Counties" = str_c(county_NAME,
collapse = ", ")) %>%
select(City, Counties) %>%
distinct()
tracts_places_counties <- output_df
pmap_df(.l = tracts_places_counties %>%
select(STATEFP, COUNTYFP) %>%
distinct(),
.f = ~(get_acs(geography = "tract",
year = 2019,
variables = c("S0101_C01_006",
"S0101_C01_007",
"S0101_C01_008"),
survey = "acs5",
state = ..1,
county = ..2,
geometry = FALSE,
wide = TRUE)))
View(tracts_places_counties)
tracts_counties <- # reactive({
pmap_df(.l = tracts_places %>%
st_drop_geometry() %>%
select(STATEFP) %>%
distinct(),
.f = ~(tigris::counties(state = ..1,
cb = TRUE,
class = "sf") %>%
rename("county_GEOID" = GEOID,
"county_NAME" = NAME)))
st_join(tracts_places,
tracts_counties %>%
select(COUNTYFP, county_GEOID, county_NAME)) %>%
st_drop_geometry() %>%
select(PLACEFP, place_GEOID, place_NAME,
STATEFP, COUNTYFP, county_GEOID, county_NAME) %>%
distinct()
mapview::mapview(tracts_counties, col.regions = "blue") +
mapview::mapview(tracts_counties, col.regions = "orange")
mapview::mapview(tracts_counties, col.regions = "blue") +
mapview::mapview(tracts_places, col.regions = "orange")
mapview::mapview(tracts_places,
col.regions = "orange") +
mapview::mapview(tracts_places_counties,
color = "white",
col.regions = "blue",
alpha.regions = 0.4)
tracts_places_counties <- #reactive({
st_join(tracts_places,
tracts_counties %>%
select(COUNTYFP, county_GEOID, county_NAME)) %>%
# st_drop_geometry() %>%
select(PLACEFP, place_GEOID, place_NAME,
STATEFP, COUNTYFP, county_GEOID, county_NAME) %>%
distinct()
mapview::mapview(tracts_places,
col.regions = "orange") +
mapview::mapview(tracts_places_counties,
color = "white",
col.regions = "blue",
alpha.regions = 0.4)
tracts_places_counties <- st_join(tracts_counties, tracts_places)
mapview::mapview(tracts_places,
col.regions = "orange") +
mapview::mapview(tracts_places_counties,
color = "white",
col.regions = "blue",
alpha.regions = 0.4)
tracts_places_counties <- # reactive({
st_join(tracts_places,
tracts_counties %>%
select(COUNTYFP, county_GEOID, county_NAME)) %>%
st_drop_geometry() %>%
select(PLACEFP, place_GEOID, place_NAME,
STATEFP, COUNTYFP, county_GEOID, county_NAME) %>%
distinct()
mapview::mapview(tracts_places,
col.regions = "orange") +
mapview::mapview(tract_counties %>%
filter(county_GEOID %in%
tracts_places_counties$county_GEOID),
color = "white",
col.regions = "blue",
alpha.regions = 0.4)
mapview::mapview(tracts_places,
col.regions = "orange") +
mapview::mapview(tracts_counties %>%
filter(county_GEOID %in%
tracts_places_counties$county_GEOID),
color = "white",
col.regions = "blue",
alpha.regions = 0.4)
tracts_places_counties_trimmed <- # reactive({
st_intersection(tracts_places,
tracts_counties)
View(tracts_places_counties_trimmed)
tracts_places_counties_trimmed <- # reactive({
st_intersection(tracts_places,
tracts_counties) %>%
mutate("overlap_area" = st_area())
tracts_places_counties_trimmed <- # reactive({
st_intersection(tracts_places,
tracts_counties) %>%
mutate("overlap_area" = st_area(.))
View(tracts_places_counties_trimmed)
tracts_places_counties_trimmed <- # reactive({
st_intersection(tracts_places,
tracts_counties) %>%
mutate("overlap_area" = st_area(.)) %>%
filter(overlap_area > 0)
tracts_places_counties_trimmed <- # reactive({
st_intersection(tracts_places,
tracts_counties) %>%
mutate("overlap_area" = st_area(.),
"overlap_area_num" = as.numeric(overlap_area)) %>%
filter(overlap_area_num > 0)
View(tracts_places_counties_trimmed)
tracts_places <- #reactive({
pmap_df(.l = fips_codes_tidy %>%
filter(as.numeric(state_code) <= 72) %>%
select(state_code) %>%
distinct(),
.f = ~(tigris::places(state = ..1,
cb = TRUE,
class = "sf") %>%
rename("place_GEOID" = GEOID,
"place_NAME" = NAME) %>%
filter(place_GEOID %in%
cities_acs_places_selected$GEOID))) %>%
mutate("place_area" = st_area(.),
"place_area_num" = as.numeric(overlap_area))
tracts_places <- #reactive({
pmap_df(.l = fips_codes_tidy %>%
filter(as.numeric(state_code) <= 72) %>%
select(state_code) %>%
distinct(),
.f = ~(tigris::places(state = ..1,
cb = TRUE,
class = "sf") %>%
rename("place_GEOID" = GEOID,
"place_NAME" = NAME) %>%
filter(place_GEOID %in%
cities_acs_places_selected$GEOID))) %>%
mutate("place_area" = st_area(.),
"place_area_num" = as.numeric(place_area))
View(tracts_places)
tracts_places <- #reactive({
pmap_df(.l = fips_codes_tidy %>%
filter(as.numeric(state_code) <= 72) %>%
select(state_code) %>%
distinct(),
.f = ~(tigris::places(state = ..1,
cb = TRUE,
class = "sf") %>%
rename("place_GEOID" = GEOID,
"place_NAME" = NAME) %>%
filter(place_GEOID %in%
cities_acs_places_selected$GEOID))) %>%
mutate("place_area" = st_area(.),
"place_area_num" = as.numeric(place_area)) %>%
relocate(geometry, .after = last_col())
tracts_places_counties_trimmed <- # reactive({
st_intersection(tracts_places,
tracts_counties) %>%
mutate("overlap_area" = st_area(.),
"overlap_area_num" = as.numeric(overlap_area),
"overlap_pct" = place_area_num / overlap_area_num) %>%
filter(overlap_area_num > 0)
tracts_places_counties_trimmed <- # reactive({
st_intersection(tracts_places,
tracts_counties) %>%
mutate("overlap_area" = st_area(.),
"overlap_area_num" = as.numeric(overlap_area),
"overlap_pct" = overlap_area_num / place_area_num) %>%
filter(overlap_area_num > 0)
tracts_places <- # reactive({
pmap_df(.l = fips_codes_tidy %>%
filter(as.numeric(state_code) <= 72) %>%
select(state_code) %>%
distinct(),
.f = ~(tigris::places(state = ..1,
cb = TRUE,
class = "sf") %>%
rename("place_GEOID" = GEOID,
"place_NAME" = NAME) %>%
filter(place_GEOID %in%
cities_acs_places_selected$GEOID))) %>%
select(PLACEFP, place_GEOID, place_NAME) %>%
mutate("place_area" = st_area(.),
"place_area_num" = as.numeric(place_area)) %>%
relocate(geometry, .after = last_col())
tracts_places <- # reactive({
pmap_df(.l = fips_codes_tidy %>%
filter(as.numeric(state_code) <= 72) %>%
select(state_code) %>%
distinct(),
.f = ~(tigris::places(state = ..1,
cb = TRUE,
class = "sf") %>%
rename("place_GEOID" = GEOID,
"place_NAME" = NAME) %>%
filter(place_GEOID %in%
cities_acs_places_selected$GEOID))) %>%
select(STATEFP, PLACEFP, place_GEOID, place_NAME) %>%
mutate("place_area" = st_area(.),
"place_area_num" = as.numeric(place_area)) %>%
relocate(geometry, .after = last_col())
tracts_counties <- # reactive({
pmap_df(.l = tracts_places %>%
st_drop_geometry() %>%
select(STATEFP) %>%
distinct(),
.f = ~(tigris::counties(state = ..1,
cb = TRUE,
class = "sf") %>%
rename("county_GEOID" = GEOID,
"county_NAME" = NAME))) %>%
select(COUNTYFP, county_GEOID, county_NAME)
tracts_places_counties_trimmed <- # reactive({
st_intersection(tracts_places,
tracts_counties) %>%
mutate("overlap_area" = st_area(.),
"overlap_area_num" = as.numeric(overlap_area),
"overlap_pct" = overlap_area_num / place_area_num) %>%
filter(overlap_area_num > 0)
View(tracts_places_counties_trimmed)
# Set minimum overlap threshold, default units [m^2]
tracts_places_counties_trimmed <- # reactive({
st_intersection(tracts_places,
tracts_counties) %>%
mutate("overlap_area" = st_area(.),
"overlap_area_num" = as.numeric(overlap_area),
"overlap_pct" = overlap_area_num / place_area_num) %>%
filter(overlap_area_num > 0) %>%
relocate(geometry, .after = last_col())
tracts_places_counties_trimmed <- # reactive({
st_intersection(tracts_places,
tracts_counties) %>%
mutate("overlap_area" = st_area(.),
"overlap_area_num" = as.numeric(overlap_area),
"overlap_pct" = overlap_area_num / place_area_num) %>%
filter(overlap_area_num > 0) %>%
relocate(geometry, .after = last_col())
mapview::mapview(tracts_places,
col.regions = "orange") +
mapview::mapview(tracts_counties %>%
filter(county_GEOID %in%
tracts_places_counties$county_GEOID),
color = "white",
col.regions = "blue",
alpha.regions = 0.4)
tracts_places_counties <- # reactive({
st_intersection(tracts_places,
tracts_counties) %>%
mutate("overlap_area" = st_area(.),
"overlap_area_num" = as.numeric(overlap_area),
"overlap_pct" = overlap_area_num / place_area_num) %>%
filter(overlap_area_num > 0) %>%
relocate(geometry, .after = last_col())
rm(tracts_places_counties_trimmed)
mapview::mapview(tracts_places,
col.regions = "orange") +
mapview::mapview(tracts_counties %>%
filter(county_GEOID %in%
tracts_places_counties$county_GEOID),
color = "white",
col.regions = "blue",
alpha.regions = 0.4)
tracts_places_counties <- # reactive({
st_intersection(tracts_places,
tracts_counties) %>%
mutate("overlap_area" = st_area(.),
"overlap_area_num" = as.numeric(overlap_area),
"overlap_pct" = overlap_area_num / place_area_num) %>%
filter(overlap_pct > 0) %>%
relocate(geometry, .after = last_col())
View(tracts_places_counties)
View(tracts_places)
tracts_places <- # reactive({
pmap_df(.l = fips_codes_tidy %>%
filter(as.numeric(state_code) <= 72) %>%
select(state_code) %>%
distinct(),
.f = ~(tigris::places(state = ..1,
cb = TRUE,
class = "sf") %>%
rename("place_GEOID" = GEOID,
"place_NAME" = NAME) %>%
filter(place_GEOID %in%
cities_acs_places_selected$GEOID)))
View(fips_codes_tidy)
fips_codes_tidy %>%
filter(as.numeric(state_code) <= 72) %>%
select(state_code) %>%
distinct()
View(cities_acs_places_selected)
mapshot(
mapview::mapview(tracts_places,
col.regions = "orange") +
mapview::mapview(tracts_counties %>%
filter(county_GEOID %in%
tracts_places_counties$county_GEOID),
color = "white",
col.regions = "blue",
alpha.regions = 0.4),
url = paste0(getwd(), "/places_counties.html"))
# Spatial join check (don't want counties that only border included)
mapview::mapshot(
mapview::mapview(tracts_places,
col.regions = "orange") +
mapview::mapview(tracts_counties %>%
filter(county_GEOID %in%
tracts_places_counties$county_GEOID),
color = "white",
col.regions = "blue",
alpha.regions = 0.4),
url = paste0(getwd(), "/places_counties.html"))
library(mapview)
update.packages("mapview")
update.packages(mapview)
remotes::install_github("r-spatial/mapview")
remotes::install_github("r-spatial/mapview")
mapview::mapview(tracts_places,
col.regions = "orange") +
mapview::mapview(tracts_counties %>%
filter(county_GEOID %in%
tracts_places_counties$county_GEOID),
color = "white",
col.regions = "blue",
alpha.regions = 0.4)
temp <- pmap_df(.l = tracts_places_counties %>%
select(STATEFP, COUNTYFP) %>%
distinct() %>%
head(1),
.f = ~(tigris::places(state = ..1,
county = ..2,
cb = TRUE,
class = "sf")))
tracts_places_counties %>%
select(STATEFP, COUNTYFP) %>%
distinct()
tracts_places_counties <- tracts_places_counties %>% st_drop_geometry()
tracts_places_counties %>%
select(STATEFP, COUNTYFP) %>%
distinct() %>%
head(1)
temp <- pmap_df(.l = tracts_places_counties %>%
select(STATEFP, COUNTYFP) %>%
distinct() %>%
head(1),
.f = ~(tigris::places(state = ..1,
county = ..2,
cb = TRUE,
class = "sf")))
temp <- pmap_df(.l = tracts_places_counties %>%
select(STATEFP, COUNTYFP) %>%
distinct() %>%
head(1),
.f = ~(tigris::tracts(state = ..1,
county = ..2,
cb = TRUE,
class = "sf")))
temp <- pmap_df(.l = tracts_places_counties %>%
select(STATEFP, COUNTYFP) %>%
distinct() %>%
head(1),
.f = ~(tigris::tracts(state = ..1,
county = ..2,
cb = TRUE,
class = "sf") %>%
st_filter(tracts_places)))
View(temp)
mapview::mapview(temp)
temp <- pmap_df(.l = tracts_places_counties %>%
select(STATEFP, COUNTYFP) %>%
distinct() %>%
head(1),
.f = ~(tigris::tracts(state = ..1,
county = ..2,
cb = TRUE,
class = "sf") %>%
st_filter(tracts_places,
.predicate = st_within)))
mapview::mapview(temp)
View(temp)
temp <- pmap_df(.l = tracts_places_counties %>%
select(STATEFP, COUNTYFP) %>%
distinct() %>%
head(1),
.f = ~(tigris::tracts(state = ..1,
county = ..2,
cb = TRUE,
class = "sf") %>%
select(GEOID) %>%
st_join(tracts_places %>%
select(place_GEOID))))
temp <- pmap_df(.l = tracts_places_counties %>%
select(STATEFP, COUNTYFP) %>%
distinct() %>%
head(1),
.f = ~(tigris::tracts(state = ..1,
county = ..2,
cb = TRUE,
class = "sf") %>%
select(GEOID) %>%
st_join(tracts_places %>%
select(place_GEOID),
left = FALSE)))
temp <- load_variables(year = 2019,
dataset ="acs5/subject",
cache = TRUE)
View(temp)
temp <- pmap_df(.l = tracts_places_counties %>%
select(STATEFP, COUNTYFP) %>%
distinct() %>%
head(1),
.f = ~(tigris::tracts(state = ..1,
county = ..2,
cb = TRUE,
class = "sf") %>%
select(GEOID) %>%
st_join(tracts_places %>%
select(place_GEOID),
left = FALSE)))
temp <- pmap_df(.l = tracts_places_counties %>%
select(STATEFP, COUNTYFP) %>%
distinct(),
.f = ~(get_acs(geography = "tract",
year = 2019,
variables = c("S0101_C01_006",
"S0101_C01_007",
"S0101_C01_008"),
survey = "acs5",
state = ..1,
county = ..2,
geometry = FALSE,
wide = TRUE)))
View(temp)
temp2 <- pmap_df(.l = tracts_places_counties %>%
select(STATEFP, COUNTYFP) %>%
distinct() %>%
head(1),
.f = ~(tigris::tracts(state = ..1,
county = ..2,
cb = TRUE,
class = "sf") %>%
select(GEOID) %>%
st_join(tracts_places %>%
select(place_GEOID),
left = FALSE)))
temp3 <- temp %>%
filter(GEOID %in% temp2$GEOID)
View(temp3)
